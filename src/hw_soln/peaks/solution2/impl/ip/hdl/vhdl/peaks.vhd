-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity peaks is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    samples_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    samples_V_empty_n : IN STD_LOGIC;
    samples_V_read : OUT STD_LOGIC;
    amplitude_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    amplitude_V_full_n : IN STD_LOGIC;
    amplitude_V_write : OUT STD_LOGIC;
    locations_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    locations_V_full_n : IN STD_LOGIC;
    locations_V_write : OUT STD_LOGIC );
end;


architecture behav of peaks is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "peaks,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.100000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=284,HLS_SYN_LUT=774}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st11_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal tmp_6_reg_111 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_111_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal or_cond_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_tmp_6_reg_111_pp0_it2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_111_pp0_it3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_111_pp0_it4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_111_pp0_it5 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_buf_1_2_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buf_1_9_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_157_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc_reg_345 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal tmp_1_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal exitcond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_364_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_364_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_364_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_364_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_368 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_20_reg_373_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_380_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_380_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar_phi_fu_104_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar_reg_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_phi_fu_115_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_buf_1_2_phi_fu_126_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buf_1_9_phi_fu_138_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buf_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buf_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buf_1_2_to_int_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_buf_1_to_int_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_247_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_buf_0_to_int_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_272_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_282_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_145_ce : STD_LOGIC;
    signal grp_fu_145_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_151_ce : STD_LOGIC;
    signal grp_fu_151_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_331 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component peaks_fcmp_32ns_32ns_1_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    peaks_fcmp_32ns_32ns_1_4_U0 : component peaks_fcmp_32ns_32ns_1_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shift_buf_1_2_phi_fu_126_p4,
        din1 => shift_buf_1_9_phi_fu_138_p4,
        ce => grp_fu_145_ce,
        opcode => grp_fu_145_opcode,
        dout => grp_fu_145_p2);

    peaks_fcmp_32ns_32ns_1_4_U1 : component peaks_fcmp_32ns_32ns_1_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => shift_buf_1_9_phi_fu_138_p4,
        din1 => samples_V_dout,
        ce => grp_fu_151_ce,
        opcode => grp_fu_151_opcode,
        dout => grp_fu_151_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond_fu_185_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                    if (not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
                        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then 
                        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- invdar_reg_100 assign process. --
    invdar_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_reg_350))) then 
                invdar_reg_100 <= indvarinc_reg_345;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                invdar_reg_100 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- shift_buf_1_2_reg_123 assign process. --
    shift_buf_1_2_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                shift_buf_1_2_reg_123 <= shift_buf_1_fu_76;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it1))) then 
                shift_buf_1_2_reg_123 <= shift_buf_1_9_reg_133;
            end if; 
        end if;
    end process;

    -- shift_buf_1_9_reg_133 assign process. --
    shift_buf_1_9_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                shift_buf_1_9_reg_133 <= shift_buf_fu_72;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it1))) then 
                shift_buf_1_9_reg_133 <= tmp_20_reg_373;
            end if; 
        end if;
    end process;

    -- tmp_6_reg_111 assign process. --
    tmp_6_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_reg_350)))) then 
                tmp_6_reg_111 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                tmp_6_reg_111 <= i_reg_368;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                ap_reg_ppstg_exitcond_reg_364_pp0_it1 <= exitcond_reg_364;
                ap_reg_ppstg_tmp_6_reg_111_pp0_it1 <= tmp_6_reg_111;
                exitcond_reg_364 <= exitcond_fu_185_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                ap_reg_ppstg_exitcond_reg_364_pp0_it2 <= ap_reg_ppstg_exitcond_reg_364_pp0_it1;
                ap_reg_ppstg_exitcond_reg_364_pp0_it3 <= ap_reg_ppstg_exitcond_reg_364_pp0_it2;
                ap_reg_ppstg_exitcond_reg_364_pp0_it4 <= ap_reg_ppstg_exitcond_reg_364_pp0_it3;
                ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it2 <= shift_buf_1_9_reg_133;
                ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it3 <= ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it2;
                ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it4 <= ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it3;
                ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it5 <= ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it4;
                ap_reg_ppstg_tmp_20_reg_373_pp0_it2 <= tmp_20_reg_373;
                ap_reg_ppstg_tmp_2_reg_380_pp0_it2 <= tmp_2_reg_380;
                ap_reg_ppstg_tmp_2_reg_380_pp0_it3 <= ap_reg_ppstg_tmp_2_reg_380_pp0_it2;
                ap_reg_ppstg_tmp_6_reg_111_pp0_it2 <= ap_reg_ppstg_tmp_6_reg_111_pp0_it1;
                ap_reg_ppstg_tmp_6_reg_111_pp0_it3 <= ap_reg_ppstg_tmp_6_reg_111_pp0_it2;
                ap_reg_ppstg_tmp_6_reg_111_pp0_it4 <= ap_reg_ppstg_tmp_6_reg_111_pp0_it3;
                ap_reg_ppstg_tmp_6_reg_111_pp0_it5 <= ap_reg_ppstg_tmp_6_reg_111_pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                i_reg_368 <= i_fu_191_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                indvarinc_reg_345 <= indvarinc_fu_157_p2;
                tmp_1_reg_350 <= tmp_1_fu_173_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it4))) then
                or_cond_reg_406 <= or_cond_fu_324_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it3))) then
                tmp_11_reg_396 <= tmp_11_fu_308_p2;
                tmp_17_reg_401 <= tmp_17_fu_318_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it2))) then
                tmp_14_reg_391 <= tmp_14_fu_298_p2;
                tmp_7_reg_385 <= tmp_7_fu_263_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                tmp_20_reg_373 <= samples_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_reg_364 = ap_const_lv1_0) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                tmp_2_reg_380 <= tmp_2_fu_227_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it5, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6, tmp_1_reg_350)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_1_reg_350))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                end if;
            when ap_ST_st11_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    amplitude_V_din <= ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it5;

    -- amplitude_V_write assign process. --
    amplitude_V_write_assign_proc : process(ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, or_cond_reg_406, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6)
    begin
        if ((not((ap_const_lv1_0 = or_cond_reg_406)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            amplitude_V_write <= ap_const_logic_1;
        else 
            amplitude_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st11_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_331 assign process. --
    ap_sig_bdd_331_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_331 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(samples_V_empty_n, exitcond_reg_364)
    begin
                ap_sig_bdd_57 <= ((samples_V_empty_n = ap_const_logic_0) and (exitcond_reg_364 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(amplitude_V_full_n, locations_V_full_n, or_cond_reg_406)
    begin
                ap_sig_bdd_77 <= (((locations_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond_reg_406))) or (not((ap_const_lv1_0 = or_cond_reg_406)) and (amplitude_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_4 assign process. --
    ap_sig_cseq_ST_st11_fsm_4_assign_proc : process(ap_sig_bdd_331)
    begin
        if (ap_sig_bdd_331) then 
            ap_sig_cseq_ST_st11_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_185_p2 <= "1" when (tmp_6_phi_fu_115_p4 = ap_const_lv7_64) else "0";

    -- grp_fu_145_ce assign process. --
    grp_fu_145_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            grp_fu_145_ce <= ap_const_logic_1;
        else 
            grp_fu_145_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_145_opcode <= ap_const_lv5_4;

    -- grp_fu_151_ce assign process. --
    grp_fu_151_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            grp_fu_151_ce <= ap_const_logic_1;
        else 
            grp_fu_151_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_151_opcode <= ap_const_lv5_2;
    i_fu_191_p2 <= std_logic_vector(unsigned(tmp_6_phi_fu_115_p4) + unsigned(ap_const_lv7_1));
    indvarinc_fu_157_p2 <= std_logic_vector(unsigned(invdar_reg_100) + unsigned(ap_const_lv2_1));
    invdar_phi_fu_104_p4 <= invdar_reg_100;
    locations_V_din <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_6_reg_111_pp0_it5),32));

    -- locations_V_write assign process. --
    locations_V_write_assign_proc : process(ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, or_cond_reg_406, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6)
    begin
        if ((not((ap_const_lv1_0 = or_cond_reg_406)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            locations_V_write <= ap_const_logic_1;
        else 
            locations_V_write <= ap_const_logic_0;
        end if; 
    end process;

    notlhs4_fu_251_p2 <= "0" when (tmp_8_fu_237_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_286_p2 <= "0" when (tmp_12_fu_272_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_215_p2 <= "0" when (tmp_3_fu_201_p4 = ap_const_lv8_FF) else "1";
    notrhs5_fu_257_p2 <= "1" when (tmp_5_fu_247_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_292_p2 <= "1" when (tmp_13_fu_282_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_221_p2 <= "1" when (tmp_4_fu_211_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_324_p2 <= (tmp_11_reg_396 and tmp_17_reg_401);

    -- samples_V_read assign process. --
    samples_V_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, exitcond_reg_364, ap_sig_bdd_57, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_57 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_77 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            samples_V_read <= ap_const_logic_1;
        else 
            samples_V_read <= ap_const_logic_0;
        end if; 
    end process;

    shift_buf_0_to_int_fu_269_p1 <= ap_reg_ppstg_tmp_20_reg_373_pp0_it2;

    -- shift_buf_1_2_phi_fu_126_p4 assign process. --
    shift_buf_1_2_phi_fu_126_p4_assign_proc : process(ap_reg_ppiten_pp0_it2, shift_buf_1_2_reg_123, shift_buf_1_9_reg_133, ap_reg_ppstg_exitcond_reg_364_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it1))) then 
            shift_buf_1_2_phi_fu_126_p4 <= shift_buf_1_9_reg_133;
        else 
            shift_buf_1_2_phi_fu_126_p4 <= shift_buf_1_2_reg_123;
        end if; 
    end process;

    shift_buf_1_2_to_int_fu_197_p1 <= shift_buf_1_2_phi_fu_126_p4;

    -- shift_buf_1_9_phi_fu_138_p4 assign process. --
    shift_buf_1_9_phi_fu_138_p4_assign_proc : process(ap_reg_ppiten_pp0_it2, shift_buf_1_9_reg_133, ap_reg_ppstg_exitcond_reg_364_pp0_it1, tmp_20_reg_373)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_364_pp0_it1))) then 
            shift_buf_1_9_phi_fu_138_p4 <= tmp_20_reg_373;
        else 
            shift_buf_1_9_phi_fu_138_p4 <= shift_buf_1_9_reg_133;
        end if; 
    end process;

    shift_buf_1_fu_76 <= ap_const_lv32_0;
    shift_buf_1_to_int_fu_233_p1 <= ap_reg_ppstg_shift_buf_1_9_reg_133_pp0_it2;
    shift_buf_fu_72 <= ap_const_lv32_0;
    tmp_11_fu_308_p2 <= (tmp_9_fu_304_p2 and grp_fu_145_p2);
    tmp_12_fu_272_p4 <= shift_buf_0_to_int_fu_269_p1(30 downto 23);
    tmp_13_fu_282_p1 <= shift_buf_0_to_int_fu_269_p1(23 - 1 downto 0);
    tmp_14_fu_298_p2 <= (notrhs9_fu_292_p2 or notlhs8_fu_286_p2);
    tmp_15_fu_314_p2 <= (tmp_7_reg_385 and tmp_14_reg_391);
    tmp_17_fu_318_p2 <= (tmp_15_fu_314_p2 and grp_fu_151_p2);
    tmp_1_fu_173_p2 <= "1" when (invdar_reg_100 = ap_const_lv2_2) else "0";
    tmp_2_fu_227_p2 <= (notrhs_fu_221_p2 or notlhs_fu_215_p2);
    tmp_3_fu_201_p4 <= shift_buf_1_2_to_int_fu_197_p1(30 downto 23);
    tmp_4_fu_211_p1 <= shift_buf_1_2_to_int_fu_197_p1(23 - 1 downto 0);
    tmp_5_fu_247_p1 <= shift_buf_1_to_int_fu_233_p1(23 - 1 downto 0);

    -- tmp_6_phi_fu_115_p4 assign process. --
    tmp_6_phi_fu_115_p4_assign_proc : process(tmp_6_reg_111, ap_sig_cseq_ST_pp0_stg0_fsm_3, exitcond_reg_364, ap_reg_ppiten_pp0_it1, i_reg_368)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (exitcond_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            tmp_6_phi_fu_115_p4 <= i_reg_368;
        else 
            tmp_6_phi_fu_115_p4 <= tmp_6_reg_111;
        end if; 
    end process;

    tmp_7_fu_263_p2 <= (notrhs5_fu_257_p2 or notlhs4_fu_251_p2);
    tmp_8_fu_237_p4 <= shift_buf_1_to_int_fu_233_p1(30 downto 23);
    tmp_9_fu_304_p2 <= (ap_reg_ppstg_tmp_2_reg_380_pp0_it3 and tmp_7_reg_385);
end behav;
