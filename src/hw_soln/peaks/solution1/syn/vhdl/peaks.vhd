-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity peaks is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    signals_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_0_ce0 : OUT STD_LOGIC;
    signals_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_0_ce1 : OUT STD_LOGIC;
    signals_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_1_ce0 : OUT STD_LOGIC;
    signals_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_1_ce1 : OUT STD_LOGIC;
    signals_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_2_ce0 : OUT STD_LOGIC;
    signals_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signals_2_ce1 : OUT STD_LOGIC;
    signals_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    amplitude_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    amplitude_ce0 : OUT STD_LOGIC;
    amplitude_we0 : OUT STD_LOGIC;
    amplitude_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    locations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    locations_ce0 : OUT STD_LOGIC;
    locations_we0 : OUT STD_LOGIC;
    locations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of peaks is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "peaks,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.358500,HLS_SYN_LAT=220,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=582,HLS_SYN_LUT=817}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_pp0_stg1_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st25_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_st26_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st27_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv16_AB : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal i_reg_274 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_reg_274_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppstg_i_reg_274_pp0_it2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_reg_274_pp0_it3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_reg_274_pp0_it4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_reg_274_pp0_it5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_i_reg_274_pp0_it6 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_5_reg_673_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp6_reg_651_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i_cast_reg_563_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_329_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_572 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_572_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_572_pp0_it2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_572_pp0_it3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_578 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_593 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_387_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_613 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_619 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_401_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_reg_624 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp4_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp4_reg_645_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp4_reg_645_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp4_reg_645_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp6_reg_651_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_sel_tmp6_reg_651_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal signals_load_5_phi_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal signals_load_5_phi_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal signals_load_6_phi_fu_454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal signals_load_6_phi_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_5_reg_673_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_465_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_reg_677 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_687 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp3_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_286 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal peak_1_ph_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal tmp_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_phi_fu_278_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal newIndex2_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex9_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_350 : BOOLEAN;
    signal tmp_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal peak_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal peak_1_ph_cast_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal peak_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_474_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_474_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal signals_load_8_phi_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_355_ce : STD_LOGIC;
    signal grp_fu_365_ce : STD_LOGIC;
    signal grp_fu_474_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_355_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_365_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_474_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component peaks_urem_7ns_3ns_7_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component peaks_mul_9ns_7ns_16_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component peaks_mul_7ns_9ns_16_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    peaks_urem_7ns_3ns_7_11_U0 : component peaks_urem_7ns_3ns_7_11
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_phi_fu_278_p4,
        din1 => grp_fu_335_p1,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p2);

    peaks_urem_7ns_3ns_7_11_U1 : component peaks_urem_7ns_3ns_7_11
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_572,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    peaks_mul_9ns_7ns_16_3_U2 : component peaks_mul_9ns_7ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p2);

    peaks_mul_9ns_7ns_16_3_U3 : component peaks_mul_9ns_7ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => grp_fu_365_ce,
        dout => grp_fu_365_p2);

    peaks_mul_7ns_9ns_16_3_U4 : component peaks_mul_7ns_9ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_474_p0,
        din1 => grp_fu_474_p1,
        ce => grp_fu_474_ce,
        dout => grp_fu_474_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_323_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = exitcond_reg_568))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_const_lv1_0 = exitcond_reg_568))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_274 assign process. --
    i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_reg_274 <= ap_const_lv7_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_568))) then 
                i_reg_274 <= i_1_reg_578;
            end if; 
        end if;
    end process;

    -- peak_1_fu_68 assign process. --
    peak_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_reg_ppstg_tmp_5_reg_673_pp0_it8 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_fu_509_p2)))) then 
                peak_1_fu_68 <= peak_fu_520_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                peak_1_fu_68 <= peak_1_ph_cast_fu_310_p1;
            end if; 
        end if;
    end process;

    -- peak_1_ph_reg_261 assign process. --
    peak_1_ph_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                if ((ap_const_lv1_0 = tmp_fu_304_p2)) then 
                    peak_1_ph_reg_261 <= ap_const_lv1_0;
                elsif (not((ap_const_lv1_0 = tmp_fu_304_p2))) then 
                    peak_1_ph_reg_261 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    -- reg_289 assign process. --
    reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_7)) then 
                reg_289 <= signals_0_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)))) then 
                reg_289 <= signals_0_q0;
            end if; 
        end if;
    end process;

    -- reg_299 assign process. --
    reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not((ap_reg_ppstg_tmp_5_reg_673_pp0_it8 = ap_const_lv1_0)) and not((ap_const_lv1_0 = ap_reg_ppstg_sel_tmp6_reg_651_pp0_it8))))) then 
                reg_299 <= signals_2_q1;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
                reg_299 <= signals_2_q0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then
                    ap_reg_ppstg_i_cast_reg_563_pp0_it1(6 downto 0) <= i_cast_reg_563(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it2(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it1(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it3(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it2(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it4(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it3(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it5(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it4(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it6(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it5(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it7(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it6(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it8(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it7(6 downto 0);
                    ap_reg_ppstg_i_cast_reg_563_pp0_it9(6 downto 0) <= ap_reg_ppstg_i_cast_reg_563_pp0_it8(6 downto 0);
                ap_reg_ppstg_i_reg_274_pp0_it1 <= i_reg_274;
                ap_reg_ppstg_i_reg_274_pp0_it2 <= ap_reg_ppstg_i_reg_274_pp0_it1;
                ap_reg_ppstg_i_reg_274_pp0_it3 <= ap_reg_ppstg_i_reg_274_pp0_it2;
                ap_reg_ppstg_i_reg_274_pp0_it4 <= ap_reg_ppstg_i_reg_274_pp0_it3;
                ap_reg_ppstg_i_reg_274_pp0_it5 <= ap_reg_ppstg_i_reg_274_pp0_it4;
                ap_reg_ppstg_i_reg_274_pp0_it6 <= ap_reg_ppstg_i_reg_274_pp0_it5;
                ap_reg_ppstg_tmp_2_reg_572_pp0_it1 <= tmp_2_reg_572;
                ap_reg_ppstg_tmp_2_reg_572_pp0_it2 <= ap_reg_ppstg_tmp_2_reg_572_pp0_it1;
                ap_reg_ppstg_tmp_2_reg_572_pp0_it3 <= ap_reg_ppstg_tmp_2_reg_572_pp0_it2;
                exitcond_reg_568 <= exitcond_fu_323_p2;
                    i_cast_reg_563(6 downto 0) <= i_cast_fu_319_p1(6 downto 0);
                signals_load_5_phi_reg_657 <= signals_load_5_phi_fu_439_p3;
                tmp_12_reg_613 <= tmp_12_fu_387_p1;
                tmp_8_reg_619 <= grp_fu_365_p2(15 downto 9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then
                ap_reg_ppstg_sel_tmp4_reg_645_pp0_it6 <= sel_tmp4_reg_645;
                ap_reg_ppstg_sel_tmp4_reg_645_pp0_it7 <= ap_reg_ppstg_sel_tmp4_reg_645_pp0_it6;
                ap_reg_ppstg_sel_tmp4_reg_645_pp0_it8 <= ap_reg_ppstg_sel_tmp4_reg_645_pp0_it7;
                ap_reg_ppstg_sel_tmp6_reg_651_pp0_it6 <= sel_tmp6_reg_651;
                ap_reg_ppstg_sel_tmp6_reg_651_pp0_it7 <= ap_reg_ppstg_sel_tmp6_reg_651_pp0_it6;
                ap_reg_ppstg_sel_tmp6_reg_651_pp0_it8 <= ap_reg_ppstg_sel_tmp6_reg_651_pp0_it7;
                ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it7 <= signals_load_6_phi_reg_667;
                ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it8 <= ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it7;
                ap_reg_ppstg_tmp_5_reg_673_pp0_it7 <= tmp_5_reg_673;
                ap_reg_ppstg_tmp_5_reg_673_pp0_it8 <= ap_reg_ppstg_tmp_5_reg_673_pp0_it7;
                sel_tmp4_reg_645 <= sel_tmp4_fu_411_p2;
                sel_tmp6_reg_651 <= sel_tmp6_fu_416_p2;
                signals_load_6_phi_reg_667 <= signals_load_6_phi_fu_454_p3;
                tmp_11_reg_624 <= tmp_11_fu_401_p1;
                tmp_4_reg_593 <= grp_fu_355_p2(15 downto 9);
                tmp_5_reg_673 <= tmp_5_fu_460_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = exitcond_reg_568))) then
                i_1_reg_578 <= i_1_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then
                reg_295 <= signals_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_reg_ppstg_tmp_5_reg_673_pp0_it8 = ap_const_lv1_0)) and (ap_const_lv1_0 = ap_reg_ppstg_sel_tmp6_reg_651_pp0_it8))) then
                sel_tmp3_reg_707 <= sel_tmp3_fu_496_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = sel_tmp6_reg_651))) then
                sel_tmp5_reg_662 <= sel_tmp5_fu_447_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_5_reg_673_pp0_it7)))) then
                tmp_10_reg_687 <= grp_fu_474_p2(15 downto 9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_fu_323_p2))) then
                tmp_2_reg_572 <= tmp_2_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_const_lv1_0 = tmp_5_fu_460_p2)))) then
                tmp_7_reg_677 <= tmp_7_fu_465_p2;
            end if;
        end if;
    end process;
    i_cast_reg_563(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it1(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it2(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it3(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it4(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it5(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it6(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it7(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it8(31 downto 7) <= "0000000000000000000000000";
    ap_reg_ppstg_i_cast_reg_563_pp0_it9(31 downto 7) <= "0000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, exitcond_fu_323_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
            when ap_ST_pp0_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_323_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_6;
                end if;
            when ap_ST_pp0_stg1_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it8))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_6;
                end if;
            when ap_ST_st25_fsm_6 => 
                ap_NS_fsm <= ap_ST_st26_fsm_7;
            when ap_ST_st26_fsm_7 => 
                ap_NS_fsm <= ap_ST_st27_fsm_8;
            when ap_ST_st27_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- amplitude_address0 assign process. --
    amplitude_address0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_s_fu_514_p1, tmp_6_fu_537_p1, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8)) then 
            amplitude_address0 <= tmp_6_fu_537_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            amplitude_address0 <= tmp_s_fu_514_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            amplitude_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            amplitude_address0 <= "XXXXXX";
        end if; 
    end process;


    -- amplitude_ce0 assign process. --
    amplitude_ce0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8))) then 
            amplitude_ce0 <= ap_const_logic_1;
        else 
            amplitude_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- amplitude_d0 assign process. --
    amplitude_d0_assign_proc : process(ap_reg_ppiten_pp0_it9, reg_289, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it8, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            amplitude_d0 <= ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it8;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8))) then 
            amplitude_d0 <= reg_289;
        else 
            amplitude_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- amplitude_we0 assign process. --
    amplitude_we0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_tmp_5_reg_673_pp0_it8, ap_sig_cseq_ST_st3_fsm_2, tmp_fu_304_p2, tmp_9_fu_509_p2, ap_sig_cseq_ST_st27_fsm_8, tmp_1_fu_531_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_fu_304_p2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_reg_ppstg_tmp_5_reg_673_pp0_it8 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_fu_509_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8) and not((ap_const_lv1_0 = tmp_1_fu_531_p2))))) then 
            amplitude_we0 <= ap_const_logic_1;
        else 
            amplitude_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st27_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st27_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_286 assign process. --
    ap_sig_bdd_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_286 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_350 assign process. --
    ap_sig_bdd_350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_350 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_5_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_6 assign process. --
    ap_sig_cseq_ST_st25_fsm_6_assign_proc : process(ap_sig_bdd_286)
    begin
        if (ap_sig_bdd_286) then 
            ap_sig_cseq_ST_st25_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_7 assign process. --
    ap_sig_cseq_ST_st26_fsm_7_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_st26_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_8 assign process. --
    ap_sig_cseq_ST_st27_fsm_8_assign_proc : process(ap_sig_bdd_350)
    begin
        if (ap_sig_bdd_350) then 
            ap_sig_cseq_ST_st27_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_323_p2 <= "1" when (i_phi_fu_278_p4 = ap_const_lv7_63) else "0";
    grp_fu_335_ce <= ap_const_logic_1;
    grp_fu_335_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    grp_fu_341_ce <= ap_const_logic_1;
    grp_fu_341_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    grp_fu_355_ce <= ap_const_logic_1;
    grp_fu_355_p0 <= ap_const_lv16_AB(9 - 1 downto 0);
    grp_fu_355_p1 <= grp_fu_355_p10(7 - 1 downto 0);
    grp_fu_355_p10 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_2_reg_572_pp0_it3),16));
    grp_fu_365_ce <= ap_const_logic_1;
    grp_fu_365_p0 <= ap_const_lv16_AB(9 - 1 downto 0);
    grp_fu_365_p1 <= grp_fu_365_p10(7 - 1 downto 0);
    grp_fu_365_p10 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_reg_274_pp0_it3),16));
    grp_fu_474_ce <= ap_const_logic_1;
    grp_fu_474_p0 <= grp_fu_474_p00(7 - 1 downto 0);
    grp_fu_474_p00 <= std_logic_vector(resize(unsigned(tmp_7_reg_677),16));
    grp_fu_474_p1 <= ap_const_lv16_AB(9 - 1 downto 0);
    i_1_fu_346_p2 <= std_logic_vector(unsigned(i_reg_274) + unsigned(ap_const_lv7_1));
    i_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(i_phi_fu_278_p4),32));

    -- i_phi_fu_278_p4 assign process. --
    i_phi_fu_278_p4_assign_proc : process(i_reg_274, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_reg_568, i_1_reg_578)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_568))) then 
            i_phi_fu_278_p4 <= i_1_reg_578;
        else 
            i_phi_fu_278_p4 <= i_reg_274;
        end if; 
    end process;


    -- locations_address0 assign process. --
    locations_address0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st3_fsm_2, tmp_s_fu_514_p1, tmp_6_fu_537_p1, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8)) then 
            locations_address0 <= tmp_6_fu_537_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            locations_address0 <= tmp_s_fu_514_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            locations_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            locations_address0 <= "XXXXXX";
        end if; 
    end process;


    -- locations_ce0 assign process. --
    locations_ce0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8))) then 
            locations_ce0 <= ap_const_logic_1;
        else 
            locations_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- locations_d0 assign process. --
    locations_d0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_i_cast_reg_563_pp0_it9, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st27_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8)) then 
            locations_d0 <= ap_const_lv32_63;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            locations_d0 <= ap_reg_ppstg_i_cast_reg_563_pp0_it9;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            locations_d0 <= ap_const_lv32_0;
        else 
            locations_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- locations_we0 assign process. --
    locations_we0_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_tmp_5_reg_673_pp0_it8, ap_sig_cseq_ST_st3_fsm_2, tmp_fu_304_p2, tmp_9_fu_509_p2, ap_sig_cseq_ST_st27_fsm_8, tmp_1_fu_531_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_fu_304_p2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and not((ap_reg_ppstg_tmp_5_reg_673_pp0_it8 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_9_fu_509_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_8) and not((ap_const_lv1_0 = tmp_1_fu_531_p2))))) then 
            locations_we0 <= ap_const_logic_1;
        else 
            locations_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex2_fu_381_p1 <= std_logic_vector(resize(unsigned(tmp_4_reg_593),64));
    newIndex4_fu_405_p1 <= std_logic_vector(resize(unsigned(tmp_8_reg_619),64));
    newIndex9_fu_490_p1 <= std_logic_vector(resize(unsigned(tmp_10_reg_687),64));
    peak_1_ph_cast_fu_310_p1 <= std_logic_vector(resize(unsigned(peak_1_ph_reg_261),32));
    peak_fu_520_p2 <= std_logic_vector(unsigned(peak_1_fu_68) + unsigned(ap_const_lv32_1));
    sel_tmp1_fu_426_p3 <= 
        reg_289 when (sel_tmp_fu_421_p2(0) = '1') else 
        reg_299;
    sel_tmp2_fu_434_p2 <= "1" when (tmp_11_reg_624 = ap_const_lv3_1) else "0";
    sel_tmp3_fu_496_p3 <= 
        signals_1_q1 when (ap_reg_ppstg_sel_tmp4_reg_645_pp0_it8(0) = '1') else 
        signals_0_q1;
    sel_tmp4_fu_411_p2 <= "1" when (tmp_12_reg_613 = ap_const_lv3_0) else "0";
    sel_tmp5_fu_447_p3 <= 
        signals_0_q0 when (sel_tmp4_reg_645(0) = '1') else 
        signals_2_q0;
    sel_tmp6_fu_416_p2 <= "1" when (tmp_12_reg_613 = ap_const_lv3_1) else "0";
    sel_tmp_fu_421_p2 <= "1" when (tmp_11_reg_624 = ap_const_lv3_0) else "0";

    -- signals_0_address0 assign process. --
    signals_0_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5, newIndex2_fu_381_p1, newIndex4_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            signals_0_address0 <= newIndex4_fu_405_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            signals_0_address0 <= newIndex2_fu_381_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            signals_0_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            signals_0_address0 <= "XXXXXX";
        end if; 
    end process;


    -- signals_0_address1 assign process. --
    signals_0_address1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st25_fsm_6, newIndex9_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_6)) then 
            signals_0_address1 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            signals_0_address1 <= newIndex9_fu_490_p1(6 - 1 downto 0);
        else 
            signals_0_address1 <= "XXXXXX";
        end if; 
    end process;


    -- signals_0_ce0 assign process. --
    signals_0_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
            signals_0_ce0 <= ap_const_logic_1;
        else 
            signals_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- signals_0_ce1 assign process. --
    signals_0_ce1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st25_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_6) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)))) then 
            signals_0_ce1 <= ap_const_logic_1;
        else 
            signals_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- signals_1_address0 assign process. --
    signals_1_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5, newIndex2_fu_381_p1, newIndex4_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            signals_1_address0 <= newIndex4_fu_405_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            signals_1_address0 <= newIndex2_fu_381_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            signals_1_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            signals_1_address0 <= "XXXXXX";
        end if; 
    end process;

    signals_1_address1 <= newIndex9_fu_490_p1(6 - 1 downto 0);

    -- signals_1_ce0 assign process. --
    signals_1_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
            signals_1_ce0 <= ap_const_logic_1;
        else 
            signals_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- signals_1_ce1 assign process. --
    signals_1_ce1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            signals_1_ce1 <= ap_const_logic_1;
        else 
            signals_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- signals_2_address0 assign process. --
    signals_2_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5, newIndex2_fu_381_p1, newIndex4_fu_405_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                signals_2_address0 <= newIndex4_fu_405_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then 
                signals_2_address0 <= newIndex2_fu_381_p1(6 - 1 downto 0);
            else 
                signals_2_address0 <= "XXXXXX";
            end if;
        else 
            signals_2_address0 <= "XXXXXX";
        end if; 
    end process;


    -- signals_2_address1 assign process. --
    signals_2_address1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st25_fsm_6, newIndex9_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_6)) then 
            signals_2_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            signals_2_address1 <= newIndex9_fu_490_p1(6 - 1 downto 0);
        else 
            signals_2_address1 <= "XXXXXX";
        end if; 
    end process;


    -- signals_2_ce0 assign process. --
    signals_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
            signals_2_ce0 <= ap_const_logic_1;
        else 
            signals_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- signals_2_ce1 assign process. --
    signals_2_ce1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_st25_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_6) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)))) then 
            signals_2_ce1 <= ap_const_logic_1;
        else 
            signals_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    signals_load_5_phi_fu_439_p3 <= 
        reg_295 when (sel_tmp2_fu_434_p2(0) = '1') else 
        sel_tmp1_fu_426_p3;
    signals_load_6_phi_fu_454_p3 <= 
        reg_295 when (sel_tmp6_reg_651(0) = '1') else 
        sel_tmp5_reg_662;
    signals_load_8_phi_fu_503_p3 <= 
        reg_299 when (ap_reg_ppstg_sel_tmp6_reg_651_pp0_it8(0) = '1') else 
        sel_tmp3_reg_707;
    tmp_11_fu_401_p1 <= grp_fu_341_p2(3 - 1 downto 0);
    tmp_12_fu_387_p1 <= grp_fu_335_p2(3 - 1 downto 0);
    tmp_1_fu_531_p2 <= "1" when (signed(reg_299) < signed(reg_289)) else "0";
    tmp_2_fu_329_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(i_phi_fu_278_p4));
    tmp_5_fu_460_p2 <= "1" when (signed(signals_load_5_phi_reg_657) < signed(signals_load_6_phi_fu_454_p3)) else "0";
        tmp_6_fu_537_p1 <= std_logic_vector(resize(signed(peak_1_fu_68),64));

    tmp_7_fu_465_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_i_reg_274_pp0_it6) + unsigned(ap_const_lv7_1));
    tmp_9_fu_509_p2 <= "1" when (signed(ap_reg_ppstg_signals_load_6_phi_reg_667_pp0_it8) > signed(signals_load_8_phi_fu_503_p3)) else "0";
    tmp_fu_304_p2 <= "1" when (signed(reg_289) > signed(reg_295)) else "0";
        tmp_s_fu_514_p1 <= std_logic_vector(resize(signed(peak_1_fu_68),64));

end behav;
