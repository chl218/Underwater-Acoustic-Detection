-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parse_audio is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    signals_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_V_empty_n : IN STD_LOGIC;
    signals_V_read : OUT STD_LOGIC;
    hits_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hits_V_empty_n : IN STD_LOGIC;
    hits_V_read : OUT STD_LOGIC;
    locs_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    locs_V_empty_n : IN STD_LOGIC;
    locs_V_read : OUT STD_LOGIC;
    pairs_amplitude_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pairs_amplitude_V_full_n : IN STD_LOGIC;
    pairs_amplitude_V_write : OUT STD_LOGIC;
    pairs_duration_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pairs_duration_V_full_n : IN STD_LOGIC;
    pairs_duration_V_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of parse_audio is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parse_audio,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.940000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=369,HLS_SYN_LUT=323}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal sig_buf_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sig_buf_i_ce0 : STD_LOGIC;
    signal sig_buf_i_we0 : STD_LOGIC;
    signal sig_buf_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_buf_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_buf_t_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sig_buf_t_ce0 : STD_LOGIC;
    signal sig_buf_t_we0 : STD_LOGIC;
    signal sig_buf_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_buf_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_buf_U_ap_dummy_ce : STD_LOGIC;
    signal loc_buf_i_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal loc_buf_i_ce0 : STD_LOGIC;
    signal loc_buf_i_we0 : STD_LOGIC;
    signal loc_buf_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_i_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal loc_buf_i_ce1 : STD_LOGIC;
    signal loc_buf_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_t_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal loc_buf_t_ce0 : STD_LOGIC;
    signal loc_buf_t_we0 : STD_LOGIC;
    signal loc_buf_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_t_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal loc_buf_t_ce1 : STD_LOGIC;
    signal loc_buf_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_U_ap_dummy_ce : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_ap_start : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_ap_done : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_ap_continue : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_ap_idle : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_ap_ready : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_signals_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_buffer_signal_U0_signals_V_empty_n : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_signals_V_read : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_amp_buf_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal parse_audio_buffer_signal_U0_amp_buf_ce0 : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_amp_buf_we0 : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_amp_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_parse_audio_buffer_signal_U0_sig_buf : STD_LOGIC;
    signal parse_audio_buffer_signal_U0_amp_buf_pipo_status : STD_LOGIC;
    signal parse_audio_buffer_target_U0_ap_start : STD_LOGIC;
    signal parse_audio_buffer_target_U0_ap_done : STD_LOGIC;
    signal parse_audio_buffer_target_U0_ap_continue : STD_LOGIC;
    signal parse_audio_buffer_target_U0_ap_idle : STD_LOGIC;
    signal parse_audio_buffer_target_U0_ap_ready : STD_LOGIC;
    signal parse_audio_buffer_target_U0_hits_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_buffer_target_U0_hits_V_empty_n : STD_LOGIC;
    signal parse_audio_buffer_target_U0_hits_V_read : STD_LOGIC;
    signal parse_audio_buffer_target_U0_locs_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_buffer_target_U0_locs_V_empty_n : STD_LOGIC;
    signal parse_audio_buffer_target_U0_locs_V_read : STD_LOGIC;
    signal parse_audio_buffer_target_U0_loc_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal parse_audio_buffer_target_U0_loc_buf_ce0 : STD_LOGIC;
    signal parse_audio_buffer_target_U0_loc_buf_we0 : STD_LOGIC;
    signal parse_audio_buffer_target_U0_loc_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_chn_write_parse_audio_buffer_target_U0_loc_buf : STD_LOGIC;
    signal parse_audio_buffer_target_U0_loc_buf_pipo_status : STD_LOGIC;
    signal parse_audio_parse_signal_U0_ap_start : STD_LOGIC;
    signal parse_audio_parse_signal_U0_ap_done : STD_LOGIC;
    signal parse_audio_parse_signal_U0_ap_continue : STD_LOGIC;
    signal parse_audio_parse_signal_U0_ap_idle : STD_LOGIC;
    signal parse_audio_parse_signal_U0_ap_ready : STD_LOGIC;
    signal parse_audio_parse_signal_U0_signal_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal parse_audio_parse_signal_U0_signal_r_ce0 : STD_LOGIC;
    signal parse_audio_parse_signal_U0_signal_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_parse_signal_U0_locs_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal parse_audio_parse_signal_U0_locs_ce0 : STD_LOGIC;
    signal parse_audio_parse_signal_U0_locs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_parse_signal_U0_locs_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal parse_audio_parse_signal_U0_locs_ce1 : STD_LOGIC;
    signal parse_audio_parse_signal_U0_locs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_parse_signal_U0_pairs_amplitude_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_parse_signal_U0_pairs_amplitude_V_full_n : STD_LOGIC;
    signal parse_audio_parse_signal_U0_pairs_amplitude_V_write : STD_LOGIC;
    signal parse_audio_parse_signal_U0_pairs_duration_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_audio_parse_signal_U0_pairs_duration_V_full_n : STD_LOGIC;
    signal parse_audio_parse_signal_U0_pairs_duration_V_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal sig_buf_i_full_n : STD_LOGIC;
    signal sig_buf_i_write : STD_LOGIC;
    signal sig_buf_t_empty_n : STD_LOGIC;
    signal sig_buf_t_read : STD_LOGIC;
    signal loc_buf_i_full_n : STD_LOGIC;
    signal loc_buf_i_write : STD_LOGIC;
    signal loc_buf_t_empty_n : STD_LOGIC;
    signal loc_buf_t_read : STD_LOGIC;
    signal loc_buf_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_buf_t_we1 : STD_LOGIC;
    signal ap_reg_procdone_parse_audio_buffer_signal_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_parse_audio_buffer_target_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_parse_audio_parse_signal_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_parse_audio_buffer_target_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_parse_audio_buffer_target_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_parse_audio_buffer_target_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start : STD_LOGIC;

    component parse_audio_buffer_signal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        signals_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        signals_V_empty_n : IN STD_LOGIC;
        signals_V_read : OUT STD_LOGIC;
        amp_buf_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        amp_buf_ce0 : OUT STD_LOGIC;
        amp_buf_we0 : OUT STD_LOGIC;
        amp_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component parse_audio_buffer_target IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hits_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        hits_V_empty_n : IN STD_LOGIC;
        hits_V_read : OUT STD_LOGIC;
        locs_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        locs_V_empty_n : IN STD_LOGIC;
        locs_V_read : OUT STD_LOGIC;
        loc_buf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        loc_buf_ce0 : OUT STD_LOGIC;
        loc_buf_we0 : OUT STD_LOGIC;
        loc_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component parse_audio_parse_signal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        signal_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        signal_r_ce0 : OUT STD_LOGIC;
        signal_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        locs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        locs_ce0 : OUT STD_LOGIC;
        locs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        locs_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        locs_ce1 : OUT STD_LOGIC;
        locs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pairs_amplitude_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pairs_amplitude_V_full_n : IN STD_LOGIC;
        pairs_amplitude_V_write : OUT STD_LOGIC;
        pairs_duration_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pairs_duration_V_full_n : IN STD_LOGIC;
        pairs_duration_V_write : OUT STD_LOGIC );
    end component;


    component parse_audio_sig_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component parse_audio_loc_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    sig_buf_U : component parse_audio_sig_buf
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => sig_buf_i_address0,
        i_ce0 => sig_buf_i_ce0,
        i_we0 => sig_buf_i_we0,
        i_d0 => sig_buf_i_d0,
        i_q0 => sig_buf_i_q0,
        t_address0 => sig_buf_t_address0,
        t_ce0 => sig_buf_t_ce0,
        t_we0 => sig_buf_t_we0,
        t_d0 => sig_buf_t_d0,
        t_q0 => sig_buf_t_q0,
        i_ce => sig_buf_U_ap_dummy_ce,
        t_ce => sig_buf_U_ap_dummy_ce,
        i_full_n => sig_buf_i_full_n,
        i_write => sig_buf_i_write,
        t_empty_n => sig_buf_t_empty_n,
        t_read => sig_buf_t_read);

    loc_buf_U : component parse_audio_loc_buf
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => loc_buf_i_address0,
        i_ce0 => loc_buf_i_ce0,
        i_we0 => loc_buf_i_we0,
        i_d0 => loc_buf_i_d0,
        i_q0 => loc_buf_i_q0,
        i_address1 => loc_buf_i_address1,
        i_ce1 => loc_buf_i_ce1,
        i_q1 => loc_buf_i_q1,
        t_address0 => loc_buf_t_address0,
        t_ce0 => loc_buf_t_ce0,
        t_we0 => loc_buf_t_we0,
        t_d0 => loc_buf_t_d0,
        t_q0 => loc_buf_t_q0,
        t_address1 => loc_buf_t_address1,
        t_ce1 => loc_buf_t_ce1,
        t_q1 => loc_buf_t_q1,
        i_ce => loc_buf_U_ap_dummy_ce,
        t_ce => loc_buf_U_ap_dummy_ce,
        i_full_n => loc_buf_i_full_n,
        i_write => loc_buf_i_write,
        t_empty_n => loc_buf_t_empty_n,
        t_read => loc_buf_t_read);

    parse_audio_buffer_signal_U0 : component parse_audio_buffer_signal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => parse_audio_buffer_signal_U0_ap_start,
        ap_done => parse_audio_buffer_signal_U0_ap_done,
        ap_continue => parse_audio_buffer_signal_U0_ap_continue,
        ap_idle => parse_audio_buffer_signal_U0_ap_idle,
        ap_ready => parse_audio_buffer_signal_U0_ap_ready,
        signals_V_dout => parse_audio_buffer_signal_U0_signals_V_dout,
        signals_V_empty_n => parse_audio_buffer_signal_U0_signals_V_empty_n,
        signals_V_read => parse_audio_buffer_signal_U0_signals_V_read,
        amp_buf_address0 => parse_audio_buffer_signal_U0_amp_buf_address0,
        amp_buf_ce0 => parse_audio_buffer_signal_U0_amp_buf_ce0,
        amp_buf_we0 => parse_audio_buffer_signal_U0_amp_buf_we0,
        amp_buf_d0 => parse_audio_buffer_signal_U0_amp_buf_d0);

    parse_audio_buffer_target_U0 : component parse_audio_buffer_target
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => parse_audio_buffer_target_U0_ap_start,
        ap_done => parse_audio_buffer_target_U0_ap_done,
        ap_continue => parse_audio_buffer_target_U0_ap_continue,
        ap_idle => parse_audio_buffer_target_U0_ap_idle,
        ap_ready => parse_audio_buffer_target_U0_ap_ready,
        hits_V_dout => parse_audio_buffer_target_U0_hits_V_dout,
        hits_V_empty_n => parse_audio_buffer_target_U0_hits_V_empty_n,
        hits_V_read => parse_audio_buffer_target_U0_hits_V_read,
        locs_V_dout => parse_audio_buffer_target_U0_locs_V_dout,
        locs_V_empty_n => parse_audio_buffer_target_U0_locs_V_empty_n,
        locs_V_read => parse_audio_buffer_target_U0_locs_V_read,
        loc_buf_address0 => parse_audio_buffer_target_U0_loc_buf_address0,
        loc_buf_ce0 => parse_audio_buffer_target_U0_loc_buf_ce0,
        loc_buf_we0 => parse_audio_buffer_target_U0_loc_buf_we0,
        loc_buf_d0 => parse_audio_buffer_target_U0_loc_buf_d0);

    parse_audio_parse_signal_U0 : component parse_audio_parse_signal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => parse_audio_parse_signal_U0_ap_start,
        ap_done => parse_audio_parse_signal_U0_ap_done,
        ap_continue => parse_audio_parse_signal_U0_ap_continue,
        ap_idle => parse_audio_parse_signal_U0_ap_idle,
        ap_ready => parse_audio_parse_signal_U0_ap_ready,
        signal_r_address0 => parse_audio_parse_signal_U0_signal_r_address0,
        signal_r_ce0 => parse_audio_parse_signal_U0_signal_r_ce0,
        signal_r_q0 => parse_audio_parse_signal_U0_signal_r_q0,
        locs_address0 => parse_audio_parse_signal_U0_locs_address0,
        locs_ce0 => parse_audio_parse_signal_U0_locs_ce0,
        locs_q0 => parse_audio_parse_signal_U0_locs_q0,
        locs_address1 => parse_audio_parse_signal_U0_locs_address1,
        locs_ce1 => parse_audio_parse_signal_U0_locs_ce1,
        locs_q1 => parse_audio_parse_signal_U0_locs_q1,
        pairs_amplitude_V_din => parse_audio_parse_signal_U0_pairs_amplitude_V_din,
        pairs_amplitude_V_full_n => parse_audio_parse_signal_U0_pairs_amplitude_V_full_n,
        pairs_amplitude_V_write => parse_audio_parse_signal_U0_pairs_amplitude_V_write,
        pairs_duration_V_din => parse_audio_parse_signal_U0_pairs_duration_V_din,
        pairs_duration_V_full_n => parse_audio_parse_signal_U0_pairs_duration_V_full_n,
        pairs_duration_V_write => parse_audio_parse_signal_U0_pairs_duration_V_write);





    -- ap_reg_procdone_parse_audio_buffer_signal_U0 assign process. --
    ap_reg_procdone_parse_audio_buffer_signal_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_parse_audio_buffer_signal_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_parse_audio_buffer_signal_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = parse_audio_buffer_signal_U0_ap_done)) then 
                    ap_reg_procdone_parse_audio_buffer_signal_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_parse_audio_buffer_target_U0 assign process. --
    ap_reg_procdone_parse_audio_buffer_target_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_parse_audio_buffer_target_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_parse_audio_buffer_target_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = parse_audio_buffer_target_U0_ap_done)) then 
                    ap_reg_procdone_parse_audio_buffer_target_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_parse_audio_parse_signal_U0 assign process. --
    ap_reg_procdone_parse_audio_parse_signal_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_parse_audio_parse_signal_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_parse_audio_parse_signal_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = parse_audio_parse_signal_U0_ap_done)) then 
                    ap_reg_procdone_parse_audio_parse_signal_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready assign process. --
    ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = parse_audio_buffer_signal_U0_ap_ready)) then 
                    ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_parse_audio_buffer_target_U0_ap_ready assign process. --
    ap_reg_ready_parse_audio_buffer_target_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_parse_audio_buffer_target_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_parse_audio_buffer_target_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = parse_audio_buffer_target_U0_ap_ready)) then 
                    ap_reg_ready_parse_audio_buffer_target_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    ap_chn_write_parse_audio_buffer_signal_U0_sig_buf <= parse_audio_buffer_signal_U0_ap_done;
    ap_chn_write_parse_audio_buffer_target_U0_loc_buf <= parse_audio_buffer_target_U0_ap_done;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(parse_audio_buffer_signal_U0_ap_idle, parse_audio_buffer_target_U0_ap_idle, parse_audio_parse_signal_U0_ap_idle, sig_buf_t_empty_n, loc_buf_t_empty_n)
    begin
        if (((ap_const_logic_1 = parse_audio_buffer_signal_U0_ap_idle) and (ap_const_logic_1 = parse_audio_buffer_target_U0_ap_idle) and (ap_const_logic_1 = parse_audio_parse_signal_U0_ap_idle) and (ap_const_logic_0 = sig_buf_t_empty_n) and (ap_const_logic_0 = loc_buf_t_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(parse_audio_parse_signal_U0_ap_done)
    begin
        if ((ap_const_logic_1 = parse_audio_parse_signal_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready assign process. --
    ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready_assign_proc : process(parse_audio_buffer_signal_U0_ap_ready, ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready)) then 
            ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready <= parse_audio_buffer_signal_U0_ap_ready;
        else 
            ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_parse_audio_buffer_target_U0_ap_ready assign process. --
    ap_sig_ready_parse_audio_buffer_target_U0_ap_ready_assign_proc : process(parse_audio_buffer_target_U0_ap_ready, ap_reg_ready_parse_audio_buffer_target_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_parse_audio_buffer_target_U0_ap_ready)) then 
            ap_sig_ready_parse_audio_buffer_target_U0_ap_ready <= parse_audio_buffer_target_U0_ap_ready;
        else 
            ap_sig_ready_parse_audio_buffer_target_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start assign process. --
    ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready))) then 
            ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_parse_audio_buffer_target_U0_ap_start assign process. --
    ap_sig_start_in_parse_audio_buffer_target_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_parse_audio_buffer_target_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_parse_audio_buffer_target_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_parse_audio_buffer_target_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_parse_audio_buffer_target_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_parse_audio_buffer_target_U0_ap_ready, ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_parse_audio_buffer_target_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    hits_V_read <= parse_audio_buffer_target_U0_hits_V_read;
    loc_buf_U_ap_dummy_ce <= ap_const_logic_1;
    loc_buf_i_address0 <= parse_audio_buffer_target_U0_loc_buf_address0;
    loc_buf_i_address1 <= ap_const_lv4_0;
    loc_buf_i_ce0 <= parse_audio_buffer_target_U0_loc_buf_ce0;
    loc_buf_i_ce1 <= ap_const_logic_0;
    loc_buf_i_d0 <= parse_audio_buffer_target_U0_loc_buf_d0;
    loc_buf_i_we0 <= parse_audio_buffer_target_U0_loc_buf_we0;
    loc_buf_i_write <= parse_audio_buffer_target_U0_ap_done;
    loc_buf_t_address0 <= parse_audio_parse_signal_U0_locs_address0;
    loc_buf_t_address1 <= parse_audio_parse_signal_U0_locs_address1;
    loc_buf_t_ce0 <= parse_audio_parse_signal_U0_locs_ce0;
    loc_buf_t_ce1 <= parse_audio_parse_signal_U0_locs_ce1;
    loc_buf_t_d0 <= ap_const_lv32_0;
    loc_buf_t_d1 <= ap_const_lv32_0;
    loc_buf_t_read <= parse_audio_parse_signal_U0_ap_ready;
    loc_buf_t_we0 <= ap_const_logic_0;
    loc_buf_t_we1 <= ap_const_logic_0;
    locs_V_read <= parse_audio_buffer_target_U0_locs_V_read;
    pairs_amplitude_V_din <= parse_audio_parse_signal_U0_pairs_amplitude_V_din;
    pairs_amplitude_V_write <= parse_audio_parse_signal_U0_pairs_amplitude_V_write;
    pairs_duration_V_din <= parse_audio_parse_signal_U0_pairs_duration_V_din;
    pairs_duration_V_write <= parse_audio_parse_signal_U0_pairs_duration_V_write;
    parse_audio_buffer_signal_U0_amp_buf_pipo_status <= sig_buf_i_full_n;
    parse_audio_buffer_signal_U0_ap_continue <= parse_audio_buffer_signal_U0_amp_buf_pipo_status;
    parse_audio_buffer_signal_U0_ap_start <= ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start;
    parse_audio_buffer_signal_U0_signals_V_dout <= signals_V_dout;
    parse_audio_buffer_signal_U0_signals_V_empty_n <= signals_V_empty_n;
    parse_audio_buffer_target_U0_ap_continue <= parse_audio_buffer_target_U0_loc_buf_pipo_status;
    parse_audio_buffer_target_U0_ap_start <= ap_sig_start_in_parse_audio_buffer_target_U0_ap_start;
    parse_audio_buffer_target_U0_hits_V_dout <= hits_V_dout;
    parse_audio_buffer_target_U0_hits_V_empty_n <= hits_V_empty_n;
    parse_audio_buffer_target_U0_loc_buf_pipo_status <= loc_buf_i_full_n;
    parse_audio_buffer_target_U0_locs_V_dout <= locs_V_dout;
    parse_audio_buffer_target_U0_locs_V_empty_n <= locs_V_empty_n;
    parse_audio_parse_signal_U0_ap_continue <= ap_sig_hs_continue;
    parse_audio_parse_signal_U0_ap_start <= (sig_buf_t_empty_n and loc_buf_t_empty_n);
    parse_audio_parse_signal_U0_locs_q0 <= loc_buf_t_q0;
    parse_audio_parse_signal_U0_locs_q1 <= loc_buf_t_q1;
    parse_audio_parse_signal_U0_pairs_amplitude_V_full_n <= pairs_amplitude_V_full_n;
    parse_audio_parse_signal_U0_pairs_duration_V_full_n <= pairs_duration_V_full_n;
    parse_audio_parse_signal_U0_signal_r_q0 <= sig_buf_t_q0;
    sig_buf_U_ap_dummy_ce <= ap_const_logic_1;
    sig_buf_i_address0 <= parse_audio_buffer_signal_U0_amp_buf_address0;
    sig_buf_i_ce0 <= parse_audio_buffer_signal_U0_amp_buf_ce0;
    sig_buf_i_d0 <= parse_audio_buffer_signal_U0_amp_buf_d0;
    sig_buf_i_we0 <= parse_audio_buffer_signal_U0_amp_buf_we0;
    sig_buf_i_write <= parse_audio_buffer_signal_U0_ap_done;
    sig_buf_t_address0 <= parse_audio_parse_signal_U0_signal_r_address0;
    sig_buf_t_ce0 <= parse_audio_parse_signal_U0_signal_r_ce0;
    sig_buf_t_d0 <= ap_const_lv32_0;
    sig_buf_t_read <= parse_audio_parse_signal_U0_ap_ready;
    sig_buf_t_we0 <= ap_const_logic_0;
    signals_V_read <= parse_audio_buffer_signal_U0_signals_V_read;
end behav;
