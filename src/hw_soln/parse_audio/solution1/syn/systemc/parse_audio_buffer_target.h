// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _parse_audio_buffer_target_HH_
#define _parse_audio_buffer_target_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct parse_audio_buffer_target : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > hits_V_dout;
    sc_in< sc_logic > hits_V_empty_n;
    sc_out< sc_logic > hits_V_read;
    sc_in< sc_lv<32> > locs_V_dout;
    sc_in< sc_logic > locs_V_empty_n;
    sc_out< sc_logic > locs_V_read;
    sc_out< sc_lv<4> > loc_buf_address0;
    sc_out< sc_logic > loc_buf_ce0;
    sc_out< sc_logic > loc_buf_we0;
    sc_out< sc_lv<32> > loc_buf_d0;


    // Module declarations
    parse_audio_buffer_target(sc_module_name name);
    SC_HAS_PROCESS(parse_audio_buffer_target);

    ~parse_audio_buffer_target();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<4> > i_reg_81;
    sc_signal< sc_lv<1> > exitcond_fu_93_p2;
    sc_signal< sc_lv<1> > exitcond_reg_110;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_53;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_64;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<4> > i_1_fu_99_p2;
    sc_signal< sc_lv<4> > i_1_reg_114;
    sc_signal< bool > ap_sig_bdd_77;
    sc_signal< sc_lv<4> > i_phi_fu_85_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_105_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_2;
    sc_signal< bool > ap_sig_bdd_113;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st4_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_113();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_53();
    void thread_ap_sig_bdd_64();
    void thread_ap_sig_bdd_77();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st4_fsm_2();
    void thread_exitcond_fu_93_p2();
    void thread_hits_V_read();
    void thread_i_1_fu_99_p2();
    void thread_i_phi_fu_85_p4();
    void thread_loc_buf_address0();
    void thread_loc_buf_ce0();
    void thread_loc_buf_d0();
    void thread_loc_buf_we0();
    void thread_locs_V_read();
    void thread_tmp_s_fu_105_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
