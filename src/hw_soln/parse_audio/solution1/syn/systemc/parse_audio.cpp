// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "parse_audio.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic parse_audio::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic parse_audio::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> parse_audio::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool parse_audio::ap_true = true;
const sc_lv<4> parse_audio::ap_const_lv4_0 = "0000";
const sc_lv<4> parse_audio::ap_const_lv4_1 = "1";

parse_audio::parse_audio(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sig_buf_U = new parse_audio_sig_buf("sig_buf_U");
    sig_buf_U->clk(ap_clk);
    sig_buf_U->reset(ap_rst);
    sig_buf_U->i_address0(sig_buf_i_address0);
    sig_buf_U->i_ce0(sig_buf_i_ce0);
    sig_buf_U->i_we0(sig_buf_i_we0);
    sig_buf_U->i_d0(sig_buf_i_d0);
    sig_buf_U->i_q0(sig_buf_i_q0);
    sig_buf_U->t_address0(sig_buf_t_address0);
    sig_buf_U->t_ce0(sig_buf_t_ce0);
    sig_buf_U->t_we0(sig_buf_t_we0);
    sig_buf_U->t_d0(sig_buf_t_d0);
    sig_buf_U->t_q0(sig_buf_t_q0);
    sig_buf_U->i_ce(sig_buf_U_ap_dummy_ce);
    sig_buf_U->t_ce(sig_buf_U_ap_dummy_ce);
    sig_buf_U->i_full_n(sig_buf_i_full_n);
    sig_buf_U->i_write(sig_buf_i_write);
    sig_buf_U->t_empty_n(sig_buf_t_empty_n);
    sig_buf_U->t_read(sig_buf_t_read);
    loc_buf_U = new parse_audio_loc_buf("loc_buf_U");
    loc_buf_U->clk(ap_clk);
    loc_buf_U->reset(ap_rst);
    loc_buf_U->i_address0(loc_buf_i_address0);
    loc_buf_U->i_ce0(loc_buf_i_ce0);
    loc_buf_U->i_we0(loc_buf_i_we0);
    loc_buf_U->i_d0(loc_buf_i_d0);
    loc_buf_U->i_q0(loc_buf_i_q0);
    loc_buf_U->i_address1(loc_buf_i_address1);
    loc_buf_U->i_ce1(loc_buf_i_ce1);
    loc_buf_U->i_q1(loc_buf_i_q1);
    loc_buf_U->t_address0(loc_buf_t_address0);
    loc_buf_U->t_ce0(loc_buf_t_ce0);
    loc_buf_U->t_we0(loc_buf_t_we0);
    loc_buf_U->t_d0(loc_buf_t_d0);
    loc_buf_U->t_q0(loc_buf_t_q0);
    loc_buf_U->t_address1(loc_buf_t_address1);
    loc_buf_U->t_ce1(loc_buf_t_ce1);
    loc_buf_U->t_q1(loc_buf_t_q1);
    loc_buf_U->i_ce(loc_buf_U_ap_dummy_ce);
    loc_buf_U->t_ce(loc_buf_U_ap_dummy_ce);
    loc_buf_U->i_full_n(loc_buf_i_full_n);
    loc_buf_U->i_write(loc_buf_i_write);
    loc_buf_U->t_empty_n(loc_buf_t_empty_n);
    loc_buf_U->t_read(loc_buf_t_read);
    parse_audio_buffer_signal_U0 = new parse_audio_buffer_signal("parse_audio_buffer_signal_U0");
    parse_audio_buffer_signal_U0->ap_clk(ap_clk);
    parse_audio_buffer_signal_U0->ap_rst(ap_rst);
    parse_audio_buffer_signal_U0->ap_start(parse_audio_buffer_signal_U0_ap_start);
    parse_audio_buffer_signal_U0->ap_done(parse_audio_buffer_signal_U0_ap_done);
    parse_audio_buffer_signal_U0->ap_continue(parse_audio_buffer_signal_U0_ap_continue);
    parse_audio_buffer_signal_U0->ap_idle(parse_audio_buffer_signal_U0_ap_idle);
    parse_audio_buffer_signal_U0->ap_ready(parse_audio_buffer_signal_U0_ap_ready);
    parse_audio_buffer_signal_U0->signals_V_dout(parse_audio_buffer_signal_U0_signals_V_dout);
    parse_audio_buffer_signal_U0->signals_V_empty_n(parse_audio_buffer_signal_U0_signals_V_empty_n);
    parse_audio_buffer_signal_U0->signals_V_read(parse_audio_buffer_signal_U0_signals_V_read);
    parse_audio_buffer_signal_U0->amp_buf_address0(parse_audio_buffer_signal_U0_amp_buf_address0);
    parse_audio_buffer_signal_U0->amp_buf_ce0(parse_audio_buffer_signal_U0_amp_buf_ce0);
    parse_audio_buffer_signal_U0->amp_buf_we0(parse_audio_buffer_signal_U0_amp_buf_we0);
    parse_audio_buffer_signal_U0->amp_buf_d0(parse_audio_buffer_signal_U0_amp_buf_d0);
    parse_audio_buffer_target_U0 = new parse_audio_buffer_target("parse_audio_buffer_target_U0");
    parse_audio_buffer_target_U0->ap_clk(ap_clk);
    parse_audio_buffer_target_U0->ap_rst(ap_rst);
    parse_audio_buffer_target_U0->ap_start(parse_audio_buffer_target_U0_ap_start);
    parse_audio_buffer_target_U0->ap_done(parse_audio_buffer_target_U0_ap_done);
    parse_audio_buffer_target_U0->ap_continue(parse_audio_buffer_target_U0_ap_continue);
    parse_audio_buffer_target_U0->ap_idle(parse_audio_buffer_target_U0_ap_idle);
    parse_audio_buffer_target_U0->ap_ready(parse_audio_buffer_target_U0_ap_ready);
    parse_audio_buffer_target_U0->hits_V_dout(parse_audio_buffer_target_U0_hits_V_dout);
    parse_audio_buffer_target_U0->hits_V_empty_n(parse_audio_buffer_target_U0_hits_V_empty_n);
    parse_audio_buffer_target_U0->hits_V_read(parse_audio_buffer_target_U0_hits_V_read);
    parse_audio_buffer_target_U0->locs_V_dout(parse_audio_buffer_target_U0_locs_V_dout);
    parse_audio_buffer_target_U0->locs_V_empty_n(parse_audio_buffer_target_U0_locs_V_empty_n);
    parse_audio_buffer_target_U0->locs_V_read(parse_audio_buffer_target_U0_locs_V_read);
    parse_audio_buffer_target_U0->loc_buf_address0(parse_audio_buffer_target_U0_loc_buf_address0);
    parse_audio_buffer_target_U0->loc_buf_ce0(parse_audio_buffer_target_U0_loc_buf_ce0);
    parse_audio_buffer_target_U0->loc_buf_we0(parse_audio_buffer_target_U0_loc_buf_we0);
    parse_audio_buffer_target_U0->loc_buf_d0(parse_audio_buffer_target_U0_loc_buf_d0);
    parse_audio_parse_signal_U0 = new parse_audio_parse_signal("parse_audio_parse_signal_U0");
    parse_audio_parse_signal_U0->ap_clk(ap_clk);
    parse_audio_parse_signal_U0->ap_rst(ap_rst);
    parse_audio_parse_signal_U0->ap_start(parse_audio_parse_signal_U0_ap_start);
    parse_audio_parse_signal_U0->ap_done(parse_audio_parse_signal_U0_ap_done);
    parse_audio_parse_signal_U0->ap_continue(parse_audio_parse_signal_U0_ap_continue);
    parse_audio_parse_signal_U0->ap_idle(parse_audio_parse_signal_U0_ap_idle);
    parse_audio_parse_signal_U0->ap_ready(parse_audio_parse_signal_U0_ap_ready);
    parse_audio_parse_signal_U0->signal_r_address0(parse_audio_parse_signal_U0_signal_r_address0);
    parse_audio_parse_signal_U0->signal_r_ce0(parse_audio_parse_signal_U0_signal_r_ce0);
    parse_audio_parse_signal_U0->signal_r_q0(parse_audio_parse_signal_U0_signal_r_q0);
    parse_audio_parse_signal_U0->locs_address0(parse_audio_parse_signal_U0_locs_address0);
    parse_audio_parse_signal_U0->locs_ce0(parse_audio_parse_signal_U0_locs_ce0);
    parse_audio_parse_signal_U0->locs_q0(parse_audio_parse_signal_U0_locs_q0);
    parse_audio_parse_signal_U0->locs_address1(parse_audio_parse_signal_U0_locs_address1);
    parse_audio_parse_signal_U0->locs_ce1(parse_audio_parse_signal_U0_locs_ce1);
    parse_audio_parse_signal_U0->locs_q1(parse_audio_parse_signal_U0_locs_q1);
    parse_audio_parse_signal_U0->pairs_amplitude_V_din(parse_audio_parse_signal_U0_pairs_amplitude_V_din);
    parse_audio_parse_signal_U0->pairs_amplitude_V_full_n(parse_audio_parse_signal_U0_pairs_amplitude_V_full_n);
    parse_audio_parse_signal_U0->pairs_amplitude_V_write(parse_audio_parse_signal_U0_pairs_amplitude_V_write);
    parse_audio_parse_signal_U0->pairs_duration_V_din(parse_audio_parse_signal_U0_pairs_duration_V_din);
    parse_audio_parse_signal_U0->pairs_duration_V_full_n(parse_audio_parse_signal_U0_pairs_duration_V_full_n);
    parse_audio_parse_signal_U0->pairs_duration_V_write(parse_audio_parse_signal_U0_pairs_duration_V_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_chn_write_parse_audio_buffer_signal_U0_sig_buf);
    sensitive << ( parse_audio_buffer_signal_U0_ap_done );

    SC_METHOD(thread_ap_chn_write_parse_audio_buffer_target_U0_loc_buf);
    sensitive << ( parse_audio_buffer_target_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( parse_audio_buffer_signal_U0_ap_idle );
    sensitive << ( parse_audio_buffer_target_U0_ap_idle );
    sensitive << ( parse_audio_parse_signal_U0_ap_idle );
    sensitive << ( sig_buf_t_empty_n );
    sensitive << ( loc_buf_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( parse_audio_parse_signal_U0_ap_done );

    SC_METHOD(thread_ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready);
    sensitive << ( parse_audio_buffer_signal_U0_ap_ready );
    sensitive << ( ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready );

    SC_METHOD(thread_ap_sig_ready_parse_audio_buffer_target_U0_ap_ready);
    sensitive << ( parse_audio_buffer_target_U0_ap_ready );
    sensitive << ( ap_reg_ready_parse_audio_buffer_target_U0_ap_ready );

    SC_METHOD(thread_ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready );

    SC_METHOD(thread_ap_sig_start_in_parse_audio_buffer_target_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_parse_audio_buffer_target_U0_ap_ready );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( ap_sig_ready_parse_audio_buffer_target_U0_ap_ready );
    sensitive << ( ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready );

    SC_METHOD(thread_hits_V_read);
    sensitive << ( parse_audio_buffer_target_U0_hits_V_read );

    SC_METHOD(thread_loc_buf_U_ap_dummy_ce);

    SC_METHOD(thread_loc_buf_i_address0);
    sensitive << ( parse_audio_buffer_target_U0_loc_buf_address0 );

    SC_METHOD(thread_loc_buf_i_address1);

    SC_METHOD(thread_loc_buf_i_ce0);
    sensitive << ( parse_audio_buffer_target_U0_loc_buf_ce0 );

    SC_METHOD(thread_loc_buf_i_ce1);

    SC_METHOD(thread_loc_buf_i_d0);
    sensitive << ( parse_audio_buffer_target_U0_loc_buf_d0 );

    SC_METHOD(thread_loc_buf_i_we0);
    sensitive << ( parse_audio_buffer_target_U0_loc_buf_we0 );

    SC_METHOD(thread_loc_buf_i_write);
    sensitive << ( parse_audio_buffer_target_U0_ap_done );

    SC_METHOD(thread_loc_buf_t_address0);
    sensitive << ( parse_audio_parse_signal_U0_locs_address0 );

    SC_METHOD(thread_loc_buf_t_address1);
    sensitive << ( parse_audio_parse_signal_U0_locs_address1 );

    SC_METHOD(thread_loc_buf_t_ce0);
    sensitive << ( parse_audio_parse_signal_U0_locs_ce0 );

    SC_METHOD(thread_loc_buf_t_ce1);
    sensitive << ( parse_audio_parse_signal_U0_locs_ce1 );

    SC_METHOD(thread_loc_buf_t_d0);

    SC_METHOD(thread_loc_buf_t_d1);

    SC_METHOD(thread_loc_buf_t_read);
    sensitive << ( parse_audio_parse_signal_U0_ap_ready );

    SC_METHOD(thread_loc_buf_t_we0);

    SC_METHOD(thread_loc_buf_t_we1);

    SC_METHOD(thread_locs_V_read);
    sensitive << ( parse_audio_buffer_target_U0_locs_V_read );

    SC_METHOD(thread_pairs_amplitude_V_din);
    sensitive << ( parse_audio_parse_signal_U0_pairs_amplitude_V_din );

    SC_METHOD(thread_pairs_amplitude_V_write);
    sensitive << ( parse_audio_parse_signal_U0_pairs_amplitude_V_write );

    SC_METHOD(thread_pairs_duration_V_din);
    sensitive << ( parse_audio_parse_signal_U0_pairs_duration_V_din );

    SC_METHOD(thread_pairs_duration_V_write);
    sensitive << ( parse_audio_parse_signal_U0_pairs_duration_V_write );

    SC_METHOD(thread_parse_audio_buffer_signal_U0_amp_buf_pipo_status);
    sensitive << ( sig_buf_i_full_n );

    SC_METHOD(thread_parse_audio_buffer_signal_U0_ap_continue);
    sensitive << ( parse_audio_buffer_signal_U0_amp_buf_pipo_status );

    SC_METHOD(thread_parse_audio_buffer_signal_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start );

    SC_METHOD(thread_parse_audio_buffer_signal_U0_signals_V_dout);
    sensitive << ( signals_V_dout );

    SC_METHOD(thread_parse_audio_buffer_signal_U0_signals_V_empty_n);
    sensitive << ( signals_V_empty_n );

    SC_METHOD(thread_parse_audio_buffer_target_U0_ap_continue);
    sensitive << ( parse_audio_buffer_target_U0_loc_buf_pipo_status );

    SC_METHOD(thread_parse_audio_buffer_target_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_sig_start_in_parse_audio_buffer_target_U0_ap_start );

    SC_METHOD(thread_parse_audio_buffer_target_U0_hits_V_dout);
    sensitive << ( hits_V_dout );

    SC_METHOD(thread_parse_audio_buffer_target_U0_hits_V_empty_n);
    sensitive << ( hits_V_empty_n );

    SC_METHOD(thread_parse_audio_buffer_target_U0_loc_buf_pipo_status);
    sensitive << ( loc_buf_i_full_n );

    SC_METHOD(thread_parse_audio_buffer_target_U0_locs_V_dout);
    sensitive << ( locs_V_dout );

    SC_METHOD(thread_parse_audio_buffer_target_U0_locs_V_empty_n);
    sensitive << ( locs_V_empty_n );

    SC_METHOD(thread_parse_audio_parse_signal_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_parse_audio_parse_signal_U0_ap_start);
    sensitive << ( sig_buf_t_empty_n );
    sensitive << ( loc_buf_t_empty_n );

    SC_METHOD(thread_parse_audio_parse_signal_U0_locs_q0);
    sensitive << ( loc_buf_t_q0 );

    SC_METHOD(thread_parse_audio_parse_signal_U0_locs_q1);
    sensitive << ( loc_buf_t_q1 );

    SC_METHOD(thread_parse_audio_parse_signal_U0_pairs_amplitude_V_full_n);
    sensitive << ( pairs_amplitude_V_full_n );

    SC_METHOD(thread_parse_audio_parse_signal_U0_pairs_duration_V_full_n);
    sensitive << ( pairs_duration_V_full_n );

    SC_METHOD(thread_parse_audio_parse_signal_U0_signal_r_q0);
    sensitive << ( sig_buf_t_q0 );

    SC_METHOD(thread_sig_buf_U_ap_dummy_ce);

    SC_METHOD(thread_sig_buf_i_address0);
    sensitive << ( parse_audio_buffer_signal_U0_amp_buf_address0 );

    SC_METHOD(thread_sig_buf_i_ce0);
    sensitive << ( parse_audio_buffer_signal_U0_amp_buf_ce0 );

    SC_METHOD(thread_sig_buf_i_d0);
    sensitive << ( parse_audio_buffer_signal_U0_amp_buf_d0 );

    SC_METHOD(thread_sig_buf_i_we0);
    sensitive << ( parse_audio_buffer_signal_U0_amp_buf_we0 );

    SC_METHOD(thread_sig_buf_i_write);
    sensitive << ( parse_audio_buffer_signal_U0_ap_done );

    SC_METHOD(thread_sig_buf_t_address0);
    sensitive << ( parse_audio_parse_signal_U0_signal_r_address0 );

    SC_METHOD(thread_sig_buf_t_ce0);
    sensitive << ( parse_audio_parse_signal_U0_signal_r_ce0 );

    SC_METHOD(thread_sig_buf_t_d0);

    SC_METHOD(thread_sig_buf_t_read);
    sensitive << ( parse_audio_parse_signal_U0_ap_ready );

    SC_METHOD(thread_sig_buf_t_we0);

    SC_METHOD(thread_signals_V_read);
    sensitive << ( parse_audio_buffer_signal_U0_signals_V_read );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_procdone_parse_audio_buffer_signal_U0 = SC_LOGIC_0;
    ap_reg_procdone_parse_audio_buffer_target_U0 = SC_LOGIC_0;
    ap_reg_procdone_parse_audio_parse_signal_U0 = SC_LOGIC_0;
    ap_reg_ready_parse_audio_buffer_target_U0_ap_ready = SC_LOGIC_0;
    ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "parse_audio_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, signals_V_dout, "(port)signals_V_dout");
    sc_trace(mVcdFile, signals_V_empty_n, "(port)signals_V_empty_n");
    sc_trace(mVcdFile, signals_V_read, "(port)signals_V_read");
    sc_trace(mVcdFile, hits_V_dout, "(port)hits_V_dout");
    sc_trace(mVcdFile, hits_V_empty_n, "(port)hits_V_empty_n");
    sc_trace(mVcdFile, hits_V_read, "(port)hits_V_read");
    sc_trace(mVcdFile, locs_V_dout, "(port)locs_V_dout");
    sc_trace(mVcdFile, locs_V_empty_n, "(port)locs_V_empty_n");
    sc_trace(mVcdFile, locs_V_read, "(port)locs_V_read");
    sc_trace(mVcdFile, pairs_amplitude_V_din, "(port)pairs_amplitude_V_din");
    sc_trace(mVcdFile, pairs_amplitude_V_full_n, "(port)pairs_amplitude_V_full_n");
    sc_trace(mVcdFile, pairs_amplitude_V_write, "(port)pairs_amplitude_V_write");
    sc_trace(mVcdFile, pairs_duration_V_din, "(port)pairs_duration_V_din");
    sc_trace(mVcdFile, pairs_duration_V_full_n, "(port)pairs_duration_V_full_n");
    sc_trace(mVcdFile, pairs_duration_V_write, "(port)pairs_duration_V_write");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sig_buf_i_address0, "sig_buf_i_address0");
    sc_trace(mVcdFile, sig_buf_i_ce0, "sig_buf_i_ce0");
    sc_trace(mVcdFile, sig_buf_i_we0, "sig_buf_i_we0");
    sc_trace(mVcdFile, sig_buf_i_d0, "sig_buf_i_d0");
    sc_trace(mVcdFile, sig_buf_i_q0, "sig_buf_i_q0");
    sc_trace(mVcdFile, sig_buf_t_address0, "sig_buf_t_address0");
    sc_trace(mVcdFile, sig_buf_t_ce0, "sig_buf_t_ce0");
    sc_trace(mVcdFile, sig_buf_t_we0, "sig_buf_t_we0");
    sc_trace(mVcdFile, sig_buf_t_d0, "sig_buf_t_d0");
    sc_trace(mVcdFile, sig_buf_t_q0, "sig_buf_t_q0");
    sc_trace(mVcdFile, sig_buf_U_ap_dummy_ce, "sig_buf_U_ap_dummy_ce");
    sc_trace(mVcdFile, loc_buf_i_address0, "loc_buf_i_address0");
    sc_trace(mVcdFile, loc_buf_i_ce0, "loc_buf_i_ce0");
    sc_trace(mVcdFile, loc_buf_i_we0, "loc_buf_i_we0");
    sc_trace(mVcdFile, loc_buf_i_d0, "loc_buf_i_d0");
    sc_trace(mVcdFile, loc_buf_i_q0, "loc_buf_i_q0");
    sc_trace(mVcdFile, loc_buf_i_address1, "loc_buf_i_address1");
    sc_trace(mVcdFile, loc_buf_i_ce1, "loc_buf_i_ce1");
    sc_trace(mVcdFile, loc_buf_i_q1, "loc_buf_i_q1");
    sc_trace(mVcdFile, loc_buf_t_address0, "loc_buf_t_address0");
    sc_trace(mVcdFile, loc_buf_t_ce0, "loc_buf_t_ce0");
    sc_trace(mVcdFile, loc_buf_t_we0, "loc_buf_t_we0");
    sc_trace(mVcdFile, loc_buf_t_d0, "loc_buf_t_d0");
    sc_trace(mVcdFile, loc_buf_t_q0, "loc_buf_t_q0");
    sc_trace(mVcdFile, loc_buf_t_address1, "loc_buf_t_address1");
    sc_trace(mVcdFile, loc_buf_t_ce1, "loc_buf_t_ce1");
    sc_trace(mVcdFile, loc_buf_t_q1, "loc_buf_t_q1");
    sc_trace(mVcdFile, loc_buf_U_ap_dummy_ce, "loc_buf_U_ap_dummy_ce");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_ap_start, "parse_audio_buffer_signal_U0_ap_start");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_ap_done, "parse_audio_buffer_signal_U0_ap_done");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_ap_continue, "parse_audio_buffer_signal_U0_ap_continue");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_ap_idle, "parse_audio_buffer_signal_U0_ap_idle");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_ap_ready, "parse_audio_buffer_signal_U0_ap_ready");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_signals_V_dout, "parse_audio_buffer_signal_U0_signals_V_dout");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_signals_V_empty_n, "parse_audio_buffer_signal_U0_signals_V_empty_n");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_signals_V_read, "parse_audio_buffer_signal_U0_signals_V_read");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_amp_buf_address0, "parse_audio_buffer_signal_U0_amp_buf_address0");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_amp_buf_ce0, "parse_audio_buffer_signal_U0_amp_buf_ce0");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_amp_buf_we0, "parse_audio_buffer_signal_U0_amp_buf_we0");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_amp_buf_d0, "parse_audio_buffer_signal_U0_amp_buf_d0");
    sc_trace(mVcdFile, ap_chn_write_parse_audio_buffer_signal_U0_sig_buf, "ap_chn_write_parse_audio_buffer_signal_U0_sig_buf");
    sc_trace(mVcdFile, parse_audio_buffer_signal_U0_amp_buf_pipo_status, "parse_audio_buffer_signal_U0_amp_buf_pipo_status");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_ap_start, "parse_audio_buffer_target_U0_ap_start");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_ap_done, "parse_audio_buffer_target_U0_ap_done");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_ap_continue, "parse_audio_buffer_target_U0_ap_continue");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_ap_idle, "parse_audio_buffer_target_U0_ap_idle");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_ap_ready, "parse_audio_buffer_target_U0_ap_ready");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_hits_V_dout, "parse_audio_buffer_target_U0_hits_V_dout");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_hits_V_empty_n, "parse_audio_buffer_target_U0_hits_V_empty_n");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_hits_V_read, "parse_audio_buffer_target_U0_hits_V_read");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_locs_V_dout, "parse_audio_buffer_target_U0_locs_V_dout");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_locs_V_empty_n, "parse_audio_buffer_target_U0_locs_V_empty_n");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_locs_V_read, "parse_audio_buffer_target_U0_locs_V_read");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_loc_buf_address0, "parse_audio_buffer_target_U0_loc_buf_address0");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_loc_buf_ce0, "parse_audio_buffer_target_U0_loc_buf_ce0");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_loc_buf_we0, "parse_audio_buffer_target_U0_loc_buf_we0");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_loc_buf_d0, "parse_audio_buffer_target_U0_loc_buf_d0");
    sc_trace(mVcdFile, ap_chn_write_parse_audio_buffer_target_U0_loc_buf, "ap_chn_write_parse_audio_buffer_target_U0_loc_buf");
    sc_trace(mVcdFile, parse_audio_buffer_target_U0_loc_buf_pipo_status, "parse_audio_buffer_target_U0_loc_buf_pipo_status");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_ap_start, "parse_audio_parse_signal_U0_ap_start");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_ap_done, "parse_audio_parse_signal_U0_ap_done");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_ap_continue, "parse_audio_parse_signal_U0_ap_continue");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_ap_idle, "parse_audio_parse_signal_U0_ap_idle");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_ap_ready, "parse_audio_parse_signal_U0_ap_ready");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_signal_r_address0, "parse_audio_parse_signal_U0_signal_r_address0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_signal_r_ce0, "parse_audio_parse_signal_U0_signal_r_ce0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_signal_r_q0, "parse_audio_parse_signal_U0_signal_r_q0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_address0, "parse_audio_parse_signal_U0_locs_address0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_ce0, "parse_audio_parse_signal_U0_locs_ce0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_q0, "parse_audio_parse_signal_U0_locs_q0");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_address1, "parse_audio_parse_signal_U0_locs_address1");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_ce1, "parse_audio_parse_signal_U0_locs_ce1");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_locs_q1, "parse_audio_parse_signal_U0_locs_q1");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_amplitude_V_din, "parse_audio_parse_signal_U0_pairs_amplitude_V_din");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_amplitude_V_full_n, "parse_audio_parse_signal_U0_pairs_amplitude_V_full_n");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_amplitude_V_write, "parse_audio_parse_signal_U0_pairs_amplitude_V_write");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_duration_V_din, "parse_audio_parse_signal_U0_pairs_duration_V_din");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_duration_V_full_n, "parse_audio_parse_signal_U0_pairs_duration_V_full_n");
    sc_trace(mVcdFile, parse_audio_parse_signal_U0_pairs_duration_V_write, "parse_audio_parse_signal_U0_pairs_duration_V_write");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, sig_buf_i_full_n, "sig_buf_i_full_n");
    sc_trace(mVcdFile, sig_buf_i_write, "sig_buf_i_write");
    sc_trace(mVcdFile, sig_buf_t_empty_n, "sig_buf_t_empty_n");
    sc_trace(mVcdFile, sig_buf_t_read, "sig_buf_t_read");
    sc_trace(mVcdFile, loc_buf_i_full_n, "loc_buf_i_full_n");
    sc_trace(mVcdFile, loc_buf_i_write, "loc_buf_i_write");
    sc_trace(mVcdFile, loc_buf_t_empty_n, "loc_buf_t_empty_n");
    sc_trace(mVcdFile, loc_buf_t_read, "loc_buf_t_read");
    sc_trace(mVcdFile, loc_buf_t_d1, "loc_buf_t_d1");
    sc_trace(mVcdFile, loc_buf_t_we1, "loc_buf_t_we1");
    sc_trace(mVcdFile, ap_reg_procdone_parse_audio_buffer_signal_U0, "ap_reg_procdone_parse_audio_buffer_signal_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_reg_procdone_parse_audio_buffer_target_U0, "ap_reg_procdone_parse_audio_buffer_target_U0");
    sc_trace(mVcdFile, ap_reg_procdone_parse_audio_parse_signal_U0, "ap_reg_procdone_parse_audio_parse_signal_U0");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
    sc_trace(mVcdFile, ap_reg_ready_parse_audio_buffer_target_U0_ap_ready, "ap_reg_ready_parse_audio_buffer_target_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_parse_audio_buffer_target_U0_ap_ready, "ap_sig_ready_parse_audio_buffer_target_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_parse_audio_buffer_target_U0_ap_start, "ap_sig_start_in_parse_audio_buffer_target_U0_ap_start");
    sc_trace(mVcdFile, ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready, "ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready, "ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start, "ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start");
#endif

    }
    mHdltvinHandle.open("parse_audio.hdltvin.dat");
    mHdltvoutHandle.open("parse_audio.hdltvout.dat");
}

parse_audio::~parse_audio() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sig_buf_U;
    delete loc_buf_U;
    delete parse_audio_buffer_signal_U0;
    delete parse_audio_buffer_target_U0;
    delete parse_audio_parse_signal_U0;
}

void parse_audio::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_parse_audio_buffer_signal_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_parse_audio_buffer_signal_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_signal_U0_ap_done.read())) {
            ap_reg_procdone_parse_audio_buffer_signal_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_parse_audio_buffer_target_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_parse_audio_buffer_target_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_target_U0_ap_done.read())) {
            ap_reg_procdone_parse_audio_buffer_target_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_procdone_parse_audio_parse_signal_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_parse_audio_parse_signal_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_parse_signal_U0_ap_done.read())) {
            ap_reg_procdone_parse_audio_parse_signal_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_signal_U0_ap_ready.read())) {
            ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ready_parse_audio_buffer_target_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_parse_audio_buffer_target_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_target_U0_ap_ready.read())) {
            ap_reg_ready_parse_audio_buffer_target_U0_ap_ready = ap_const_logic_1;
        }
    }
}

void parse_audio::thread_ap_chn_write_parse_audio_buffer_signal_U0_sig_buf() {
    ap_chn_write_parse_audio_buffer_signal_U0_sig_buf = parse_audio_buffer_signal_U0_ap_done.read();
}

void parse_audio::thread_ap_chn_write_parse_audio_buffer_target_U0_loc_buf() {
    ap_chn_write_parse_audio_buffer_target_U0_loc_buf = parse_audio_buffer_target_U0_ap_done.read();
}

void parse_audio::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void parse_audio::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_signal_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_buffer_target_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_parse_signal_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, sig_buf_t_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, loc_buf_t_empty_n.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void parse_audio::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void parse_audio::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void parse_audio::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, parse_audio_parse_signal_U0_ap_done.read())) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void parse_audio::thread_ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready.read())) {
        ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready = parse_audio_buffer_signal_U0_ap_ready.read();
    } else {
        ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready = ap_const_logic_1;
    }
}

void parse_audio::thread_ap_sig_ready_parse_audio_buffer_target_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_parse_audio_buffer_target_U0_ap_ready.read())) {
        ap_sig_ready_parse_audio_buffer_target_U0_ap_ready = parse_audio_buffer_target_U0_ap_ready.read();
    } else {
        ap_sig_ready_parse_audio_buffer_target_U0_ap_ready = ap_const_logic_1;
    }
}

void parse_audio::thread_ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_parse_audio_buffer_signal_U0_ap_ready.read()))) {
        ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start = ap_const_logic_0;
    }
}

void parse_audio::thread_ap_sig_start_in_parse_audio_buffer_target_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_parse_audio_buffer_target_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_sig_start_in_parse_audio_buffer_target_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_parse_audio_buffer_target_U0_ap_start = ap_const_logic_0;
    }
}

void parse_audio::thread_ap_sig_top_allready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_parse_audio_buffer_target_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_parse_audio_buffer_signal_U0_ap_ready.read()))) {
        ap_sig_top_allready = ap_const_logic_1;
    } else {
        ap_sig_top_allready = ap_const_logic_0;
    }
}

void parse_audio::thread_hits_V_read() {
    hits_V_read = parse_audio_buffer_target_U0_hits_V_read.read();
}

void parse_audio::thread_loc_buf_U_ap_dummy_ce() {
    loc_buf_U_ap_dummy_ce = ap_const_logic_1;
}

void parse_audio::thread_loc_buf_i_address0() {
    loc_buf_i_address0 = parse_audio_buffer_target_U0_loc_buf_address0.read();
}

void parse_audio::thread_loc_buf_i_address1() {
    loc_buf_i_address1 = ap_const_lv4_0;
}

void parse_audio::thread_loc_buf_i_ce0() {
    loc_buf_i_ce0 = parse_audio_buffer_target_U0_loc_buf_ce0.read();
}

void parse_audio::thread_loc_buf_i_ce1() {
    loc_buf_i_ce1 = ap_const_logic_0;
}

void parse_audio::thread_loc_buf_i_d0() {
    loc_buf_i_d0 = parse_audio_buffer_target_U0_loc_buf_d0.read();
}

void parse_audio::thread_loc_buf_i_we0() {
    loc_buf_i_we0 = parse_audio_buffer_target_U0_loc_buf_we0.read();
}

void parse_audio::thread_loc_buf_i_write() {
    loc_buf_i_write = parse_audio_buffer_target_U0_ap_done.read();
}

void parse_audio::thread_loc_buf_t_address0() {
    loc_buf_t_address0 = parse_audio_parse_signal_U0_locs_address0.read();
}

void parse_audio::thread_loc_buf_t_address1() {
    loc_buf_t_address1 = parse_audio_parse_signal_U0_locs_address1.read();
}

void parse_audio::thread_loc_buf_t_ce0() {
    loc_buf_t_ce0 = parse_audio_parse_signal_U0_locs_ce0.read();
}

void parse_audio::thread_loc_buf_t_ce1() {
    loc_buf_t_ce1 = parse_audio_parse_signal_U0_locs_ce1.read();
}

void parse_audio::thread_loc_buf_t_d0() {
    loc_buf_t_d0 = ap_const_lv32_0;
}

void parse_audio::thread_loc_buf_t_d1() {
    loc_buf_t_d1 = ap_const_lv32_0;
}

void parse_audio::thread_loc_buf_t_read() {
    loc_buf_t_read = parse_audio_parse_signal_U0_ap_ready.read();
}

void parse_audio::thread_loc_buf_t_we0() {
    loc_buf_t_we0 = ap_const_logic_0;
}

void parse_audio::thread_loc_buf_t_we1() {
    loc_buf_t_we1 = ap_const_logic_0;
}

void parse_audio::thread_locs_V_read() {
    locs_V_read = parse_audio_buffer_target_U0_locs_V_read.read();
}

void parse_audio::thread_pairs_amplitude_V_din() {
    pairs_amplitude_V_din = parse_audio_parse_signal_U0_pairs_amplitude_V_din.read();
}

void parse_audio::thread_pairs_amplitude_V_write() {
    pairs_amplitude_V_write = parse_audio_parse_signal_U0_pairs_amplitude_V_write.read();
}

void parse_audio::thread_pairs_duration_V_din() {
    pairs_duration_V_din = parse_audio_parse_signal_U0_pairs_duration_V_din.read();
}

void parse_audio::thread_pairs_duration_V_write() {
    pairs_duration_V_write = parse_audio_parse_signal_U0_pairs_duration_V_write.read();
}

void parse_audio::thread_parse_audio_buffer_signal_U0_amp_buf_pipo_status() {
    parse_audio_buffer_signal_U0_amp_buf_pipo_status = sig_buf_i_full_n.read();
}

void parse_audio::thread_parse_audio_buffer_signal_U0_ap_continue() {
    parse_audio_buffer_signal_U0_ap_continue = parse_audio_buffer_signal_U0_amp_buf_pipo_status.read();
}

void parse_audio::thread_parse_audio_buffer_signal_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        parse_audio_buffer_signal_U0_ap_start = ap_const_logic_0;
    } else {
        parse_audio_buffer_signal_U0_ap_start = ap_sig_start_in_parse_audio_buffer_signal_U0_ap_start.read();
    }
}

void parse_audio::thread_parse_audio_buffer_signal_U0_signals_V_dout() {
    parse_audio_buffer_signal_U0_signals_V_dout = signals_V_dout.read();
}

void parse_audio::thread_parse_audio_buffer_signal_U0_signals_V_empty_n() {
    parse_audio_buffer_signal_U0_signals_V_empty_n = signals_V_empty_n.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_ap_continue() {
    parse_audio_buffer_target_U0_ap_continue = parse_audio_buffer_target_U0_loc_buf_pipo_status.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        parse_audio_buffer_target_U0_ap_start = ap_const_logic_0;
    } else {
        parse_audio_buffer_target_U0_ap_start = ap_sig_start_in_parse_audio_buffer_target_U0_ap_start.read();
    }
}

void parse_audio::thread_parse_audio_buffer_target_U0_hits_V_dout() {
    parse_audio_buffer_target_U0_hits_V_dout = hits_V_dout.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_hits_V_empty_n() {
    parse_audio_buffer_target_U0_hits_V_empty_n = hits_V_empty_n.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_loc_buf_pipo_status() {
    parse_audio_buffer_target_U0_loc_buf_pipo_status = loc_buf_i_full_n.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_locs_V_dout() {
    parse_audio_buffer_target_U0_locs_V_dout = locs_V_dout.read();
}

void parse_audio::thread_parse_audio_buffer_target_U0_locs_V_empty_n() {
    parse_audio_buffer_target_U0_locs_V_empty_n = locs_V_empty_n.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_ap_continue() {
    parse_audio_parse_signal_U0_ap_continue = ap_sig_hs_continue.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_ap_start() {
    parse_audio_parse_signal_U0_ap_start = (sig_buf_t_empty_n.read() & loc_buf_t_empty_n.read());
}

void parse_audio::thread_parse_audio_parse_signal_U0_locs_q0() {
    parse_audio_parse_signal_U0_locs_q0 = loc_buf_t_q0.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_locs_q1() {
    parse_audio_parse_signal_U0_locs_q1 = loc_buf_t_q1.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_pairs_amplitude_V_full_n() {
    parse_audio_parse_signal_U0_pairs_amplitude_V_full_n = pairs_amplitude_V_full_n.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_pairs_duration_V_full_n() {
    parse_audio_parse_signal_U0_pairs_duration_V_full_n = pairs_duration_V_full_n.read();
}

void parse_audio::thread_parse_audio_parse_signal_U0_signal_r_q0() {
    parse_audio_parse_signal_U0_signal_r_q0 = sig_buf_t_q0.read();
}

void parse_audio::thread_sig_buf_U_ap_dummy_ce() {
    sig_buf_U_ap_dummy_ce = ap_const_logic_1;
}

void parse_audio::thread_sig_buf_i_address0() {
    sig_buf_i_address0 = parse_audio_buffer_signal_U0_amp_buf_address0.read();
}

void parse_audio::thread_sig_buf_i_ce0() {
    sig_buf_i_ce0 = parse_audio_buffer_signal_U0_amp_buf_ce0.read();
}

void parse_audio::thread_sig_buf_i_d0() {
    sig_buf_i_d0 = parse_audio_buffer_signal_U0_amp_buf_d0.read();
}

void parse_audio::thread_sig_buf_i_we0() {
    sig_buf_i_we0 = parse_audio_buffer_signal_U0_amp_buf_we0.read();
}

void parse_audio::thread_sig_buf_i_write() {
    sig_buf_i_write = parse_audio_buffer_signal_U0_ap_done.read();
}

void parse_audio::thread_sig_buf_t_address0() {
    sig_buf_t_address0 = parse_audio_parse_signal_U0_signal_r_address0.read();
}

void parse_audio::thread_sig_buf_t_ce0() {
    sig_buf_t_ce0 = parse_audio_parse_signal_U0_signal_r_ce0.read();
}

void parse_audio::thread_sig_buf_t_d0() {
    sig_buf_t_d0 = ap_const_lv32_0;
}

void parse_audio::thread_sig_buf_t_read() {
    sig_buf_t_read = parse_audio_parse_signal_U0_ap_ready.read();
}

void parse_audio::thread_sig_buf_t_we0() {
    sig_buf_t_we0 = ap_const_logic_0;
}

void parse_audio::thread_signals_V_read() {
    signals_V_read = parse_audio_buffer_signal_U0_signals_V_read.read();
}

void parse_audio::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"signals_V_dout\" :  \"" << signals_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"signals_V_empty_n\" :  \"" << signals_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"signals_V_read\" :  \"" << signals_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hits_V_dout\" :  \"" << hits_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hits_V_empty_n\" :  \"" << hits_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hits_V_read\" :  \"" << hits_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"locs_V_dout\" :  \"" << locs_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"locs_V_empty_n\" :  \"" << locs_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"locs_V_read\" :  \"" << locs_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pairs_amplitude_V_din\" :  \"" << pairs_amplitude_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pairs_amplitude_V_full_n\" :  \"" << pairs_amplitude_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pairs_amplitude_V_write\" :  \"" << pairs_amplitude_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pairs_duration_V_din\" :  \"" << pairs_duration_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pairs_duration_V_full_n\" :  \"" << pairs_duration_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pairs_duration_V_write\" :  \"" << pairs_duration_V_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

