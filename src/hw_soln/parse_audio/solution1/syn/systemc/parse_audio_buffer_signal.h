// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _parse_audio_buffer_signal_HH_
#define _parse_audio_buffer_signal_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct parse_audio_buffer_signal : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > signals_V_dout;
    sc_in< sc_logic > signals_V_empty_n;
    sc_out< sc_logic > signals_V_read;
    sc_out< sc_lv<14> > amp_buf_address0;
    sc_out< sc_logic > amp_buf_ce0;
    sc_out< sc_logic > amp_buf_we0;
    sc_out< sc_lv<32> > amp_buf_d0;


    // Module declarations
    parse_audio_buffer_signal(sc_module_name name);
    SC_HAS_PROCESS(parse_audio_buffer_signal);

    ~parse_audio_buffer_signal();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<14> > i_reg_63;
    sc_signal< sc_lv<1> > tmp_fu_75_p2;
    sc_signal< sc_lv<1> > tmp_reg_92;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_49;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_58;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<14> > i_2_fu_81_p2;
    sc_signal< sc_lv<14> > i_2_reg_96;
    sc_signal< bool > ap_sig_bdd_74;
    sc_signal< sc_lv<14> > i_phi_fu_67_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_87_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_2;
    sc_signal< bool > ap_sig_bdd_106;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st4_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<14> ap_const_lv14_2710;
    static const sc_lv<14> ap_const_lv14_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_amp_buf_address0();
    void thread_amp_buf_ce0();
    void thread_amp_buf_d0();
    void thread_amp_buf_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_49();
    void thread_ap_sig_bdd_58();
    void thread_ap_sig_bdd_74();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st4_fsm_2();
    void thread_i_2_fu_81_p2();
    void thread_i_phi_fu_67_p4();
    void thread_signals_V_read();
    void thread_tmp_fu_75_p2();
    void thread_tmp_s_fu_87_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
