// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _parse_audio_parse_signal_HH_
#define _parse_audio_parse_signal_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct parse_audio_parse_signal : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > signal_r_address0;
    sc_out< sc_logic > signal_r_ce0;
    sc_in< sc_lv<32> > signal_r_q0;
    sc_out< sc_lv<4> > locs_address0;
    sc_out< sc_logic > locs_ce0;
    sc_in< sc_lv<32> > locs_q0;
    sc_out< sc_lv<4> > locs_address1;
    sc_out< sc_logic > locs_ce1;
    sc_in< sc_lv<32> > locs_q1;
    sc_out< sc_lv<32> > pairs_amplitude_V_din;
    sc_in< sc_logic > pairs_amplitude_V_full_n;
    sc_out< sc_logic > pairs_amplitude_V_write;
    sc_out< sc_lv<32> > pairs_duration_V_din;
    sc_in< sc_logic > pairs_duration_V_full_n;
    sc_out< sc_logic > pairs_duration_V_write;


    // Module declarations
    parse_audio_parse_signal(sc_module_name name);
    SC_HAS_PROCESS(parse_audio_parse_signal);

    ~parse_audio_parse_signal();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_27;
    sc_signal< sc_lv<32> > b1_reg_136;
    sc_signal< sc_lv<4> > i_fu_151_p2;
    sc_signal< sc_lv<4> > i_reg_222;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_66;
    sc_signal< sc_lv<32> > j_cast1_fu_157_p1;
    sc_signal< sc_lv<1> > exitcond5_fu_145_p2;
    sc_signal< sc_lv<4> > locs_addr_reg_232;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_83;
    sc_signal< sc_lv<1> > exitcond_fu_166_p2;
    sc_signal< sc_lv<32> > b_reg_245;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_94;
    sc_signal< sc_lv<32> > e_reg_253;
    sc_signal< sc_lv<1> > tmp_3_fu_177_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_260;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_104;
    sc_signal< sc_lv<32> > duration_fu_191_p2;
    sc_signal< sc_lv<32> > duration_reg_265;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_113;
    sc_signal< sc_lv<1> > tmp_6_fu_197_p2;
    sc_signal< sc_lv<1> > tmp_6_reg_270;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_6;
    sc_signal< bool > ap_sig_bdd_122;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_130;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<32> > b_1_fu_207_p2;
    sc_signal< sc_lv<32> > j_1_fu_213_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_7;
    sc_signal< bool > ap_sig_bdd_153;
    sc_signal< sc_lv<4> > j_reg_115;
    sc_signal< bool > ap_sig_bdd_166;
    sc_signal< sc_lv<32> > j1_reg_126;
    sc_signal< sc_lv<64> > tmp_fu_161_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_172_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_202_p1;
    sc_signal< sc_lv<32> > tmp_4_fu_186_p2;
    sc_signal< sc_lv<32> > smax_fu_181_p3;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_st1_fsm_0;
    static const sc_lv<8> ap_ST_st2_fsm_1;
    static const sc_lv<8> ap_ST_st3_fsm_2;
    static const sc_lv<8> ap_ST_st4_fsm_3;
    static const sc_lv<8> ap_ST_st5_fsm_4;
    static const sc_lv<8> ap_ST_st6_fsm_5;
    static const sc_lv<8> ap_ST_pp0_stg0_fsm_6;
    static const sc_lv<8> ap_ST_st9_fsm_7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_C;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_104();
    void thread_ap_sig_bdd_113();
    void thread_ap_sig_bdd_122();
    void thread_ap_sig_bdd_130();
    void thread_ap_sig_bdd_153();
    void thread_ap_sig_bdd_166();
    void thread_ap_sig_bdd_27();
    void thread_ap_sig_bdd_66();
    void thread_ap_sig_bdd_83();
    void thread_ap_sig_bdd_94();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_6();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st9_fsm_7();
    void thread_b_1_fu_207_p2();
    void thread_duration_fu_191_p2();
    void thread_exitcond5_fu_145_p2();
    void thread_exitcond_fu_166_p2();
    void thread_i_fu_151_p2();
    void thread_j_1_fu_213_p2();
    void thread_j_cast1_fu_157_p1();
    void thread_locs_address0();
    void thread_locs_address1();
    void thread_locs_ce0();
    void thread_locs_ce1();
    void thread_pairs_amplitude_V_din();
    void thread_pairs_amplitude_V_write();
    void thread_pairs_duration_V_din();
    void thread_pairs_duration_V_write();
    void thread_signal_r_address0();
    void thread_signal_r_ce0();
    void thread_smax_fu_181_p3();
    void thread_tmp_2_fu_172_p1();
    void thread_tmp_3_fu_177_p2();
    void thread_tmp_4_fu_186_p2();
    void thread_tmp_6_fu_197_p2();
    void thread_tmp_7_fu_202_p1();
    void thread_tmp_fu_161_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
