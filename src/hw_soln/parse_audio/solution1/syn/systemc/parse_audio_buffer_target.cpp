// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "parse_audio_buffer_target.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic parse_audio_buffer_target::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic parse_audio_buffer_target::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> parse_audio_buffer_target::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> parse_audio_buffer_target::ap_ST_pp0_stg0_fsm_1 = "10";
const sc_lv<3> parse_audio_buffer_target::ap_ST_st4_fsm_2 = "100";
const sc_lv<32> parse_audio_buffer_target::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> parse_audio_buffer_target::ap_const_lv1_1 = "1";
const sc_lv<32> parse_audio_buffer_target::ap_const_lv32_1 = "1";
const sc_lv<1> parse_audio_buffer_target::ap_const_lv1_0 = "0";
const sc_lv<4> parse_audio_buffer_target::ap_const_lv4_0 = "0000";
const sc_lv<4> parse_audio_buffer_target::ap_const_lv4_C = "1100";
const sc_lv<4> parse_audio_buffer_target::ap_const_lv4_1 = "1";
const sc_lv<32> parse_audio_buffer_target::ap_const_lv32_2 = "10";

parse_audio_buffer_target::parse_audio_buffer_target(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_2 );

    SC_METHOD(thread_ap_sig_bdd_113);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_64);
    sensitive << ( hits_V_empty_n );
    sensitive << ( locs_V_empty_n );
    sensitive << ( exitcond_reg_110 );

    SC_METHOD(thread_ap_sig_bdd_77);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_1);
    sensitive << ( ap_sig_bdd_53 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_2);
    sensitive << ( ap_sig_bdd_113 );

    SC_METHOD(thread_exitcond_fu_93_p2);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( i_phi_fu_85_p4 );

    SC_METHOD(thread_hits_V_read);
    sensitive << ( exitcond_reg_110 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_i_1_fu_99_p2);
    sensitive << ( i_phi_fu_85_p4 );

    SC_METHOD(thread_i_phi_fu_85_p4);
    sensitive << ( i_reg_81 );
    sensitive << ( exitcond_reg_110 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( i_1_reg_114 );

    SC_METHOD(thread_loc_buf_address0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_s_fu_105_p1 );

    SC_METHOD(thread_loc_buf_ce0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_loc_buf_d0);
    sensitive << ( locs_V_dout );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_loc_buf_we0);
    sensitive << ( exitcond_reg_110 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_locs_V_read);
    sensitive << ( exitcond_reg_110 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_tmp_s_fu_105_p1);
    sensitive << ( i_reg_81 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_93_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_64 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_77 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "parse_audio_buffer_target_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hits_V_dout, "(port)hits_V_dout");
    sc_trace(mVcdFile, hits_V_empty_n, "(port)hits_V_empty_n");
    sc_trace(mVcdFile, hits_V_read, "(port)hits_V_read");
    sc_trace(mVcdFile, locs_V_dout, "(port)locs_V_dout");
    sc_trace(mVcdFile, locs_V_empty_n, "(port)locs_V_empty_n");
    sc_trace(mVcdFile, locs_V_read, "(port)locs_V_read");
    sc_trace(mVcdFile, loc_buf_address0, "(port)loc_buf_address0");
    sc_trace(mVcdFile, loc_buf_ce0, "(port)loc_buf_ce0");
    sc_trace(mVcdFile, loc_buf_we0, "(port)loc_buf_we0");
    sc_trace(mVcdFile, loc_buf_d0, "(port)loc_buf_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, i_reg_81, "i_reg_81");
    sc_trace(mVcdFile, exitcond_fu_93_p2, "exitcond_fu_93_p2");
    sc_trace(mVcdFile, exitcond_reg_110, "exitcond_reg_110");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_1, "ap_sig_cseq_ST_pp0_stg0_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_53, "ap_sig_bdd_53");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_sig_bdd_64, "ap_sig_bdd_64");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, i_1_fu_99_p2, "i_1_fu_99_p2");
    sc_trace(mVcdFile, i_1_reg_114, "i_1_reg_114");
    sc_trace(mVcdFile, ap_sig_bdd_77, "ap_sig_bdd_77");
    sc_trace(mVcdFile, i_phi_fu_85_p4, "i_phi_fu_85_p4");
    sc_trace(mVcdFile, tmp_s_fu_105_p1, "tmp_s_fu_105_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_2, "ap_sig_cseq_ST_st4_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_113, "ap_sig_bdd_113");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

parse_audio_buffer_target::~parse_audio_buffer_target() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void parse_audio_buffer_target::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_2.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             !esl_seteq<1,1,1>(exitcond_fu_93_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !ap_sig_bdd_77.read())) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             esl_seteq<1,1,1>(exitcond_fu_93_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !ap_sig_bdd_77.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
                     !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
                     !esl_seteq<1,1,1>(exitcond_fu_93_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        i_reg_81 = i_1_reg_114.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !ap_sig_bdd_77.read())) {
        i_reg_81 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        exitcond_reg_110 = exitcond_fu_93_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        i_1_reg_114 = i_1_fu_99_p2.read();
    }
}

void parse_audio_buffer_target::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_ap_sig_bdd_113() {
    ap_sig_bdd_113 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void parse_audio_buffer_target::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void parse_audio_buffer_target::thread_ap_sig_bdd_53() {
    ap_sig_bdd_53 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void parse_audio_buffer_target::thread_ap_sig_bdd_64() {
    ap_sig_bdd_64 = ((esl_seteq<1,1,1>(hits_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(locs_V_empty_n.read(), ap_const_logic_0)));
}

void parse_audio_buffer_target::thread_ap_sig_bdd_77() {
    ap_sig_bdd_77 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void parse_audio_buffer_target::thread_ap_sig_cseq_ST_pp0_stg0_fsm_1() {
    if (ap_sig_bdd_53.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_ap_sig_cseq_ST_st4_fsm_2() {
    if (ap_sig_bdd_113.read()) {
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_exitcond_fu_93_p2() {
    exitcond_fu_93_p2 = (!i_phi_fu_85_p4.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_85_p4.read() == ap_const_lv4_C);
}

void parse_audio_buffer_target::thread_hits_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        hits_V_read = ap_const_logic_1;
    } else {
        hits_V_read = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_i_1_fu_99_p2() {
    i_1_fu_99_p2 = (!i_phi_fu_85_p4.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_phi_fu_85_p4.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void parse_audio_buffer_target::thread_i_phi_fu_85_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
        i_phi_fu_85_p4 = i_1_reg_114.read();
    } else {
        i_phi_fu_85_p4 = i_reg_81.read();
    }
}

void parse_audio_buffer_target::thread_loc_buf_address0() {
    loc_buf_address0 =  (sc_lv<4>) (tmp_s_fu_105_p1.read());
}

void parse_audio_buffer_target::thread_loc_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        loc_buf_ce0 = ap_const_logic_1;
    } else {
        loc_buf_ce0 = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_loc_buf_d0() {
    loc_buf_d0 = locs_V_dout.read();
}

void parse_audio_buffer_target::thread_loc_buf_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
          !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))))) {
        loc_buf_we0 = ap_const_logic_1;
    } else {
        loc_buf_we0 = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_locs_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_110.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        locs_V_read = ap_const_logic_1;
    } else {
        locs_V_read = ap_const_logic_0;
    }
}

void parse_audio_buffer_target::thread_tmp_s_fu_105_p1() {
    tmp_s_fu_105_p1 = esl_zext<64,4>(i_reg_81.read());
}

void parse_audio_buffer_target::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_77.read()) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(exitcond_fu_93_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(ap_sig_bdd_64.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(exitcond_fu_93_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st4_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

