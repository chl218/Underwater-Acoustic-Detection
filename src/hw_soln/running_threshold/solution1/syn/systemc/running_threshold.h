// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _running_threshold_HH_
#define _running_threshold_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "running_threshold_fadd_32ns_32ns_32_9_full_dsp.h"
#include "running_threshold_fmul_32ns_32ns_32_5_max_dsp.h"
#include "running_threshold_fdiv_32ns_32ns_32_30.h"

namespace ap_rtl {

struct running_threshold : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > amplitude_V_dout;
    sc_in< sc_logic > amplitude_V_empty_n;
    sc_out< sc_logic > amplitude_V_read;
    sc_out< sc_lv<32> > threshold_V_din;
    sc_in< sc_logic > threshold_V_full_n;
    sc_out< sc_logic > threshold_V_write;


    // Module declarations
    running_threshold(sc_module_name name);
    SC_HAS_PROCESS(running_threshold);

    ~running_threshold();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    running_threshold_fadd_32ns_32ns_32_9_full_dsp<1,9,32,32,32>* running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0;
    running_threshold_fmul_32ns_32ns_32_5_max_dsp<1,5,32,32,32>* running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1;
    running_threshold_fdiv_32ns_32ns_32_30<1,30,32,32,32>* running_threshold_fdiv_32ns_32ns_32_30_U2;
    sc_signal< sc_lv<51> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_67;
    sc_signal< sc_lv<32> > mean_reg_79;
    sc_signal< sc_lv<17> > i_reg_91;
    sc_signal< sc_lv<32> > grp_fu_107_p2;
    sc_signal< sc_lv<32> > reg_119;
    sc_signal< sc_logic > ap_sig_cseq_ST_st17_fsm_14;
    sc_signal< bool > ap_sig_bdd_93;
    sc_signal< sc_logic > ap_sig_cseq_ST_st52_fsm_49;
    sc_signal< bool > ap_sig_bdd_100;
    sc_signal< sc_lv<1> > exitcond_fu_125_p2;
    sc_signal< sc_lv<1> > exitcond_reg_137;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_110;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_reg_137_pp0_it1;
    sc_signal< sc_lv<17> > i_1_fu_131_p2;
    sc_signal< sc_lv<17> > i_1_reg_141;
    sc_signal< sc_lv<32> > tmp_3_reg_146;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg1_fsm_2;
    sc_signal< bool > ap_sig_bdd_128;
    sc_signal< bool > ap_sig_bdd_134;
    sc_signal< sc_lv<32> > grp_fu_102_p2;
    sc_signal< sc_lv<32> > grp_fu_114_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_156;
    sc_signal< sc_logic > ap_sig_cseq_ST_st47_fsm_44;
    sc_signal< bool > ap_sig_bdd_152;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg8_fsm_9;
    sc_signal< bool > ap_sig_bdd_165;
    sc_signal< sc_lv<17> > i_phi_fu_95_p4;
    sc_signal< sc_logic > ap_sig_cseq_ST_st53_fsm_50;
    sc_signal< bool > ap_sig_bdd_186;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg2_fsm_3;
    sc_signal< bool > ap_sig_bdd_198;
    sc_signal< sc_lv<32> > grp_fu_107_p0;
    sc_signal< sc_lv<32> > grp_fu_107_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st13_fsm_10;
    sc_signal< bool > ap_sig_bdd_210;
    sc_signal< sc_logic > ap_sig_cseq_ST_st48_fsm_45;
    sc_signal< bool > ap_sig_bdd_217;
    sc_signal< sc_logic > grp_fu_102_ce;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg3_fsm_4;
    sc_signal< bool > ap_sig_bdd_243;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg4_fsm_5;
    sc_signal< bool > ap_sig_bdd_251;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg5_fsm_6;
    sc_signal< bool > ap_sig_bdd_259;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg6_fsm_7;
    sc_signal< bool > ap_sig_bdd_267;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg7_fsm_8;
    sc_signal< bool > ap_sig_bdd_275;
    sc_signal< sc_logic > grp_fu_107_ce;
    sc_signal< sc_logic > grp_fu_114_ce;
    sc_signal< sc_lv<51> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<51> ap_ST_st1_fsm_0;
    static const sc_lv<51> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<51> ap_ST_pp0_stg1_fsm_2;
    static const sc_lv<51> ap_ST_pp0_stg2_fsm_3;
    static const sc_lv<51> ap_ST_pp0_stg3_fsm_4;
    static const sc_lv<51> ap_ST_pp0_stg4_fsm_5;
    static const sc_lv<51> ap_ST_pp0_stg5_fsm_6;
    static const sc_lv<51> ap_ST_pp0_stg6_fsm_7;
    static const sc_lv<51> ap_ST_pp0_stg7_fsm_8;
    static const sc_lv<51> ap_ST_pp0_stg8_fsm_9;
    static const sc_lv<51> ap_ST_st13_fsm_10;
    static const sc_lv<51> ap_ST_st14_fsm_11;
    static const sc_lv<51> ap_ST_st15_fsm_12;
    static const sc_lv<51> ap_ST_st16_fsm_13;
    static const sc_lv<51> ap_ST_st17_fsm_14;
    static const sc_lv<51> ap_ST_st18_fsm_15;
    static const sc_lv<51> ap_ST_st19_fsm_16;
    static const sc_lv<51> ap_ST_st20_fsm_17;
    static const sc_lv<51> ap_ST_st21_fsm_18;
    static const sc_lv<51> ap_ST_st22_fsm_19;
    static const sc_lv<51> ap_ST_st23_fsm_20;
    static const sc_lv<51> ap_ST_st24_fsm_21;
    static const sc_lv<51> ap_ST_st25_fsm_22;
    static const sc_lv<51> ap_ST_st26_fsm_23;
    static const sc_lv<51> ap_ST_st27_fsm_24;
    static const sc_lv<51> ap_ST_st28_fsm_25;
    static const sc_lv<51> ap_ST_st29_fsm_26;
    static const sc_lv<51> ap_ST_st30_fsm_27;
    static const sc_lv<51> ap_ST_st31_fsm_28;
    static const sc_lv<51> ap_ST_st32_fsm_29;
    static const sc_lv<51> ap_ST_st33_fsm_30;
    static const sc_lv<51> ap_ST_st34_fsm_31;
    static const sc_lv<51> ap_ST_st35_fsm_32;
    static const sc_lv<51> ap_ST_st36_fsm_33;
    static const sc_lv<51> ap_ST_st37_fsm_34;
    static const sc_lv<51> ap_ST_st38_fsm_35;
    static const sc_lv<51> ap_ST_st39_fsm_36;
    static const sc_lv<51> ap_ST_st40_fsm_37;
    static const sc_lv<51> ap_ST_st41_fsm_38;
    static const sc_lv<51> ap_ST_st42_fsm_39;
    static const sc_lv<51> ap_ST_st43_fsm_40;
    static const sc_lv<51> ap_ST_st44_fsm_41;
    static const sc_lv<51> ap_ST_st45_fsm_42;
    static const sc_lv<51> ap_ST_st46_fsm_43;
    static const sc_lv<51> ap_ST_st47_fsm_44;
    static const sc_lv<51> ap_ST_st48_fsm_45;
    static const sc_lv<51> ap_ST_st49_fsm_46;
    static const sc_lv<51> ap_ST_st50_fsm_47;
    static const sc_lv<51> ap_ST_st51_fsm_48;
    static const sc_lv<51> ap_ST_st52_fsm_49;
    static const sc_lv<51> ap_ST_st53_fsm_50;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_40A00000;
    static const sc_lv<32> ap_const_lv32_42700000;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_44FA0000;
    static const sc_lv<17> ap_const_lv17_1D4C0;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_amplitude_V_read();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_100();
    void thread_ap_sig_bdd_110();
    void thread_ap_sig_bdd_128();
    void thread_ap_sig_bdd_134();
    void thread_ap_sig_bdd_152();
    void thread_ap_sig_bdd_165();
    void thread_ap_sig_bdd_186();
    void thread_ap_sig_bdd_198();
    void thread_ap_sig_bdd_210();
    void thread_ap_sig_bdd_217();
    void thread_ap_sig_bdd_243();
    void thread_ap_sig_bdd_251();
    void thread_ap_sig_bdd_259();
    void thread_ap_sig_bdd_267();
    void thread_ap_sig_bdd_275();
    void thread_ap_sig_bdd_67();
    void thread_ap_sig_bdd_93();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_pp0_stg1_fsm_2();
    void thread_ap_sig_cseq_ST_pp0_stg2_fsm_3();
    void thread_ap_sig_cseq_ST_pp0_stg3_fsm_4();
    void thread_ap_sig_cseq_ST_pp0_stg4_fsm_5();
    void thread_ap_sig_cseq_ST_pp0_stg5_fsm_6();
    void thread_ap_sig_cseq_ST_pp0_stg6_fsm_7();
    void thread_ap_sig_cseq_ST_pp0_stg7_fsm_8();
    void thread_ap_sig_cseq_ST_pp0_stg8_fsm_9();
    void thread_ap_sig_cseq_ST_st13_fsm_10();
    void thread_ap_sig_cseq_ST_st17_fsm_14();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st47_fsm_44();
    void thread_ap_sig_cseq_ST_st48_fsm_45();
    void thread_ap_sig_cseq_ST_st52_fsm_49();
    void thread_ap_sig_cseq_ST_st53_fsm_50();
    void thread_exitcond_fu_125_p2();
    void thread_grp_fu_102_ce();
    void thread_grp_fu_107_ce();
    void thread_grp_fu_107_p0();
    void thread_grp_fu_107_p1();
    void thread_grp_fu_114_ce();
    void thread_i_1_fu_131_p2();
    void thread_i_phi_fu_95_p4();
    void thread_threshold_V_din();
    void thread_threshold_V_write();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
