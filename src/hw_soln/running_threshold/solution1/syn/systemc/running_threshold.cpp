// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "running_threshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic running_threshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic running_threshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<51> running_threshold::ap_ST_st1_fsm_0 = "1";
const sc_lv<51> running_threshold::ap_ST_pp0_stg0_fsm_1 = "10";
const sc_lv<51> running_threshold::ap_ST_pp0_stg1_fsm_2 = "100";
const sc_lv<51> running_threshold::ap_ST_pp0_stg2_fsm_3 = "1000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg3_fsm_4 = "10000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg4_fsm_5 = "100000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg5_fsm_6 = "1000000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg6_fsm_7 = "10000000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg7_fsm_8 = "100000000";
const sc_lv<51> running_threshold::ap_ST_pp0_stg8_fsm_9 = "1000000000";
const sc_lv<51> running_threshold::ap_ST_st13_fsm_10 = "10000000000";
const sc_lv<51> running_threshold::ap_ST_st14_fsm_11 = "100000000000";
const sc_lv<51> running_threshold::ap_ST_st15_fsm_12 = "1000000000000";
const sc_lv<51> running_threshold::ap_ST_st16_fsm_13 = "10000000000000";
const sc_lv<51> running_threshold::ap_ST_st17_fsm_14 = "100000000000000";
const sc_lv<51> running_threshold::ap_ST_st18_fsm_15 = "1000000000000000";
const sc_lv<51> running_threshold::ap_ST_st19_fsm_16 = "10000000000000000";
const sc_lv<51> running_threshold::ap_ST_st20_fsm_17 = "100000000000000000";
const sc_lv<51> running_threshold::ap_ST_st21_fsm_18 = "1000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st22_fsm_19 = "10000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st23_fsm_20 = "100000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st24_fsm_21 = "1000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st25_fsm_22 = "10000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st26_fsm_23 = "100000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st27_fsm_24 = "1000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st28_fsm_25 = "10000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st29_fsm_26 = "100000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st30_fsm_27 = "1000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st31_fsm_28 = "10000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st32_fsm_29 = "100000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st33_fsm_30 = "1000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st34_fsm_31 = "10000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st35_fsm_32 = "100000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st36_fsm_33 = "1000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st37_fsm_34 = "10000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st38_fsm_35 = "100000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st39_fsm_36 = "1000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st40_fsm_37 = "10000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st41_fsm_38 = "100000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st42_fsm_39 = "1000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st43_fsm_40 = "10000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st44_fsm_41 = "100000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st45_fsm_42 = "1000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st46_fsm_43 = "10000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st47_fsm_44 = "100000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st48_fsm_45 = "1000000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st49_fsm_46 = "10000000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st50_fsm_47 = "100000000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st51_fsm_48 = "1000000000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st52_fsm_49 = "10000000000000000000000000000000000000000000000000";
const sc_lv<51> running_threshold::ap_ST_st53_fsm_50 = "100000000000000000000000000000000000000000000000000";
const sc_lv<32> running_threshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> running_threshold::ap_const_lv1_1 = "1";
const sc_lv<32> running_threshold::ap_const_lv32_E = "1110";
const sc_lv<32> running_threshold::ap_const_lv32_31 = "110001";
const sc_lv<32> running_threshold::ap_const_lv32_1 = "1";
const sc_lv<32> running_threshold::ap_const_lv32_2 = "10";
const sc_lv<1> running_threshold::ap_const_lv1_0 = "0";
const sc_lv<32> running_threshold::ap_const_lv32_2C = "101100";
const sc_lv<32> running_threshold::ap_const_lv32_9 = "1001";
const sc_lv<17> running_threshold::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> running_threshold::ap_const_lv32_32 = "110010";
const sc_lv<32> running_threshold::ap_const_lv32_3 = "11";
const sc_lv<32> running_threshold::ap_const_lv32_40A00000 = "1000000101000000000000000000000";
const sc_lv<32> running_threshold::ap_const_lv32_42700000 = "1000010011100000000000000000000";
const sc_lv<32> running_threshold::ap_const_lv32_A = "1010";
const sc_lv<32> running_threshold::ap_const_lv32_2D = "101101";
const sc_lv<32> running_threshold::ap_const_lv32_44FA0000 = "1000100111110100000000000000000";
const sc_lv<17> running_threshold::ap_const_lv17_1D4C0 = "11101010011000000";
const sc_lv<17> running_threshold::ap_const_lv17_1 = "1";
const sc_lv<32> running_threshold::ap_const_lv32_4 = "100";
const sc_lv<32> running_threshold::ap_const_lv32_5 = "101";
const sc_lv<32> running_threshold::ap_const_lv32_6 = "110";
const sc_lv<32> running_threshold::ap_const_lv32_7 = "111";
const sc_lv<32> running_threshold::ap_const_lv32_8 = "1000";

running_threshold::running_threshold(sc_module_name name) : sc_module(name), mVcdFile(0) {
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0 = new running_threshold_fadd_32ns_32ns_32_9_full_dsp<1,9,32,32,32>("running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0");
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->clk(ap_clk);
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->reset(ap_rst);
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->din0(mean_reg_79);
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->din1(tmp_3_reg_146);
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->ce(grp_fu_102_ce);
    running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0->dout(grp_fu_102_p2);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1 = new running_threshold_fmul_32ns_32ns_32_5_max_dsp<1,5,32,32,32>("running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1");
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->clk(ap_clk);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->reset(ap_rst);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->din0(grp_fu_107_p0);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->din1(grp_fu_107_p1);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->ce(grp_fu_107_ce);
    running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1->dout(grp_fu_107_p2);
    running_threshold_fdiv_32ns_32ns_32_30_U2 = new running_threshold_fdiv_32ns_32ns_32_30<1,30,32,32,32>("running_threshold_fdiv_32ns_32ns_32_30_U2");
    running_threshold_fdiv_32ns_32ns_32_30_U2->clk(ap_clk);
    running_threshold_fdiv_32ns_32ns_32_30_U2->reset(ap_rst);
    running_threshold_fdiv_32ns_32ns_32_30_U2->din0(reg_119);
    running_threshold_fdiv_32ns_32ns_32_30_U2->din1(ap_const_lv32_44FA0000);
    running_threshold_fdiv_32ns_32ns_32_30_U2->ce(grp_fu_114_ce);
    running_threshold_fdiv_32ns_32ns_32_30_U2->dout(grp_fu_114_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_amplitude_V_read);
    sensitive << ( exitcond_reg_137 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg1_fsm_2 );
    sensitive << ( ap_sig_bdd_134 );

    SC_METHOD(thread_ap_done);
    sensitive << ( threshold_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st53_fsm_50 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( threshold_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st53_fsm_50 );

    SC_METHOD(thread_ap_sig_bdd_100);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_110);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_128);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_134);
    sensitive << ( amplitude_V_empty_n );
    sensitive << ( exitcond_reg_137 );

    SC_METHOD(thread_ap_sig_bdd_152);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_165);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_186);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_198);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_210);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_217);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_243);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_251);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_259);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_267);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_275);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_93);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_1);
    sensitive << ( ap_sig_bdd_110 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg1_fsm_2);
    sensitive << ( ap_sig_bdd_128 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg2_fsm_3);
    sensitive << ( ap_sig_bdd_198 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg3_fsm_4);
    sensitive << ( ap_sig_bdd_243 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg4_fsm_5);
    sensitive << ( ap_sig_bdd_251 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg5_fsm_6);
    sensitive << ( ap_sig_bdd_259 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg6_fsm_7);
    sensitive << ( ap_sig_bdd_267 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg7_fsm_8);
    sensitive << ( ap_sig_bdd_275 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg8_fsm_9);
    sensitive << ( ap_sig_bdd_165 );

    SC_METHOD(thread_ap_sig_cseq_ST_st13_fsm_10);
    sensitive << ( ap_sig_bdd_210 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_14);
    sensitive << ( ap_sig_bdd_93 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_67 );

    SC_METHOD(thread_ap_sig_cseq_ST_st47_fsm_44);
    sensitive << ( ap_sig_bdd_152 );

    SC_METHOD(thread_ap_sig_cseq_ST_st48_fsm_45);
    sensitive << ( ap_sig_bdd_217 );

    SC_METHOD(thread_ap_sig_cseq_ST_st52_fsm_49);
    sensitive << ( ap_sig_bdd_100 );

    SC_METHOD(thread_ap_sig_cseq_ST_st53_fsm_50);
    sensitive << ( ap_sig_bdd_186 );

    SC_METHOD(thread_exitcond_fu_125_p2);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( i_phi_fu_95_p4 );

    SC_METHOD(thread_grp_fu_102_ce);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg1_fsm_2 );
    sensitive << ( ap_sig_bdd_134 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg8_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg2_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg3_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg4_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg5_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg6_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg7_fsm_8 );

    SC_METHOD(thread_grp_fu_107_ce);

    SC_METHOD(thread_grp_fu_107_p0);
    sensitive << ( mean_reg_79 );
    sensitive << ( tmp_1_reg_156 );
    sensitive << ( ap_sig_cseq_ST_st13_fsm_10 );
    sensitive << ( ap_sig_cseq_ST_st48_fsm_45 );

    SC_METHOD(thread_grp_fu_107_p1);
    sensitive << ( ap_sig_cseq_ST_st13_fsm_10 );
    sensitive << ( ap_sig_cseq_ST_st48_fsm_45 );

    SC_METHOD(thread_grp_fu_114_ce);

    SC_METHOD(thread_i_1_fu_131_p2);
    sensitive << ( i_phi_fu_95_p4 );

    SC_METHOD(thread_i_phi_fu_95_p4);
    sensitive << ( i_reg_91 );
    sensitive << ( exitcond_reg_137 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( i_1_reg_141 );

    SC_METHOD(thread_threshold_V_din);
    sensitive << ( threshold_V_full_n );
    sensitive << ( reg_119 );
    sensitive << ( ap_sig_cseq_ST_st53_fsm_50 );

    SC_METHOD(thread_threshold_V_write);
    sensitive << ( threshold_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st53_fsm_50 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( threshold_V_full_n );
    sensitive << ( exitcond_fu_125_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg1_fsm_2 );
    sensitive << ( ap_sig_bdd_134 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000000000000000000000000000000000000000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "running_threshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, amplitude_V_dout, "(port)amplitude_V_dout");
    sc_trace(mVcdFile, amplitude_V_empty_n, "(port)amplitude_V_empty_n");
    sc_trace(mVcdFile, amplitude_V_read, "(port)amplitude_V_read");
    sc_trace(mVcdFile, threshold_V_din, "(port)threshold_V_din");
    sc_trace(mVcdFile, threshold_V_full_n, "(port)threshold_V_full_n");
    sc_trace(mVcdFile, threshold_V_write, "(port)threshold_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_67, "ap_sig_bdd_67");
    sc_trace(mVcdFile, mean_reg_79, "mean_reg_79");
    sc_trace(mVcdFile, i_reg_91, "i_reg_91");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, reg_119, "reg_119");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_14, "ap_sig_cseq_ST_st17_fsm_14");
    sc_trace(mVcdFile, ap_sig_bdd_93, "ap_sig_bdd_93");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st52_fsm_49, "ap_sig_cseq_ST_st52_fsm_49");
    sc_trace(mVcdFile, ap_sig_bdd_100, "ap_sig_bdd_100");
    sc_trace(mVcdFile, exitcond_fu_125_p2, "exitcond_fu_125_p2");
    sc_trace(mVcdFile, exitcond_reg_137, "exitcond_reg_137");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_1, "ap_sig_cseq_ST_pp0_stg0_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_110, "ap_sig_bdd_110");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_137_pp0_it1, "ap_reg_ppstg_exitcond_reg_137_pp0_it1");
    sc_trace(mVcdFile, i_1_fu_131_p2, "i_1_fu_131_p2");
    sc_trace(mVcdFile, i_1_reg_141, "i_1_reg_141");
    sc_trace(mVcdFile, tmp_3_reg_146, "tmp_3_reg_146");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg1_fsm_2, "ap_sig_cseq_ST_pp0_stg1_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_128, "ap_sig_bdd_128");
    sc_trace(mVcdFile, ap_sig_bdd_134, "ap_sig_bdd_134");
    sc_trace(mVcdFile, grp_fu_102_p2, "grp_fu_102_p2");
    sc_trace(mVcdFile, grp_fu_114_p2, "grp_fu_114_p2");
    sc_trace(mVcdFile, tmp_1_reg_156, "tmp_1_reg_156");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st47_fsm_44, "ap_sig_cseq_ST_st47_fsm_44");
    sc_trace(mVcdFile, ap_sig_bdd_152, "ap_sig_bdd_152");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg8_fsm_9, "ap_sig_cseq_ST_pp0_stg8_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_165, "ap_sig_bdd_165");
    sc_trace(mVcdFile, i_phi_fu_95_p4, "i_phi_fu_95_p4");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st53_fsm_50, "ap_sig_cseq_ST_st53_fsm_50");
    sc_trace(mVcdFile, ap_sig_bdd_186, "ap_sig_bdd_186");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg2_fsm_3, "ap_sig_cseq_ST_pp0_stg2_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_198, "ap_sig_bdd_198");
    sc_trace(mVcdFile, grp_fu_107_p0, "grp_fu_107_p0");
    sc_trace(mVcdFile, grp_fu_107_p1, "grp_fu_107_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st13_fsm_10, "ap_sig_cseq_ST_st13_fsm_10");
    sc_trace(mVcdFile, ap_sig_bdd_210, "ap_sig_bdd_210");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st48_fsm_45, "ap_sig_cseq_ST_st48_fsm_45");
    sc_trace(mVcdFile, ap_sig_bdd_217, "ap_sig_bdd_217");
    sc_trace(mVcdFile, grp_fu_102_ce, "grp_fu_102_ce");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg3_fsm_4, "ap_sig_cseq_ST_pp0_stg3_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_243, "ap_sig_bdd_243");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg4_fsm_5, "ap_sig_cseq_ST_pp0_stg4_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_251, "ap_sig_bdd_251");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg5_fsm_6, "ap_sig_cseq_ST_pp0_stg5_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_259, "ap_sig_bdd_259");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg6_fsm_7, "ap_sig_cseq_ST_pp0_stg6_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_267, "ap_sig_bdd_267");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg7_fsm_8, "ap_sig_cseq_ST_pp0_stg7_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_275, "ap_sig_bdd_275");
    sc_trace(mVcdFile, grp_fu_107_ce, "grp_fu_107_ce");
    sc_trace(mVcdFile, grp_fu_114_ce, "grp_fu_114_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("running_threshold.hdltvin.dat");
    mHdltvoutHandle.open("running_threshold.hdltvout.dat");
}

running_threshold::~running_threshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete running_threshold_fadd_32ns_32ns_32_9_full_dsp_U0;
    delete running_threshold_fmul_32ns_32ns_32_5_max_dsp_U1;
    delete running_threshold_fdiv_32ns_32ns_32_30_U2;
}

void running_threshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !esl_seteq<1,1,1>(exitcond_fu_125_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg8_fsm_9.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg8_fsm_9.read()) && 
                     !esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0))) {
        i_reg_91 = i_1_reg_141.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_91 = ap_const_lv17_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()) && 
         esl_seteq<1,1,1>(ap_reg_ppstg_exitcond_reg_137_pp0_it1.read(), ap_const_lv1_0))) {
        mean_reg_79 = grp_fu_102_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        mean_reg_79 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read())) {
        ap_reg_ppstg_exitcond_reg_137_pp0_it1 = exitcond_reg_137.read();
        exitcond_reg_137 = exitcond_fu_125_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
        i_1_reg_141 = i_1_fu_131_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st52_fsm_49.read()))) {
        reg_119 = grp_fu_107_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st47_fsm_44.read())) {
        tmp_1_reg_156 = grp_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()))) {
        tmp_3_reg_146 = amplitude_V_dout.read();
    }
}

void running_threshold::thread_amplitude_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()))) {
        amplitude_V_read = ap_const_logic_1;
    } else {
        amplitude_V_read = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st53_fsm_50.read()) && 
         !esl_seteq<1,1,1>(threshold_V_full_n.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st53_fsm_50.read()) && 
         !esl_seteq<1,1,1>(threshold_V_full_n.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_bdd_100() {
    ap_sig_bdd_100 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(49, 49));
}

void running_threshold::thread_ap_sig_bdd_110() {
    ap_sig_bdd_110 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void running_threshold::thread_ap_sig_bdd_128() {
    ap_sig_bdd_128 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void running_threshold::thread_ap_sig_bdd_134() {
    ap_sig_bdd_134 = (esl_seteq<1,1,1>(amplitude_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0));
}

void running_threshold::thread_ap_sig_bdd_152() {
    ap_sig_bdd_152 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(44, 44));
}

void running_threshold::thread_ap_sig_bdd_165() {
    ap_sig_bdd_165 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void running_threshold::thread_ap_sig_bdd_186() {
    ap_sig_bdd_186 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(50, 50));
}

void running_threshold::thread_ap_sig_bdd_198() {
    ap_sig_bdd_198 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void running_threshold::thread_ap_sig_bdd_210() {
    ap_sig_bdd_210 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void running_threshold::thread_ap_sig_bdd_217() {
    ap_sig_bdd_217 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(45, 45));
}

void running_threshold::thread_ap_sig_bdd_243() {
    ap_sig_bdd_243 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void running_threshold::thread_ap_sig_bdd_251() {
    ap_sig_bdd_251 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void running_threshold::thread_ap_sig_bdd_259() {
    ap_sig_bdd_259 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void running_threshold::thread_ap_sig_bdd_267() {
    ap_sig_bdd_267 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void running_threshold::thread_ap_sig_bdd_275() {
    ap_sig_bdd_275 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void running_threshold::thread_ap_sig_bdd_67() {
    ap_sig_bdd_67 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void running_threshold::thread_ap_sig_bdd_93() {
    ap_sig_bdd_93 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(14, 14));
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg0_fsm_1() {
    if (ap_sig_bdd_110.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg1_fsm_2() {
    if (ap_sig_bdd_128.read()) {
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg2_fsm_3() {
    if (ap_sig_bdd_198.read()) {
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg3_fsm_4() {
    if (ap_sig_bdd_243.read()) {
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg4_fsm_5() {
    if (ap_sig_bdd_251.read()) {
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg5_fsm_6() {
    if (ap_sig_bdd_259.read()) {
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg6_fsm_7() {
    if (ap_sig_bdd_267.read()) {
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg7_fsm_8() {
    if (ap_sig_bdd_275.read()) {
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_pp0_stg8_fsm_9() {
    if (ap_sig_bdd_165.read()) {
        ap_sig_cseq_ST_pp0_stg8_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg8_fsm_9 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st13_fsm_10() {
    if (ap_sig_bdd_210.read()) {
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st17_fsm_14() {
    if (ap_sig_bdd_93.read()) {
        ap_sig_cseq_ST_st17_fsm_14 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_14 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_67.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st47_fsm_44() {
    if (ap_sig_bdd_152.read()) {
        ap_sig_cseq_ST_st47_fsm_44 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st47_fsm_44 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st48_fsm_45() {
    if (ap_sig_bdd_217.read()) {
        ap_sig_cseq_ST_st48_fsm_45 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st48_fsm_45 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st52_fsm_49() {
    if (ap_sig_bdd_100.read()) {
        ap_sig_cseq_ST_st52_fsm_49 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st52_fsm_49 = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_sig_cseq_ST_st53_fsm_50() {
    if (ap_sig_bdd_186.read()) {
        ap_sig_cseq_ST_st53_fsm_50 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st53_fsm_50 = ap_const_logic_0;
    }
}

void running_threshold::thread_exitcond_fu_125_p2() {
    exitcond_fu_125_p2 = (!i_phi_fu_95_p4.read().is_01() || !ap_const_lv17_1D4C0.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_95_p4.read() == ap_const_lv17_1D4C0);
}

void running_threshold::thread_grp_fu_102_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg8_fsm_9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg2_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg3_fsm_4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg4_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg5_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg6_fsm_7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg7_fsm_8.read()))) {
        grp_fu_102_ce = ap_const_logic_1;
    } else {
        grp_fu_102_ce = ap_const_logic_0;
    }
}

void running_threshold::thread_grp_fu_107_ce() {
    grp_fu_107_ce = ap_const_logic_1;
}

void running_threshold::thread_grp_fu_107_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st48_fsm_45.read())) {
        grp_fu_107_p0 = tmp_1_reg_156.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_10.read())) {
        grp_fu_107_p0 = mean_reg_79.read();
    } else {
        grp_fu_107_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void running_threshold::thread_grp_fu_107_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st48_fsm_45.read())) {
        grp_fu_107_p1 = ap_const_lv32_42700000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_10.read())) {
        grp_fu_107_p1 = ap_const_lv32_40A00000;
    } else {
        grp_fu_107_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void running_threshold::thread_grp_fu_114_ce() {
    grp_fu_114_ce = ap_const_logic_1;
}

void running_threshold::thread_i_1_fu_131_p2() {
    i_1_fu_131_p2 = (!i_phi_fu_95_p4.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(i_phi_fu_95_p4.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void running_threshold::thread_i_phi_fu_95_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_137.read(), ap_const_lv1_0))) {
        i_phi_fu_95_p4 = i_1_reg_141.read();
    } else {
        i_phi_fu_95_p4 = i_reg_91.read();
    }
}

void running_threshold::thread_threshold_V_din() {
    threshold_V_din = reg_119.read();
}

void running_threshold::thread_threshold_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st53_fsm_50.read()) && 
         !esl_seteq<1,1,1>(threshold_V_full_n.read(), ap_const_logic_0))) {
        threshold_V_write = ap_const_logic_1;
    } else {
        threshold_V_write = ap_const_logic_0;
    }
}

void running_threshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !esl_seteq<1,1,1>(exitcond_fu_125_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st13_fsm_10;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg1_fsm_2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && ap_sig_bdd_134.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
                ap_NS_fsm = ap_ST_st13_fsm_10;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_pp0_stg5_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_pp0_stg6_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_pp0_stg7_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_pp0_stg8_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st14_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st15_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st16_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st17_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st18_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st19_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st20_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st21_fsm_18;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_st22_fsm_19;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_st23_fsm_20;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_st24_fsm_21;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_st25_fsm_22;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_st26_fsm_23;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_st27_fsm_24;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_st28_fsm_25;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_st29_fsm_26;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_st30_fsm_27;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_st31_fsm_28;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_st32_fsm_29;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_st33_fsm_30;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_st34_fsm_31;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_st35_fsm_32;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_st36_fsm_33;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_st37_fsm_34;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_st38_fsm_35;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_st39_fsm_36;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_st40_fsm_37;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_st41_fsm_38;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_st42_fsm_39;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_st43_fsm_40;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_st44_fsm_41;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_st45_fsm_42;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_st46_fsm_43;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_st47_fsm_44;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_st48_fsm_45;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_st49_fsm_46;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_st50_fsm_47;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_st51_fsm_48;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_st52_fsm_49;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_st53_fsm_50;
            break;
        case 1125899906842624 : 
            if (!esl_seteq<1,1,1>(threshold_V_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st53_fsm_50;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<51>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void running_threshold::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"amplitude_V_dout\" :  \"" << amplitude_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"amplitude_V_empty_n\" :  \"" << amplitude_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"amplitude_V_read\" :  \"" << amplitude_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"threshold_V_din\" :  \"" << threshold_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold_V_full_n\" :  \"" << threshold_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"threshold_V_write\" :  \"" << threshold_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

