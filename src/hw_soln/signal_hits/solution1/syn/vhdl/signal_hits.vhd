-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity signal_hits is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    signals_V_empty_n : IN STD_LOGIC;
    signals_V_read : OUT STD_LOGIC;
    hits_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    hits_V_full_n : IN STD_LOGIC;
    hits_V_write : OUT STD_LOGIC;
    locs_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    locs_V_full_n : IN STD_LOGIC;
    locs_V_write : OUT STD_LOGIC );
end;


architecture behav of signal_hits is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "signal_hits,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.100000,HLS_SYN_LAT=120006,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=186,HLS_SYN_LUT=367}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st8_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv17_1D4C0 : STD_LOGIC_VECTOR (16 downto 0) := "11101010011000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_19 : BOOLEAN;
    signal tmp_5_reg_110 : STD_LOGIC_VECTOR (16 downto 0);
    signal threshold_to_int_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_to_int_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs3_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal tmp_10_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_80 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal i_fu_146_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_245_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_245_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_245_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_245_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_250_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_250_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_250_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_255_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_255_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_255_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_130_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_156_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs2_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currAmp_to_int_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_179_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_189_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_121_ce : STD_LOGIC;
    signal grp_fu_121_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component signal_hits_fcmp_32ns_32ns_1_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    signal_hits_fcmp_32ns_32ns_1_4_U0 : component signal_hits_fcmp_32ns_32ns_1_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => signals_V_dout,
        din1 => threshold,
        ce => grp_fu_121_ce,
        opcode => grp_fu_121_opcode,
        dout => grp_fu_121_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_140_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and (exitcond_fu_140_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_140_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_5_reg_110 assign process. --
    tmp_5_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and (exitcond_fu_140_p2 = ap_const_lv1_0))) then 
                tmp_5_reg_110 <= i_fu_146_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp_5_reg_110 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                ap_reg_ppstg_tmp_11_reg_255_pp0_it2 <= tmp_11_reg_255;
                ap_reg_ppstg_tmp_11_reg_255_pp0_it3 <= ap_reg_ppstg_tmp_11_reg_255_pp0_it2;
                ap_reg_ppstg_tmp_11_reg_255_pp0_it4 <= ap_reg_ppstg_tmp_11_reg_255_pp0_it3;
                    ap_reg_ppstg_tmp_12_reg_245_pp0_it2(16 downto 0) <= ap_reg_ppstg_tmp_12_reg_245_pp0_it1(16 downto 0);
                    ap_reg_ppstg_tmp_12_reg_245_pp0_it3(16 downto 0) <= ap_reg_ppstg_tmp_12_reg_245_pp0_it2(16 downto 0);
                    ap_reg_ppstg_tmp_12_reg_245_pp0_it4(16 downto 0) <= ap_reg_ppstg_tmp_12_reg_245_pp0_it3(16 downto 0);
                ap_reg_ppstg_tmp_2_reg_250_pp0_it2 <= ap_reg_ppstg_tmp_2_reg_250_pp0_it1;
                ap_reg_ppstg_tmp_2_reg_250_pp0_it3 <= ap_reg_ppstg_tmp_2_reg_250_pp0_it2;
                tmp_10_reg_267 <= tmp_10_fu_215_p2;
                tmp_9_reg_262 <= tmp_9_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then
                    ap_reg_ppstg_tmp_12_reg_245_pp0_it1(16 downto 0) <= tmp_12_reg_245(16 downto 0);
                ap_reg_ppstg_tmp_2_reg_250_pp0_it1 <= tmp_2_reg_250;
                tmp_11_reg_255 <= signals_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                notrhs3_reg_231 <= notrhs3_fu_134_p2;
                threshold_to_int_reg_226 <= threshold_to_int_fu_126_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and (exitcond_fu_140_p2 = ap_const_lv1_0))) then
                    tmp_12_reg_245(16 downto 0) <= tmp_12_fu_152_p1(16 downto 0);
                tmp_2_reg_250 <= tmp_2_fu_171_p2;
            end if;
        end if;
    end process;
    tmp_12_reg_245(31 downto 17) <= "000000000000000";
    ap_reg_ppstg_tmp_12_reg_245_pp0_it1(31 downto 17) <= "000000000000000";
    ap_reg_ppstg_tmp_12_reg_245_pp0_it2(31 downto 17) <= "000000000000000";
    ap_reg_ppstg_tmp_12_reg_245_pp0_it3(31 downto 17) <= "000000000000000";
    ap_reg_ppstg_tmp_12_reg_245_pp0_it4(31 downto 17) <= "000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, signals_V_empty_n, exitcond_fu_140_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, ap_sig_bdd_80, ap_reg_ppiten_pp0_it5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_140_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not((exitcond_fu_140_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st8_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st8_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_19 assign process. --
    ap_sig_bdd_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(hits_V_full_n, locs_V_full_n, tmp_10_reg_267)
    begin
                ap_sig_bdd_80 <= (((hits_V_full_n = ap_const_logic_0) and not((tmp_10_reg_267 = ap_const_lv1_0))) or (not((tmp_10_reg_267 = ap_const_lv1_0)) and (locs_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_19)
    begin
        if (ap_sig_bdd_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_2 assign process. --
    ap_sig_cseq_ST_st8_fsm_2_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st8_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    currAmp_to_int_fu_176_p1 <= ap_reg_ppstg_tmp_11_reg_255_pp0_it2;
    exitcond_fu_140_p2 <= "1" when (tmp_5_reg_110 = ap_const_lv17_1D4C0) else "0";

    -- grp_fu_121_ce assign process. --
    grp_fu_121_ce_assign_proc : process(signals_V_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_80, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            grp_fu_121_ce <= ap_const_logic_1;
        else 
            grp_fu_121_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_121_opcode <= ap_const_lv5_2;
    hits_V_din <= ap_reg_ppstg_tmp_11_reg_255_pp0_it4;

    -- hits_V_write assign process. --
    hits_V_write_assign_proc : process(signals_V_empty_n, ap_reg_ppiten_pp0_it1, tmp_10_reg_267, ap_sig_bdd_80, ap_reg_ppiten_pp0_it5)
    begin
        if ((not((tmp_10_reg_267 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            hits_V_write <= ap_const_logic_1;
        else 
            hits_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_146_p2 <= std_logic_vector(unsigned(tmp_5_reg_110) + unsigned(ap_const_lv17_1));
    locs_V_din <= ap_reg_ppstg_tmp_12_reg_245_pp0_it4;

    -- locs_V_write assign process. --
    locs_V_write_assign_proc : process(signals_V_empty_n, ap_reg_ppiten_pp0_it1, tmp_10_reg_267, ap_sig_bdd_80, ap_reg_ppiten_pp0_it5)
    begin
        if ((not((tmp_10_reg_267 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            locs_V_write <= ap_const_logic_1;
        else 
            locs_V_write <= ap_const_logic_0;
        end if; 
    end process;

    notlhs2_fu_165_p2 <= "0" when (tmp_7_fu_156_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_193_p2 <= "0" when (tmp_1_fu_179_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_134_p2 <= "1" when (tmp_fu_130_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_199_p2 <= "1" when (tmp_4_fu_189_p1 = ap_const_lv23_0) else "0";

    -- signals_V_read assign process. --
    signals_V_read_assign_proc : process(signals_V_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_80, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((signals_V_empty_n = ap_const_logic_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))))) then 
            signals_V_read <= ap_const_logic_1;
        else 
            signals_V_read <= ap_const_logic_0;
        end if; 
    end process;

    threshold_to_int_fu_126_p1 <= threshold;
    tmp_10_fu_215_p2 <= (tmp_6_fu_211_p2 and grp_fu_121_p2);
    tmp_12_fu_152_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_110),32));
    tmp_1_fu_179_p4 <= currAmp_to_int_fu_176_p1(30 downto 23);
    tmp_2_fu_171_p2 <= (notrhs3_reg_231 or notlhs2_fu_165_p2);
    tmp_4_fu_189_p1 <= currAmp_to_int_fu_176_p1(23 - 1 downto 0);
    tmp_6_fu_211_p2 <= (tmp_9_reg_262 and ap_reg_ppstg_tmp_2_reg_250_pp0_it3);
    tmp_7_fu_156_p4 <= threshold_to_int_reg_226(30 downto 23);
    tmp_9_fu_205_p2 <= (notrhs_fu_199_p2 or notlhs_fu_193_p2);
    tmp_fu_130_p1 <= threshold_to_int_fu_126_p1(23 - 1 downto 0);
end behav;
