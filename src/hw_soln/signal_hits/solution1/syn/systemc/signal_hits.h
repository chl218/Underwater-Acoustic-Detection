// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _signal_hits_HH_
#define _signal_hits_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "signal_hits_fcmp_32ns_32ns_1_4.h"

namespace ap_rtl {

struct signal_hits : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > threshold;
    sc_in< sc_lv<32> > signals_V_dout;
    sc_in< sc_logic > signals_V_empty_n;
    sc_out< sc_logic > signals_V_read;
    sc_out< sc_lv<32> > hits_V_din;
    sc_in< sc_logic > hits_V_full_n;
    sc_out< sc_logic > hits_V_write;
    sc_out< sc_lv<32> > locs_V_din;
    sc_in< sc_logic > locs_V_full_n;
    sc_out< sc_logic > locs_V_write;


    // Module declarations
    signal_hits(sc_module_name name);
    SC_HAS_PROCESS(signal_hits);

    ~signal_hits();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    signal_hits_fcmp_32ns_32ns_1_4<1,4,32,32,1>* signal_hits_fcmp_32ns_32ns_1_4_U0;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_19;
    sc_signal< sc_lv<17> > tmp_5_reg_110;
    sc_signal< sc_lv<32> > threshold_to_int_fu_126_p1;
    sc_signal< sc_lv<32> > threshold_to_int_reg_226;
    sc_signal< sc_lv<1> > notrhs3_fu_134_p2;
    sc_signal< sc_lv<1> > notrhs3_reg_231;
    sc_signal< sc_lv<1> > exitcond_fu_140_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_57;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it4;
    sc_signal< sc_lv<1> > tmp_10_reg_267;
    sc_signal< bool > ap_sig_bdd_80;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it5;
    sc_signal< sc_lv<17> > i_fu_146_p2;
    sc_signal< sc_lv<32> > tmp_12_fu_152_p1;
    sc_signal< sc_lv<32> > tmp_12_reg_245;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_12_reg_245_pp0_it1;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_12_reg_245_pp0_it2;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_12_reg_245_pp0_it3;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_12_reg_245_pp0_it4;
    sc_signal< sc_lv<1> > tmp_2_fu_171_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_250;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_2_reg_250_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_2_reg_250_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_tmp_2_reg_250_pp0_it3;
    sc_signal< sc_lv<32> > tmp_11_reg_255;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_11_reg_255_pp0_it2;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_11_reg_255_pp0_it3;
    sc_signal< sc_lv<32> > ap_reg_ppstg_tmp_11_reg_255_pp0_it4;
    sc_signal< sc_lv<1> > tmp_9_fu_205_p2;
    sc_signal< sc_lv<1> > tmp_9_reg_262;
    sc_signal< sc_lv<1> > tmp_10_fu_215_p2;
    sc_signal< sc_lv<23> > tmp_fu_130_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_156_p4;
    sc_signal< sc_lv<1> > notlhs2_fu_165_p2;
    sc_signal< sc_lv<32> > currAmp_to_int_fu_176_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_179_p4;
    sc_signal< sc_lv<23> > tmp_4_fu_189_p1;
    sc_signal< sc_lv<1> > notrhs_fu_199_p2;
    sc_signal< sc_lv<1> > notlhs_fu_193_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_211_p2;
    sc_signal< sc_lv<1> > grp_fu_121_p2;
    sc_signal< sc_logic > grp_fu_121_ce;
    sc_signal< sc_lv<5> > grp_fu_121_opcode;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_2;
    sc_signal< bool > ap_sig_bdd_210;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st8_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<17> ap_const_lv17_1D4C0;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_19();
    void thread_ap_sig_bdd_210();
    void thread_ap_sig_bdd_57();
    void thread_ap_sig_bdd_80();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st8_fsm_2();
    void thread_currAmp_to_int_fu_176_p1();
    void thread_exitcond_fu_140_p2();
    void thread_grp_fu_121_ce();
    void thread_grp_fu_121_opcode();
    void thread_hits_V_din();
    void thread_hits_V_write();
    void thread_i_fu_146_p2();
    void thread_locs_V_din();
    void thread_locs_V_write();
    void thread_notlhs2_fu_165_p2();
    void thread_notlhs_fu_193_p2();
    void thread_notrhs3_fu_134_p2();
    void thread_notrhs_fu_199_p2();
    void thread_signals_V_read();
    void thread_threshold_to_int_fu_126_p1();
    void thread_tmp_10_fu_215_p2();
    void thread_tmp_12_fu_152_p1();
    void thread_tmp_1_fu_179_p4();
    void thread_tmp_2_fu_171_p2();
    void thread_tmp_4_fu_189_p1();
    void thread_tmp_6_fu_211_p2();
    void thread_tmp_7_fu_156_p4();
    void thread_tmp_9_fu_205_p2();
    void thread_tmp_fu_130_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
