// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findpeaks (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        samples_V_dout,
        samples_V_empty_n,
        samples_V_read,
        amplitude_V,
        amplitude_V_ap_vld,
        locations_V,
        locations_V_ap_vld
);


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] samples_V_dout;
input   samples_V_empty_n;
output   samples_V_read;
output  [31:0] amplitude_V;
output   amplitude_V_ap_vld;
output  [31:0] locations_V;
output   locations_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg samples_V_read;
reg amplitude_V_ap_vld;
reg locations_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    samples_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_396;
reg   [19:0] tmp_3_reg_109;
reg   [31:0] shift_buf_1_2_reg_120;
reg    ap_block_state4;
reg   [31:0] shift_buf_1_13_reg_130;
reg   [31:0] ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130;
reg   [31:0] ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130;
reg   [31:0] ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130;
wire   [1:0] indvarinc_fu_160_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] shift_buf_0_1_fu_186_p3;
wire   [31:0] shift_buf_1_1_fu_194_p3;
wire   [0:0] tmp_fu_202_p2;
wire   [0:0] exitcond_fu_218_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_396;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_reg_396;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_reg_396;
wire   [19:0] i_fu_224_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_5_fu_230_p1;
reg   [31:0] tmp_5_reg_405;
reg   [31:0] ap_pipeline_reg_pp0_iter1_tmp_5_reg_405;
reg   [31:0] ap_pipeline_reg_pp0_iter2_tmp_5_reg_405;
reg   [31:0] ap_pipeline_reg_pp0_iter3_tmp_5_reg_405;
reg   [31:0] ap_pipeline_reg_pp0_iter4_tmp_5_reg_405;
reg   [31:0] tmp_22_reg_410;
reg   [31:0] ap_pipeline_reg_pp0_iter2_tmp_22_reg_410;
reg   [31:0] ap_pipeline_reg_pp0_iter3_tmp_22_reg_410;
wire   [0:0] notlhs_fu_252_p2;
reg   [0:0] notlhs_reg_417;
reg   [0:0] ap_pipeline_reg_pp0_iter2_notlhs_reg_417;
reg   [0:0] ap_pipeline_reg_pp0_iter3_notlhs_reg_417;
reg   [0:0] ap_pipeline_reg_pp0_iter4_notlhs_reg_417;
wire   [0:0] notrhs_fu_258_p2;
reg   [0:0] notrhs_reg_422;
reg   [0:0] ap_pipeline_reg_pp0_iter2_notrhs_reg_422;
reg   [0:0] ap_pipeline_reg_pp0_iter3_notrhs_reg_422;
reg   [0:0] ap_pipeline_reg_pp0_iter4_notrhs_reg_422;
wire   [0:0] tmp_11_fu_294_p2;
reg   [0:0] tmp_11_reg_427;
reg   [0:0] ap_pipeline_reg_pp0_iter4_tmp_11_reg_427;
wire   [0:0] grp_fu_142_p2;
reg   [0:0] tmp_13_reg_433;
wire   [0:0] tmp_20_fu_340_p2;
reg   [0:0] tmp_20_reg_438;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [1:0] invdar_reg_98;
reg    ap_block_state1;
reg   [31:0] shift_buf_1_2_phi_fu_123_p4;
reg   [31:0] shift_buf_1_13_phi_fu_135_p4;
reg   [31:0] shift_buf_fu_70;
reg   [31:0] shift_buf_1_fu_74;
wire   [0:0] or_cond_fu_360_p2;
wire   [0:0] tmp_s_fu_166_p2;
wire   [0:0] tmp_2_fu_180_p2;
wire   [31:0] tmp_1_fu_172_p3;
wire   [31:0] shift_buf_1_2_to_int_fu_234_p1;
wire   [7:0] tmp_8_fu_238_p4;
wire   [22:0] tmp_7_fu_248_p1;
wire   [31:0] shift_buf_1_to_int_fu_264_p1;
wire   [7:0] tmp_6_fu_268_p4;
wire   [22:0] tmp_9_fu_278_p1;
wire   [0:0] notrhs3_fu_288_p2;
wire   [0:0] notlhs2_fu_282_p2;
wire   [31:0] shift_buf_0_to_int_fu_300_p1;
wire   [7:0] tmp_15_fu_303_p4;
wire   [22:0] tmp_16_fu_313_p1;
wire   [0:0] notrhs7_fu_323_p2;
wire   [0:0] notlhs6_fu_317_p2;
wire   [0:0] tmp_17_fu_329_p2;
wire   [0:0] tmp_18_fu_335_p2;
wire   [0:0] grp_fu_148_p2;
wire   [0:0] tmp_10_fu_346_p2;
wire   [0:0] tmp_12_fu_350_p2;
wire   [0:0] tmp_14_fu_355_p2;
reg    grp_fu_142_ce;
reg    grp_fu_148_ce;
wire   [0:0] ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

detect_calls_fcmpbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
detect_calls_fcmpbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_buf_1_2_phi_fu_123_p4),
    .din1(shift_buf_1_13_phi_fu_135_p4),
    .ce(grp_fu_142_ce),
    .opcode(5'd4),
    .dout(grp_fu_142_p2)
);

detect_calls_fcmpbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
detect_calls_fcmpbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_buf_1_13_phi_fu_135_p4),
    .din1(samples_V_dout),
    .ce(grp_fu_148_ce),
    .opcode(5'd2),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 4'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'd1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & ~(1'd0 == exitcond_fu_218_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4))) begin
            if (~(1'b1 == ap_enable_reg_pp0_iter0)) begin
                ap_enable_reg_pp0_iter2 <= 1'b0;
            end else if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_202_p2))) begin
        invdar_reg_98 <= indvarinc_fu_160_p2;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        invdar_reg_98 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
        shift_buf_1_13_reg_130 <= shift_buf_0_1_fu_186_p3;
    end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_396))) begin
        shift_buf_1_13_reg_130 <= tmp_22_reg_410;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
        shift_buf_1_2_reg_120 <= shift_buf_1_1_fu_194_p3;
    end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_396))) begin
        shift_buf_1_2_reg_120 <= shift_buf_1_13_reg_130;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_fu_202_p2))) begin
        tmp_3_reg_109 <= 20'd0;
    end else if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_218_p2))) begin
        tmp_3_reg_109 <= i_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_396 <= exitcond_reg_396;
        ap_pipeline_reg_pp0_iter1_tmp_5_reg_405[19 : 0] <= tmp_5_reg_405[19 : 0];
        exitcond_reg_396 <= exitcond_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4))) begin
        ap_pipeline_reg_pp0_iter2_exitcond_reg_396 <= ap_pipeline_reg_pp0_iter1_exitcond_reg_396;
        ap_pipeline_reg_pp0_iter2_notlhs_reg_417 <= notlhs_reg_417;
        ap_pipeline_reg_pp0_iter2_notrhs_reg_422 <= notrhs_reg_422;
        ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130 <= shift_buf_1_13_reg_130;
        ap_pipeline_reg_pp0_iter2_tmp_22_reg_410 <= tmp_22_reg_410;
        ap_pipeline_reg_pp0_iter2_tmp_5_reg_405[19 : 0] <= ap_pipeline_reg_pp0_iter1_tmp_5_reg_405[19 : 0];
        ap_pipeline_reg_pp0_iter3_exitcond_reg_396 <= ap_pipeline_reg_pp0_iter2_exitcond_reg_396;
        ap_pipeline_reg_pp0_iter3_notlhs_reg_417 <= ap_pipeline_reg_pp0_iter2_notlhs_reg_417;
        ap_pipeline_reg_pp0_iter3_notrhs_reg_422 <= ap_pipeline_reg_pp0_iter2_notrhs_reg_422;
        ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130 <= ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130;
        ap_pipeline_reg_pp0_iter3_tmp_22_reg_410 <= ap_pipeline_reg_pp0_iter2_tmp_22_reg_410;
        ap_pipeline_reg_pp0_iter3_tmp_5_reg_405[19 : 0] <= ap_pipeline_reg_pp0_iter2_tmp_5_reg_405[19 : 0];
        ap_pipeline_reg_pp0_iter4_notlhs_reg_417 <= ap_pipeline_reg_pp0_iter3_notlhs_reg_417;
        ap_pipeline_reg_pp0_iter4_notrhs_reg_422 <= ap_pipeline_reg_pp0_iter3_notrhs_reg_422;
        ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130 <= ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130;
        ap_pipeline_reg_pp0_iter4_tmp_11_reg_427 <= tmp_11_reg_427;
        ap_pipeline_reg_pp0_iter4_tmp_5_reg_405[19 : 0] <= ap_pipeline_reg_pp0_iter3_tmp_5_reg_405[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_396 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        notlhs_reg_417 <= notlhs_fu_252_p2;
        notrhs_reg_422 <= notrhs_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state2)) begin
        shift_buf_1_fu_74 <= shift_buf_1_1_fu_194_p3;
        shift_buf_fu_70 <= shift_buf_0_1_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'd0 == ap_pipeline_reg_pp0_iter2_exitcond_reg_396))) begin
        tmp_11_reg_427 <= tmp_11_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'd0 == ap_pipeline_reg_pp0_iter3_exitcond_reg_396))) begin
        tmp_13_reg_433 <= grp_fu_142_p2;
        tmp_20_reg_438 <= tmp_20_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_396 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        tmp_22_reg_410 <= samples_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'd0 == exitcond_fu_218_p2))) begin
        tmp_5_reg_405[19 : 0] <= tmp_5_fu_230_p1[19 : 0];
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter5) & ~(1'd0 == or_cond_fu_360_p2))) begin
        amplitude_V_ap_vld = 1'b1;
    end else begin
        amplitude_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'd1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        grp_fu_142_ce = 1'b1;
    end else begin
        grp_fu_142_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        grp_fu_148_ce = 1'b1;
    end else begin
        grp_fu_148_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter5) & ~(1'd0 == or_cond_fu_360_p2))) begin
        locations_V_ap_vld = 1'b1;
    end else begin
        locations_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_396 == 1'd0))) begin
        samples_V_blk_n = samples_V_empty_n;
    end else begin
        samples_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_396 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        samples_V_read = 1'b1;
    end else begin
        samples_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_396))) begin
        shift_buf_1_13_phi_fu_135_p4 = tmp_22_reg_410;
    end else begin
        shift_buf_1_13_phi_fu_135_p4 = shift_buf_1_13_reg_130;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_396))) begin
        shift_buf_1_2_phi_fu_123_p4 = shift_buf_1_13_reg_130;
    end else begin
        shift_buf_1_2_phi_fu_123_p4 = shift_buf_1_2_reg_120;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        4'd1 : begin
            if (~(1'b1 == ap_block_state1)) begin
                ap_NS_fsm = 4'd2;
            end else begin
                ap_NS_fsm = 4'd1;
            end
        end
        4'd2 : begin
            if (~(1'd0 == tmp_fu_202_p2)) begin
                ap_NS_fsm = 4'd4;
            end else begin
                ap_NS_fsm = 4'd2;
            end
        end
        4'd4 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter5) & ~(1'b1 == ap_enable_reg_pp0_iter4)) & ~((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & ~(1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b1 == ap_enable_reg_pp0_iter2)))) begin
                ap_NS_fsm = 4'd4;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter5) & ~(1'b1 == ap_enable_reg_pp0_iter4)) | ((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & ~(1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b1 == ap_enable_reg_pp0_iter2)))) begin
                ap_NS_fsm = 4'd8;
            end else begin
                ap_NS_fsm = 4'd4;
            end
        end
        4'd8 : begin
            ap_NS_fsm = 4'd1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign amplitude_V = ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((exitcond_reg_396 == 1'd0) & (1'b0 == samples_V_empty_n));
end

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1) | (ap_enable_reg_pp0_iter2 == 1'b1) | (ap_enable_reg_pp0_iter3 == 1'b1) | (ap_enable_reg_pp0_iter4 == 1'b1) | (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign exitcond_fu_218_p2 = ((tmp_3_reg_109 == 20'd600000) ? 1'b1 : 1'b0);

assign i_fu_224_p2 = (tmp_3_reg_109 + 20'd1);

assign indvarinc_fu_160_p2 = (invdar_reg_98 + 2'd1);

assign locations_V = ap_pipeline_reg_pp0_iter4_tmp_5_reg_405;

assign notlhs2_fu_282_p2 = ((tmp_6_fu_268_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs6_fu_317_p2 = ((tmp_15_fu_303_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_252_p2 = ((tmp_8_fu_238_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs3_fu_288_p2 = ((tmp_9_fu_278_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs7_fu_323_p2 = ((tmp_16_fu_313_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_258_p2 = ((tmp_7_fu_248_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond_fu_360_p2 = (tmp_14_fu_355_p2 & tmp_20_reg_438);

assign shift_buf_0_1_fu_186_p3 = ((tmp_2_fu_180_p2[0:0] === 1'b1) ? shift_buf_fu_70 : tmp_1_fu_172_p3);

assign shift_buf_0_to_int_fu_300_p1 = ap_pipeline_reg_pp0_iter3_tmp_22_reg_410;

assign shift_buf_1_1_fu_194_p3 = ((tmp_2_fu_180_p2[0:0] === 1'b1) ? 32'd0 : shift_buf_1_fu_74);

assign shift_buf_1_2_to_int_fu_234_p1 = shift_buf_1_2_phi_fu_123_p4;

assign shift_buf_1_to_int_fu_264_p1 = ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130;

assign tmp_10_fu_346_p2 = (ap_pipeline_reg_pp0_iter4_notrhs_reg_422 | ap_pipeline_reg_pp0_iter4_notlhs_reg_417);

assign tmp_11_fu_294_p2 = (notrhs3_fu_288_p2 | notlhs2_fu_282_p2);

assign tmp_12_fu_350_p2 = (tmp_10_fu_346_p2 & ap_pipeline_reg_pp0_iter4_tmp_11_reg_427);

assign tmp_14_fu_355_p2 = (tmp_12_fu_350_p2 & tmp_13_reg_433);

assign tmp_15_fu_303_p4 = {{shift_buf_0_to_int_fu_300_p1[30:23]}};

assign tmp_16_fu_313_p1 = shift_buf_0_to_int_fu_300_p1[22:0];

assign tmp_17_fu_329_p2 = (notrhs7_fu_323_p2 | notlhs6_fu_317_p2);

assign tmp_18_fu_335_p2 = (tmp_11_reg_427 & tmp_17_fu_329_p2);

assign tmp_1_fu_172_p3 = ((tmp_s_fu_166_p2[0:0] === 1'b1) ? 32'd0 : shift_buf_fu_70);

assign tmp_20_fu_340_p2 = (tmp_18_fu_335_p2 & grp_fu_148_p2);

assign tmp_2_fu_180_p2 = ((invdar_reg_98 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_230_p1 = tmp_3_reg_109;

assign tmp_6_fu_268_p4 = {{shift_buf_1_to_int_fu_264_p1[30:23]}};

assign tmp_7_fu_248_p1 = shift_buf_1_2_to_int_fu_234_p1[22:0];

assign tmp_8_fu_238_p4 = {{shift_buf_1_2_to_int_fu_234_p1[30:23]}};

assign tmp_9_fu_278_p1 = shift_buf_1_to_int_fu_264_p1[22:0];

assign tmp_fu_202_p2 = ((invdar_reg_98 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_s_fu_166_p2 = ((invdar_reg_98 == 2'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_5_reg_405[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter1_tmp_5_reg_405[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter2_tmp_5_reg_405[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter3_tmp_5_reg_405[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter4_tmp_5_reg_405[31:20] <= 12'b000000000000;
end

endmodule //findpeaks
