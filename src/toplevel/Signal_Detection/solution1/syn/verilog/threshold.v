// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module threshold (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        amplitude_V_dout,
        amplitude_V_empty_n,
        amplitude_V_read,
        ap_return
);


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] amplitude_V_dout;
input   amplitude_V_empty_n;
output   amplitude_V_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg amplitude_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    amplitude_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] exitcond_reg_104;
reg   [31:0] sum_reg_52;
reg   [19:0] i_reg_64;
wire   [0:0] exitcond_fu_92_p2;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_104;
wire   [19:0] i_1_fu_98_p2;
reg   [19:0] i_1_reg_108;
reg   [31:0] tmp_2_reg_113;
reg    ap_block_state3;
wire   [31:0] grp_fu_75_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_86_p2;
reg   [31:0] tmp_reg_123;
wire   [0:0] ap_CS_fsm_state42;
wire   [31:0] grp_fu_80_p2;
reg   [31:0] tmp_1_reg_128;
wire   [0:0] ap_CS_fsm_state47;
reg    ap_block_state1;
wire   [0:0] ap_CS_fsm_pp0_stage8;
reg   [19:0] i_phi_fu_68_p4;
wire   [0:0] ap_CS_fsm_pp0_stage2;
reg   [31:0] grp_fu_80_p0;
reg   [31:0] grp_fu_80_p1;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_state48;
wire   [0:0] ap_CS_fsm_state13;
reg    grp_fu_75_ce;
wire   [0:0] ap_CS_fsm_pp0_stage3;
wire   [0:0] ap_CS_fsm_pp0_stage4;
wire   [0:0] ap_CS_fsm_pp0_stage5;
wire   [0:0] ap_CS_fsm_pp0_stage6;
wire   [0:0] ap_CS_fsm_pp0_stage7;
wire   [0:0] ap_CS_fsm_state52;
reg   [49:0] ap_NS_fsm;
reg    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 50'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

detect_calls_faddcud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_calls_faddcud_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_52),
    .din1(tmp_2_reg_113),
    .ce(grp_fu_75_ce),
    .dout(grp_fu_75_p2)
);

detect_calls_fmuldEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_calls_fmuldEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

detect_calls_fdiveOg #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_calls_fdiveOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_52),
    .din1(32'd1157234688),
    .ce(1'b1),
    .dout(grp_fu_86_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 50'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'd1 == ap_CS_fsm_state52)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(1'd0 == exitcond_fu_92_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((exitcond_reg_104 == 1'd0) & (1'd1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1)) | ((1'd1 == ap_CS_fsm_pp0_stage8) & ~(exitcond_reg_104 == 1'd0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_104 == 1'd0) & (1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_64 <= i_1_reg_108;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        i_reg_64 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_104))) begin
        sum_reg_52 <= grp_fu_75_p2;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        sum_reg_52 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_pp0_stage0)) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_104 <= exitcond_reg_104;
        exitcond_reg_104 <= exitcond_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_108 <= i_1_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state47)) begin
        tmp_1_reg_128 <= grp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage1) & (exitcond_reg_104 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)))) begin
        tmp_2_reg_113 <= amplitude_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state42)) begin
        tmp_reg_123 <= grp_fu_86_p2;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_reg_104 == 1'd0))) begin
        amplitude_V_blk_n = amplitude_V_empty_n;
    end else begin
        amplitude_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_reg_104 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)))) begin
        amplitude_V_read = 1'b1;
    end else begin
        amplitude_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'd1 == ap_CS_fsm_state52))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state52)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) | ((1'd1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3))) | (1'd1 == ap_CS_fsm_pp0_stage8) | (1'd1 == ap_CS_fsm_pp0_stage2) | (1'd1 == ap_CS_fsm_pp0_stage3) | (1'd1 == ap_CS_fsm_pp0_stage4) | (1'd1 == ap_CS_fsm_pp0_stage5) | (1'd1 == ap_CS_fsm_pp0_stage6) | (1'd1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_75_ce = 1'b1;
    end else begin
        grp_fu_75_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state48)) begin
        grp_fu_80_p0 = tmp_1_reg_128;
    end else if ((1'd1 == ap_CS_fsm_state43)) begin
        grp_fu_80_p0 = tmp_reg_123;
    end else begin
        grp_fu_80_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state48)) begin
        grp_fu_80_p1 = 32'd1084227584;
    end else if ((1'd1 == ap_CS_fsm_state43)) begin
        grp_fu_80_p1 = 32'd1133903872;
    end else begin
        grp_fu_80_p1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_reg_104 == 1'd0) & (1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_68_p4 = i_1_reg_108;
    end else begin
        i_phi_fu_68_p4 = i_reg_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        50'd1 : begin
            if (~(1'b1 == ap_block_state1)) begin
                ap_NS_fsm = 50'd2;
            end else begin
                ap_NS_fsm = 50'd1;
            end
        end
        50'd2 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond_fu_92_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = 50'd4;
            end else begin
                ap_NS_fsm = 50'd1024;
            end
        end
        50'd4 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)) & ~((1'd1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b1 == ap_enable_reg_pp0_iter0)))) begin
                ap_NS_fsm = 50'd8;
            end else if (((1'd1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b1 == ap_enable_reg_pp0_iter0))) begin
                ap_NS_fsm = 50'd1024;
            end else begin
                ap_NS_fsm = 50'd4;
            end
        end
        50'd8 : begin
            ap_NS_fsm = 50'd16;
        end
        50'd16 : begin
            ap_NS_fsm = 50'd32;
        end
        50'd32 : begin
            ap_NS_fsm = 50'd64;
        end
        50'd64 : begin
            ap_NS_fsm = 50'd128;
        end
        50'd128 : begin
            ap_NS_fsm = 50'd256;
        end
        50'd256 : begin
            ap_NS_fsm = 50'd512;
        end
        50'd512 : begin
            ap_NS_fsm = 50'd2;
        end
        50'd1024 : begin
            ap_NS_fsm = 50'd2048;
        end
        50'd2048 : begin
            ap_NS_fsm = 50'd4096;
        end
        50'd4096 : begin
            ap_NS_fsm = 50'd8192;
        end
        50'd8192 : begin
            ap_NS_fsm = 50'd16384;
        end
        50'd16384 : begin
            ap_NS_fsm = 50'd32768;
        end
        50'd32768 : begin
            ap_NS_fsm = 50'd65536;
        end
        50'd65536 : begin
            ap_NS_fsm = 50'd131072;
        end
        50'd131072 : begin
            ap_NS_fsm = 50'd262144;
        end
        50'd262144 : begin
            ap_NS_fsm = 50'd524288;
        end
        50'd524288 : begin
            ap_NS_fsm = 50'd1048576;
        end
        50'd1048576 : begin
            ap_NS_fsm = 50'd2097152;
        end
        50'd2097152 : begin
            ap_NS_fsm = 50'd4194304;
        end
        50'd4194304 : begin
            ap_NS_fsm = 50'd8388608;
        end
        50'd8388608 : begin
            ap_NS_fsm = 50'd16777216;
        end
        50'd16777216 : begin
            ap_NS_fsm = 50'd33554432;
        end
        50'd33554432 : begin
            ap_NS_fsm = 50'd67108864;
        end
        50'd67108864 : begin
            ap_NS_fsm = 50'd134217728;
        end
        50'd134217728 : begin
            ap_NS_fsm = 50'd268435456;
        end
        50'd268435456 : begin
            ap_NS_fsm = 50'd536870912;
        end
        50'd536870912 : begin
            ap_NS_fsm = 50'd1073741824;
        end
        50'd1073741824 : begin
            ap_NS_fsm = 50'd2147483648;
        end
        50'd2147483648 : begin
            ap_NS_fsm = 50'd4294967296;
        end
        50'd4294967296 : begin
            ap_NS_fsm = 50'd8589934592;
        end
        50'd8589934592 : begin
            ap_NS_fsm = 50'd17179869184;
        end
        50'd17179869184 : begin
            ap_NS_fsm = 50'd34359738368;
        end
        50'd34359738368 : begin
            ap_NS_fsm = 50'd68719476736;
        end
        50'd68719476736 : begin
            ap_NS_fsm = 50'd137438953472;
        end
        50'd137438953472 : begin
            ap_NS_fsm = 50'd274877906944;
        end
        50'd274877906944 : begin
            ap_NS_fsm = 50'd549755813888;
        end
        50'd549755813888 : begin
            ap_NS_fsm = 50'd1099511627776;
        end
        50'd1099511627776 : begin
            ap_NS_fsm = 50'd2199023255552;
        end
        50'd2199023255552 : begin
            ap_NS_fsm = 50'd4398046511104;
        end
        50'd4398046511104 : begin
            ap_NS_fsm = 50'd8796093022208;
        end
        50'd8796093022208 : begin
            ap_NS_fsm = 50'd17592186044416;
        end
        50'd17592186044416 : begin
            ap_NS_fsm = 50'd35184372088832;
        end
        50'd35184372088832 : begin
            ap_NS_fsm = 50'd70368744177664;
        end
        50'd70368744177664 : begin
            ap_NS_fsm = 50'd140737488355328;
        end
        50'd140737488355328 : begin
            ap_NS_fsm = 50'd281474976710656;
        end
        50'd281474976710656 : begin
            ap_NS_fsm = 50'd562949953421312;
        end
        50'd562949953421312 : begin
            ap_NS_fsm = 50'd1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((exitcond_reg_104 == 1'd0) & (1'b0 == amplitude_V_empty_n));
end

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_return = grp_fu_80_p2;

assign exitcond_fu_92_p2 = ((i_phi_fu_68_p4 == 20'd600000) ? 1'b1 : 1'b0);

assign i_1_fu_98_p2 = (i_phi_fu_68_p4 + 20'd1);

endmodule //threshold
