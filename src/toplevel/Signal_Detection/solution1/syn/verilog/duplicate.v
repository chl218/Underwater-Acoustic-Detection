// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module duplicate (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        dat_i_V_dout,
        dat_i_V_empty_n,
        dat_i_V_read,
        dat_1_o_V_din,
        dat_1_o_V_full_n,
        dat_1_o_V_write,
        dat_2_o_V_din,
        dat_2_o_V_full_n,
        dat_2_o_V_write,
        dat_3_o_V_din,
        dat_3_o_V_full_n,
        dat_3_o_V_write,
        dat_4_o_V_din,
        dat_4_o_V_full_n,
        dat_4_o_V_write
);


input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [31:0] dat_i_V_dout;
input   dat_i_V_empty_n;
output   dat_i_V_read;
output  [31:0] dat_1_o_V_din;
input   dat_1_o_V_full_n;
output   dat_1_o_V_write;
output  [31:0] dat_2_o_V_din;
input   dat_2_o_V_full_n;
output   dat_2_o_V_write;
output  [31:0] dat_3_o_V_din;
input   dat_3_o_V_full_n;
output   dat_3_o_V_write;
output  [31:0] dat_4_o_V_din;
input   dat_4_o_V_full_n;
output   dat_4_o_V_write;

reg ap_done;
reg ap_idle;
reg dat_i_V_read;
reg dat_1_o_V_write;
reg dat_2_o_V_write;
reg dat_3_o_V_write;
reg dat_4_o_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    dat_i_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_109;
reg    dat_1_o_V_blk_n;
reg    dat_2_o_V_blk_n;
reg    dat_3_o_V_blk_n;
reg    dat_4_o_V_blk_n;
reg   [19:0] i_reg_86;
wire   [0:0] exitcond_fu_97_p2;
reg    ap_block_state3;
wire   [19:0] i_2_fu_103_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
wire   [0:0] ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 3'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'd1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & ~(1'd0 == exitcond_fu_97_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'd0 == exitcond_fu_97_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1)) | ((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & ~(1'd0 == exitcond_fu_97_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if (~(1'b0 == start_full_n)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if (((1'b1 == start_control_reg) & (1'b1 == start_full_n))) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_97_p2))) begin
        i_reg_86 <= i_2_fu_103_p2;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        i_reg_86 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        exitcond_reg_109 <= exitcond_fu_97_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'd1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0))) begin
        dat_1_o_V_blk_n = dat_1_o_V_full_n;
    end else begin
        dat_1_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        dat_1_o_V_write = 1'b1;
    end else begin
        dat_1_o_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0))) begin
        dat_2_o_V_blk_n = dat_2_o_V_full_n;
    end else begin
        dat_2_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        dat_2_o_V_write = 1'b1;
    end else begin
        dat_2_o_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0))) begin
        dat_3_o_V_blk_n = dat_3_o_V_full_n;
    end else begin
        dat_3_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        dat_3_o_V_write = 1'b1;
    end else begin
        dat_3_o_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0))) begin
        dat_4_o_V_blk_n = dat_4_o_V_full_n;
    end else begin
        dat_4_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        dat_4_o_V_write = 1'b1;
    end else begin
        dat_4_o_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0))) begin
        dat_i_V_blk_n = dat_i_V_empty_n;
    end else begin
        dat_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_109 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        dat_i_V_read = 1'b1;
    end else begin
        dat_i_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        3'd1 : begin
            if (~(1'b1 == ap_block_state1)) begin
                ap_NS_fsm = 3'd2;
            end else begin
                ap_NS_fsm = 3'd1;
            end
        end
        3'd2 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond_fu_97_p2))) begin
                ap_NS_fsm = 3'd2;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond_fu_97_p2))) begin
                ap_NS_fsm = 3'd4;
            end else begin
                ap_NS_fsm = 3'd2;
            end
        end
        3'd4 : begin
            ap_NS_fsm = 3'd1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((exitcond_reg_109 == 1'd0) & (1'b0 == dat_i_V_empty_n)) | ((exitcond_reg_109 == 1'd0) & (1'b0 == dat_1_o_V_full_n)) | ((exitcond_reg_109 == 1'd0) & (1'b0 == dat_2_o_V_full_n)) | ((exitcond_reg_109 == 1'd0) & (1'b0 == dat_3_o_V_full_n)) | ((exitcond_reg_109 == 1'd0) & (1'b0 == dat_4_o_V_full_n)));
end

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign dat_1_o_V_din = dat_i_V_dout;

assign dat_2_o_V_din = dat_i_V_dout;

assign dat_3_o_V_din = dat_i_V_dout;

assign dat_4_o_V_din = dat_i_V_dout;

assign exitcond_fu_97_p2 = ((i_reg_86 == 20'd600000) ? 1'b1 : 1'b0);

assign i_2_fu_103_p2 = (i_reg_86 + 20'd1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //duplicate
