// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        signals_V_dout,
        signals_V_empty_n,
        signals_V_read,
        threshold_x,
        loc_V_din,
        loc_V_full_n,
        loc_V_write,
        hits_out_din,
        hits_out_full_n,
        hits_out_write
);


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] signals_V_dout;
input   signals_V_empty_n;
output   signals_V_read;
input  [31:0] threshold_x;
output  [31:0] loc_V_din;
input   loc_V_full_n;
output   loc_V_write;
output  [31:0] hits_out_din;
input   hits_out_full_n;
output   hits_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg signals_V_read;
reg loc_V_write;
reg hits_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    signals_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    loc_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] tmp_28_reg_287;
reg    hits_out_blk_n;
wire   [0:0] ap_CS_fsm_state8;
reg   [19:0] tmp_30_reg_102;
reg    ap_block_state1;
wire   [31:0] p_read_to_int_fu_122_p1;
reg   [31:0] p_read_to_int_reg_251;
wire   [0:0] notrhs2_fu_130_p2;
reg   [0:0] notrhs2_reg_256;
wire   [0:0] exitcond_i_i_fu_141_p2;
reg    ap_block_state7;
wire   [19:0] i_fu_147_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_6_fu_153_p1;
reg   [31:0] tmp_6_reg_270;
reg   [31:0] ap_pipeline_reg_pp0_iter1_tmp_6_reg_270;
reg   [31:0] ap_pipeline_reg_pp0_iter2_tmp_6_reg_270;
reg   [31:0] ap_pipeline_reg_pp0_iter3_tmp_6_reg_270;
reg   [31:0] ap_pipeline_reg_pp0_iter4_tmp_6_reg_270;
wire   [0:0] notlhs1_fu_166_p2;
reg   [0:0] notlhs1_reg_275;
reg   [0:0] ap_pipeline_reg_pp0_iter1_notlhs1_reg_275;
reg   [0:0] ap_pipeline_reg_pp0_iter2_notlhs1_reg_275;
reg   [0:0] ap_pipeline_reg_pp0_iter3_notlhs1_reg_275;
reg   [31:0] tmp_29_reg_280;
reg   [31:0] ap_pipeline_reg_pp0_iter2_tmp_29_reg_280;
reg   [31:0] ap_pipeline_reg_pp0_iter3_tmp_29_reg_280;
wire   [0:0] tmp_28_fu_217_p2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] hits_def_channel_fu_62;
wire   [31:0] tmp_14_i_i_fu_223_p2;
wire   [22:0] tmp_fu_126_p1;
wire   [7:0] tmp_22_fu_157_p4;
wire   [31:0] currAmp_to_int_fu_172_p1;
wire   [7:0] tmp_21_fu_175_p4;
wire   [22:0] tmp_24_fu_185_p1;
wire   [0:0] notrhs_fu_195_p2;
wire   [0:0] notlhs_fu_189_p2;
wire   [0:0] tmp_23_fu_201_p2;
wire   [0:0] tmp_25_fu_207_p2;
wire   [0:0] tmp_26_fu_211_p2;
wire   [0:0] grp_fu_113_p2;
reg    grp_fu_113_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

detect_calls_fcmpbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
detect_calls_fcmpbkb_x_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(signals_V_dout),
    .din1(threshold_x),
    .ce(grp_fu_113_ce),
    .opcode(5'd2),
    .dout(grp_fu_113_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 3'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'd1 == ap_CS_fsm_state8) & ~(1'b0 == hits_out_full_n))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & ~(1'd0 == exitcond_i_i_fu_141_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd0 == exitcond_i_i_fu_141_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1)) | ((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & ~(1'd0 == exitcond_i_i_fu_141_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & ~(tmp_28_reg_287 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        hits_def_channel_fu_62 <= tmp_14_i_i_fu_223_p2;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        hits_def_channel_fu_62 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_i_fu_141_p2))) begin
        tmp_30_reg_102 <= i_fu_147_p2;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        tmp_30_reg_102 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        ap_pipeline_reg_pp0_iter1_notlhs1_reg_275 <= notlhs1_reg_275;
        ap_pipeline_reg_pp0_iter1_tmp_6_reg_270[19 : 0] <= tmp_6_reg_270[19 : 0];
        tmp_29_reg_280 <= signals_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
        ap_pipeline_reg_pp0_iter2_notlhs1_reg_275 <= ap_pipeline_reg_pp0_iter1_notlhs1_reg_275;
        ap_pipeline_reg_pp0_iter2_tmp_29_reg_280 <= tmp_29_reg_280;
        ap_pipeline_reg_pp0_iter2_tmp_6_reg_270[19 : 0] <= ap_pipeline_reg_pp0_iter1_tmp_6_reg_270[19 : 0];
        ap_pipeline_reg_pp0_iter3_notlhs1_reg_275 <= ap_pipeline_reg_pp0_iter2_notlhs1_reg_275;
        ap_pipeline_reg_pp0_iter3_tmp_29_reg_280 <= ap_pipeline_reg_pp0_iter2_tmp_29_reg_280;
        ap_pipeline_reg_pp0_iter3_tmp_6_reg_270[19 : 0] <= ap_pipeline_reg_pp0_iter2_tmp_6_reg_270[19 : 0];
        ap_pipeline_reg_pp0_iter4_tmp_6_reg_270[19 : 0] <= ap_pipeline_reg_pp0_iter3_tmp_6_reg_270[19 : 0];
        tmp_28_reg_287 <= tmp_28_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd0 == exitcond_i_i_fu_141_p2))) begin
        notlhs1_reg_275 <= notlhs1_fu_166_p2;
        tmp_6_reg_270[19 : 0] <= tmp_6_fu_153_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        notrhs2_reg_256 <= notrhs2_fu_130_p2;
        p_read_to_int_reg_251 <= p_read_to_int_fu_122_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'd1 == ap_CS_fsm_state8) & ~(1'b0 == hits_out_full_n)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state8) & ~(1'b0 == hits_out_full_n))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        grp_fu_113_ce = 1'b1;
    end else begin
        grp_fu_113_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state8)) begin
        hits_out_blk_n = hits_out_full_n;
    end else begin
        hits_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state8) & ~(1'b0 == hits_out_full_n))) begin
        hits_out_write = 1'b1;
    end else begin
        hits_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & ~(tmp_28_reg_287 == 1'd0))) begin
        loc_V_blk_n = loc_V_full_n;
    end else begin
        loc_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & ~(tmp_28_reg_287 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        loc_V_write = 1'b1;
    end else begin
        loc_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        signals_V_blk_n = signals_V_empty_n;
    end else begin
        signals_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        signals_V_read = 1'b1;
    end else begin
        signals_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        3'd1 : begin
            if (~(1'b1 == ap_block_state1)) begin
                ap_NS_fsm = 3'd2;
            end else begin
                ap_NS_fsm = 3'd1;
            end
        end
        3'd2 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & ~(1'b1 == ap_enable_reg_pp0_iter4)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond_i_i_fu_141_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = 3'd2;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & ~(1'b1 == ap_enable_reg_pp0_iter4)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == signals_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond_i_i_fu_141_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = 3'd4;
            end else begin
                ap_NS_fsm = 3'd2;
            end
        end
        3'd4 : begin
            if (~(1'b0 == hits_out_full_n)) begin
                ap_NS_fsm = 3'd1;
            end else begin
                ap_NS_fsm = 3'd4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state7 = (~(tmp_28_reg_287 == 1'd0) & (1'b0 == loc_V_full_n));
end

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1) | (ap_enable_reg_pp0_iter2 == 1'b1) | (ap_enable_reg_pp0_iter3 == 1'b1) | (ap_enable_reg_pp0_iter4 == 1'b1) | (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign currAmp_to_int_fu_172_p1 = ap_pipeline_reg_pp0_iter3_tmp_29_reg_280;

assign exitcond_i_i_fu_141_p2 = ((tmp_30_reg_102 == 20'd600000) ? 1'b1 : 1'b0);

assign hits_out_din = hits_def_channel_fu_62;

assign i_fu_147_p2 = (tmp_30_reg_102 + 20'd1);

assign loc_V_din = ap_pipeline_reg_pp0_iter4_tmp_6_reg_270;

assign notlhs1_fu_166_p2 = ((tmp_22_fu_157_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_189_p2 = ((tmp_21_fu_175_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_130_p2 = ((tmp_fu_126_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_195_p2 = ((tmp_24_fu_185_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_read_to_int_fu_122_p1 = threshold_x;

assign tmp_14_i_i_fu_223_p2 = (hits_def_channel_fu_62 + 32'd1);

assign tmp_21_fu_175_p4 = {{currAmp_to_int_fu_172_p1[30:23]}};

assign tmp_22_fu_157_p4 = {{p_read_to_int_reg_251[30:23]}};

assign tmp_23_fu_201_p2 = (notrhs_fu_195_p2 | notlhs_fu_189_p2);

assign tmp_24_fu_185_p1 = currAmp_to_int_fu_172_p1[22:0];

assign tmp_25_fu_207_p2 = (notrhs2_reg_256 | ap_pipeline_reg_pp0_iter3_notlhs1_reg_275);

assign tmp_26_fu_211_p2 = (tmp_23_fu_201_p2 & tmp_25_fu_207_p2);

assign tmp_28_fu_217_p2 = (tmp_26_fu_211_p2 & grp_fu_113_p2);

assign tmp_6_fu_153_p1 = tmp_30_reg_102;

assign tmp_fu_126_p1 = p_read_to_int_fu_122_p1[22:0];

always @ (posedge ap_clk) begin
    tmp_6_reg_270[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter1_tmp_6_reg_270[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter2_tmp_6_reg_270[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter3_tmp_6_reg_270[31:20] <= 12'b000000000000;
    ap_pipeline_reg_pp0_iter4_tmp_6_reg_270[31:20] <= 12'b000000000000;
end

endmodule //detect
