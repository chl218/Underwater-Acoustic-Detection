// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module parse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sig_i_V_dout,
        sig_i_V_empty_n,
        sig_i_V_read,
        hits_dout,
        hits_empty_n,
        hits_read,
        loc_V_dout,
        loc_V_empty_n,
        loc_V_read,
        sig_o_V_din,
        sig_o_V_full_n,
        sig_o_V_write
);


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] sig_i_V_dout;
input   sig_i_V_empty_n;
output   sig_i_V_read;
input  [31:0] hits_dout;
input   hits_empty_n;
output   hits_read;
input  [31:0] loc_V_dout;
input   loc_V_empty_n;
output   loc_V_read;
output  [31:0] sig_o_V_din;
input   sig_o_V_full_n;
output   sig_o_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sig_i_V_read;
reg hits_read;
reg loc_V_read;
reg sig_o_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    sig_i_V_blk_n;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_5_i_i_fu_214_p2;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] tmp_10_i_i_fu_245_p2;
reg    hits_blk_n;
reg    loc_V_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_i_i_fu_142_p2;
reg    sig_o_V_blk_n;
reg   [31:0] hits_read_reg_249;
reg    ap_block_state1;
wire   [30:0] i_fu_147_p2;
reg   [30:0] i_reg_257;
reg    ap_block_state2;
reg   [31:0] tmp_4_reg_262;
wire   [31:0] e_fu_158_p2;
reg   [31:0] e_reg_269;
wire   [0:0] ap_CS_fsm_state3;
wire   [31:0] tmp_1_i_i_fu_176_p3;
reg   [31:0] tmp_1_i_i_reg_275;
wire   [31:0] e_1_fu_189_p3;
reg   [31:0] e_1_reg_282;
wire   [0:0] ap_CS_fsm_state4;
wire   [31:0] smax9_i_i_fu_201_p3;
reg   [31:0] smax9_i_i_reg_289;
wire   [31:0] tmp_3_i_i_fu_208_p2;
reg    ap_block_state5;
wire   [31:0] tmp_7_i_i_fu_219_p2;
reg   [31:0] tmp_7_i_i_reg_303;
wire   [0:0] tmp_8_i_i_fu_224_p2;
reg   [0:0] tmp_8_i_i_reg_309;
wire   [0:0] ap_CS_fsm_state6;
wire   [31:0] read_count_fu_233_p2;
reg   [31:0] read_count_reg_314;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] read_count_1_fu_239_p2;
reg   [31:0] read_count_1_reg_319;
wire   [0:0] ap_CS_fsm_state8;
reg   [31:0] read_count_i_i_reg_96;
reg    ap_block_state9;
reg   [30:0] i_i_i_reg_108;
reg   [31:0] read_count_1_i_i_reg_119;
reg   [31:0] read_count_2_in_i_i_reg_129;
wire   [31:0] i_i_i_cast_fu_138_p1;
wire   [31:0] b_fu_153_p2;
wire   [0:0] tmp_fu_163_p3;
wire   [31:0] p_op_i_i_fu_171_p2;
wire   [0:0] tmp_i_i_11_fu_184_p2;
wire   [0:0] tmp_2_i_i_fu_196_p2;
wire   [31:0] smax8_i_i_fu_228_p3;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 9'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'd1 == ap_CS_fsm_state2) & (1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state9) & (1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
        i_i_i_reg_108 <= i_reg_257;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        i_i_i_reg_108 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state5) & ~(tmp_5_i_i_fu_214_p2 == 1'd0) & ~(1'b1 == ap_block_state5))) begin
        read_count_1_i_i_reg_119 <= tmp_3_i_i_fu_208_p2;
    end else if ((1'd1 == ap_CS_fsm_state4)) begin
        read_count_1_i_i_reg_119 <= read_count_i_i_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state9) & ~(1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
        read_count_2_in_i_i_reg_129 <= read_count_1_reg_319;
    end else if ((1'd1 == ap_CS_fsm_state7)) begin
        read_count_2_in_i_i_reg_129 <= smax9_i_i_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state9) & (1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
        read_count_i_i_reg_96 <= read_count_reg_314;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        read_count_i_i_reg_96 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state4)) begin
        e_1_reg_282 <= e_1_fu_189_p3;
        smax9_i_i_reg_289 <= smax9_i_i_fu_201_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state3)) begin
        e_reg_269 <= e_fu_158_p2;
        tmp_1_i_i_reg_275 <= tmp_1_i_i_fu_176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        hits_read_reg_249 <= hits_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'b1 == ap_block_state2))) begin
        i_reg_257 <= i_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state8)) begin
        read_count_1_reg_319 <= read_count_1_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state7)) begin
        read_count_reg_314 <= read_count_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
        tmp_4_reg_262 <= loc_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state5) & (tmp_5_i_i_fu_214_p2 == 1'd0) & ~(1'b1 == ap_block_state5))) begin
        tmp_7_i_i_reg_303 <= tmp_7_i_i_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state6)) begin
        tmp_8_i_i_reg_309 <= tmp_8_i_i_fu_224_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'd1 == ap_CS_fsm_state2) & (1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state2) & (1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        hits_blk_n = hits_empty_n;
    end else begin
        hits_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b1 == ap_block_state1))) begin
        hits_read = 1'b1;
    end else begin
        hits_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_i_i_fu_142_p2))) begin
        loc_V_blk_n = loc_V_empty_n;
    end else begin
        loc_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state2) & ~(1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
        loc_V_read = 1'b1;
    end else begin
        loc_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state5) & ~(tmp_5_i_i_fu_214_p2 == 1'd0)) | ((1'd1 == ap_CS_fsm_state9) & ~(1'd0 == tmp_10_i_i_fu_245_p2)))) begin
        sig_i_V_blk_n = sig_i_V_empty_n;
    end else begin
        sig_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state5) & ~(tmp_5_i_i_fu_214_p2 == 1'd0) & ~(1'b1 == ap_block_state5)) | ((1'd1 == ap_CS_fsm_state9) & ~(1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9)))) begin
        sig_i_V_read = 1'b1;
    end else begin
        sig_i_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state9) & ~(1'd0 == tmp_10_i_i_fu_245_p2))) begin
        sig_o_V_blk_n = sig_o_V_full_n;
    end else begin
        sig_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state9) & ~(1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
        sig_o_V_write = 1'b1;
    end else begin
        sig_o_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        9'd1 : begin
            if (~(1'b1 == ap_block_state1)) begin
                ap_NS_fsm = 9'd2;
            end else begin
                ap_NS_fsm = 9'd1;
            end
        end
        9'd2 : begin
            if (((1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
                ap_NS_fsm = 9'd1;
            end else if ((~(1'd0 == tmp_i_i_fu_142_p2) & ~(1'b1 == ap_block_state2))) begin
                ap_NS_fsm = 9'd4;
            end else begin
                ap_NS_fsm = 9'd2;
            end
        end
        9'd4 : begin
            ap_NS_fsm = 9'd8;
        end
        9'd8 : begin
            ap_NS_fsm = 9'd16;
        end
        9'd16 : begin
            if ((~(tmp_5_i_i_fu_214_p2 == 1'd0) & ~(1'b1 == ap_block_state5))) begin
                ap_NS_fsm = 9'd16;
            end else if (((tmp_5_i_i_fu_214_p2 == 1'd0) & ~(1'b1 == ap_block_state5))) begin
                ap_NS_fsm = 9'd32;
            end else begin
                ap_NS_fsm = 9'd16;
            end
        end
        9'd32 : begin
            ap_NS_fsm = 9'd64;
        end
        9'd64 : begin
            ap_NS_fsm = 9'd128;
        end
        9'd128 : begin
            ap_NS_fsm = 9'd256;
        end
        9'd256 : begin
            if (((1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
                ap_NS_fsm = 9'd2;
            end else if ((~(1'd0 == tmp_10_i_i_fu_245_p2) & ~(1'b1 == ap_block_state9))) begin
                ap_NS_fsm = 9'd128;
            end else begin
                ap_NS_fsm = 9'd256;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == hits_empty_n));
end

always @ (*) begin
    ap_block_state2 = (~(1'd0 == tmp_i_i_fu_142_p2) & (1'b0 == loc_V_empty_n));
end

always @ (*) begin
    ap_block_state5 = (~(tmp_5_i_i_fu_214_p2 == 1'd0) & (1'b0 == sig_i_V_empty_n));
end

always @ (*) begin
    ap_block_state9 = ((~(1'd0 == tmp_10_i_i_fu_245_p2) & (1'b0 == sig_i_V_empty_n)) | (~(1'd0 == tmp_10_i_i_fu_245_p2) & (1'b0 == sig_o_V_full_n)));
end

assign b_fu_153_p2 = ($signed(tmp_4_reg_262) + $signed(32'd4294966295));

assign e_1_fu_189_p3 = ((tmp_i_i_11_fu_184_p2[0:0] === 1'b1) ? 32'd599999 : e_reg_269);

assign e_fu_158_p2 = (tmp_4_reg_262 + 32'd1000);

assign i_fu_147_p2 = (i_i_i_reg_108 + 31'd1);

assign i_i_i_cast_fu_138_p1 = i_i_i_reg_108;

assign p_op_i_i_fu_171_p2 = ($signed(tmp_4_reg_262) + $signed(32'd4294966294));

assign read_count_1_fu_239_p2 = (read_count_2_in_i_i_reg_129 + 32'd1);

assign read_count_fu_233_p2 = (smax8_i_i_fu_228_p3 + 32'd1);

assign sig_o_V_din = sig_i_V_dout;

assign smax8_i_i_fu_228_p3 = ((tmp_8_i_i_reg_309[0:0] === 1'b1) ? e_1_reg_282 : tmp_7_i_i_reg_303);

assign smax9_i_i_fu_201_p3 = ((tmp_2_i_i_fu_196_p2[0:0] === 1'b1) ? read_count_i_i_reg_96 : tmp_1_i_i_reg_275);

assign tmp_10_i_i_fu_245_p2 = (($signed(read_count_1_reg_319) < $signed(e_1_reg_282)) ? 1'b1 : 1'b0);

assign tmp_1_i_i_fu_176_p3 = ((tmp_fu_163_p3[0:0] === 1'b1) ? 32'd4294967295 : p_op_i_i_fu_171_p2);

assign tmp_2_i_i_fu_196_p2 = (($signed(read_count_i_i_reg_96) > $signed(tmp_1_i_i_reg_275)) ? 1'b1 : 1'b0);

assign tmp_3_i_i_fu_208_p2 = (read_count_1_i_i_reg_119 + 32'd1);

assign tmp_5_i_i_fu_214_p2 = (($signed(read_count_1_i_i_reg_119) < $signed(tmp_1_i_i_reg_275)) ? 1'b1 : 1'b0);

assign tmp_7_i_i_fu_219_p2 = (smax9_i_i_reg_289 + 32'd1);

assign tmp_8_i_i_fu_224_p2 = (($signed(e_1_reg_282) > $signed(tmp_7_i_i_reg_303)) ? 1'b1 : 1'b0);

assign tmp_fu_163_p3 = b_fu_153_p2[32'd31];

assign tmp_i_i_11_fu_184_p2 = (($signed(e_reg_269) > $signed(32'd599999)) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_142_p2 = (($signed(i_i_i_cast_fu_138_p1) < $signed(hits_read_reg_249)) ? 1'b1 : 1'b0);

endmodule //parse
