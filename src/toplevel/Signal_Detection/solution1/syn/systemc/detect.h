// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _detect_HH_
#define _detect_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "detect_calls_fcmpbkb.h"

namespace ap_rtl {

struct detect : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > signals_V_dout;
    sc_in< sc_logic > signals_V_empty_n;
    sc_out< sc_logic > signals_V_read;
    sc_in< sc_lv<32> > threshold_x;
    sc_out< sc_lv<32> > loc_V_din;
    sc_in< sc_logic > loc_V_full_n;
    sc_out< sc_logic > loc_V_write;
    sc_out< sc_lv<32> > hits_out_din;
    sc_in< sc_logic > hits_out_full_n;
    sc_out< sc_logic > hits_out_write;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    detect(sc_module_name name);
    SC_HAS_PROCESS(detect);

    ~detect();

    sc_trace_file* mVcdFile;

    detect_calls_fcmpbkb<1,4,32,32,1>* detect_calls_fcmpbkb_x_U14;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > signals_V_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > loc_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<1> > tmp_28_reg_287;
    sc_signal< sc_logic > hits_out_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_state8;
    sc_signal< sc_lv<20> > tmp_30_reg_102;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > p_read_to_int_fu_122_p1;
    sc_signal< sc_lv<32> > p_read_to_int_reg_251;
    sc_signal< sc_lv<1> > notrhs2_fu_130_p2;
    sc_signal< sc_lv<1> > notrhs2_reg_256;
    sc_signal< sc_lv<1> > exitcond_i_i_fu_141_p2;
    sc_signal< bool > ap_block_state7;
    sc_signal< sc_lv<20> > i_fu_147_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_6_fu_153_p1;
    sc_signal< sc_lv<32> > tmp_6_reg_270;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter1_tmp_6_reg_270;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter2_tmp_6_reg_270;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter3_tmp_6_reg_270;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter4_tmp_6_reg_270;
    sc_signal< sc_lv<1> > notlhs1_fu_166_p2;
    sc_signal< sc_lv<1> > notlhs1_reg_275;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_notlhs1_reg_275;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter2_notlhs1_reg_275;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter3_notlhs1_reg_275;
    sc_signal< sc_lv<32> > tmp_29_reg_280;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter2_tmp_29_reg_280;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter3_tmp_29_reg_280;
    sc_signal< sc_lv<1> > tmp_28_fu_217_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<32> > hits_def_channel_fu_62;
    sc_signal< sc_lv<32> > tmp_14_i_i_fu_223_p2;
    sc_signal< sc_lv<23> > tmp_fu_126_p1;
    sc_signal< sc_lv<8> > tmp_22_fu_157_p4;
    sc_signal< sc_lv<32> > currAmp_to_int_fu_172_p1;
    sc_signal< sc_lv<8> > tmp_21_fu_175_p4;
    sc_signal< sc_lv<23> > tmp_24_fu_185_p1;
    sc_signal< sc_lv<1> > notrhs_fu_195_p2;
    sc_signal< sc_lv<1> > notlhs_fu_189_p2;
    sc_signal< sc_lv<1> > tmp_23_fu_201_p2;
    sc_signal< sc_lv<1> > tmp_25_fu_207_p2;
    sc_signal< sc_lv<1> > tmp_26_fu_211_p2;
    sc_signal< sc_lv<1> > grp_fu_113_p2;
    sc_signal< sc_logic > grp_fu_113_ce;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<20> ap_const_lv20_927C0;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state1();
    void thread_ap_block_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_currAmp_to_int_fu_172_p1();
    void thread_exitcond_i_i_fu_141_p2();
    void thread_grp_fu_113_ce();
    void thread_hits_out_blk_n();
    void thread_hits_out_din();
    void thread_hits_out_write();
    void thread_i_fu_147_p2();
    void thread_loc_V_blk_n();
    void thread_loc_V_din();
    void thread_loc_V_write();
    void thread_notlhs1_fu_166_p2();
    void thread_notlhs_fu_189_p2();
    void thread_notrhs2_fu_130_p2();
    void thread_notrhs_fu_195_p2();
    void thread_p_read_to_int_fu_122_p1();
    void thread_signals_V_blk_n();
    void thread_signals_V_read();
    void thread_tmp_14_i_i_fu_223_p2();
    void thread_tmp_21_fu_175_p4();
    void thread_tmp_22_fu_157_p4();
    void thread_tmp_23_fu_201_p2();
    void thread_tmp_24_fu_185_p1();
    void thread_tmp_25_fu_207_p2();
    void thread_tmp_26_fu_211_p2();
    void thread_tmp_28_fu_217_p2();
    void thread_tmp_6_fu_153_p1();
    void thread_tmp_fu_126_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
