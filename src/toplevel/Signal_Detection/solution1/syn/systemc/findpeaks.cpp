// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "findpeaks.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic findpeaks::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic findpeaks::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> findpeaks::ap_ST_fsm_state1 = "1";
const sc_lv<4> findpeaks::ap_ST_fsm_state2 = "10";
const sc_lv<4> findpeaks::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> findpeaks::ap_ST_fsm_state9 = "1000";
const sc_lv<32> findpeaks::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> findpeaks::ap_const_lv1_1 = "1";
const bool findpeaks::ap_const_boolean_1 = true;
const sc_lv<32> findpeaks::ap_const_lv32_2 = "10";
const sc_lv<1> findpeaks::ap_const_lv1_0 = "0";
const sc_lv<32> findpeaks::ap_const_lv32_1 = "1";
const sc_lv<2> findpeaks::ap_const_lv2_0 = "00";
const sc_lv<20> findpeaks::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<2> findpeaks::ap_const_lv2_1 = "1";
const sc_lv<2> findpeaks::ap_const_lv2_2 = "10";
const sc_lv<20> findpeaks::ap_const_lv20_927C0 = "10010010011111000000";
const sc_lv<20> findpeaks::ap_const_lv20_1 = "1";
const sc_lv<32> findpeaks::ap_const_lv32_17 = "10111";
const sc_lv<32> findpeaks::ap_const_lv32_1E = "11110";
const sc_lv<8> findpeaks::ap_const_lv8_FF = "11111111";
const sc_lv<23> findpeaks::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> findpeaks::ap_const_lv5_4 = "100";
const sc_lv<5> findpeaks::ap_const_lv5_2 = "10";
const sc_lv<32> findpeaks::ap_const_lv32_3 = "11";

findpeaks::findpeaks(sc_module_name name) : sc_module(name), mVcdFile(0) {
    detect_calls_fcmpbkb_U5 = new detect_calls_fcmpbkb<1,4,32,32,1>("detect_calls_fcmpbkb_U5");
    detect_calls_fcmpbkb_U5->clk(ap_clk);
    detect_calls_fcmpbkb_U5->reset(ap_rst);
    detect_calls_fcmpbkb_U5->din0(shift_buf_1_2_phi_fu_123_p4);
    detect_calls_fcmpbkb_U5->din1(shift_buf_1_13_phi_fu_135_p4);
    detect_calls_fcmpbkb_U5->ce(grp_fu_142_ce);
    detect_calls_fcmpbkb_U5->opcode(ap_var_for_const0);
    detect_calls_fcmpbkb_U5->dout(grp_fu_142_p2);
    detect_calls_fcmpbkb_U6 = new detect_calls_fcmpbkb<1,4,32,32,1>("detect_calls_fcmpbkb_U6");
    detect_calls_fcmpbkb_U6->clk(ap_clk);
    detect_calls_fcmpbkb_U6->reset(ap_rst);
    detect_calls_fcmpbkb_U6->din0(shift_buf_1_13_phi_fu_135_p4);
    detect_calls_fcmpbkb_U6->din1(samples_V_dout);
    detect_calls_fcmpbkb_U6->ce(grp_fu_148_ce);
    detect_calls_fcmpbkb_U6->opcode(ap_var_for_const1);
    detect_calls_fcmpbkb_U6->dout(grp_fu_148_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_amplitude_V);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( or_cond_fu_360_p2 );

    SC_METHOD(thread_amplitude_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( or_cond_fu_360_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( samples_V_empty_n );
    sensitive << ( exitcond_reg_396 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_exitcond_fu_218_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_3_reg_109 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_142_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );

    SC_METHOD(thread_grp_fu_148_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );

    SC_METHOD(thread_i_fu_224_p2);
    sensitive << ( tmp_3_reg_109 );

    SC_METHOD(thread_indvarinc_fu_160_p2);
    sensitive << ( invdar_reg_98 );

    SC_METHOD(thread_locations_V);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter4_tmp_5_reg_405 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( or_cond_fu_360_p2 );

    SC_METHOD(thread_locations_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( or_cond_fu_360_p2 );

    SC_METHOD(thread_notlhs2_fu_282_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter2_exitcond_reg_396 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( tmp_6_fu_268_p4 );

    SC_METHOD(thread_notlhs6_fu_317_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter3_exitcond_reg_396 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp_15_fu_303_p4 );

    SC_METHOD(thread_notlhs_fu_252_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_396 );
    sensitive << ( ap_block_state4 );
    sensitive << ( tmp_8_fu_238_p4 );

    SC_METHOD(thread_notrhs3_fu_288_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter2_exitcond_reg_396 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( tmp_9_fu_278_p1 );

    SC_METHOD(thread_notrhs7_fu_323_p2);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( ap_pipeline_reg_pp0_iter3_exitcond_reg_396 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp_16_fu_313_p1 );

    SC_METHOD(thread_notrhs_fu_258_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_396 );
    sensitive << ( ap_block_state4 );
    sensitive << ( tmp_7_fu_248_p1 );

    SC_METHOD(thread_or_cond_fu_360_p2);
    sensitive << ( tmp_20_reg_438 );
    sensitive << ( tmp_14_fu_355_p2 );

    SC_METHOD(thread_samples_V_blk_n);
    sensitive << ( samples_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_396 );

    SC_METHOD(thread_samples_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_396 );
    sensitive << ( ap_block_state4 );

    SC_METHOD(thread_shift_buf_0_1_fu_186_p3);
    sensitive << ( shift_buf_fu_70 );
    sensitive << ( tmp_2_fu_180_p2 );
    sensitive << ( tmp_1_fu_172_p3 );

    SC_METHOD(thread_shift_buf_0_to_int_fu_300_p1);
    sensitive << ( ap_pipeline_reg_pp0_iter3_tmp_22_reg_410 );

    SC_METHOD(thread_shift_buf_1_13_phi_fu_135_p4);
    sensitive << ( shift_buf_1_13_reg_130 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_396 );
    sensitive << ( tmp_22_reg_410 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_shift_buf_1_1_fu_194_p3);
    sensitive << ( shift_buf_1_fu_74 );
    sensitive << ( tmp_2_fu_180_p2 );

    SC_METHOD(thread_shift_buf_1_2_phi_fu_123_p4);
    sensitive << ( shift_buf_1_2_reg_120 );
    sensitive << ( shift_buf_1_13_reg_130 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_396 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_shift_buf_1_2_to_int_fu_234_p1);
    sensitive << ( shift_buf_1_2_phi_fu_123_p4 );

    SC_METHOD(thread_shift_buf_1_to_int_fu_264_p1);
    sensitive << ( ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130 );

    SC_METHOD(thread_tmp_10_fu_346_p2);
    sensitive << ( ap_pipeline_reg_pp0_iter4_notlhs_reg_417 );
    sensitive << ( ap_pipeline_reg_pp0_iter4_notrhs_reg_422 );

    SC_METHOD(thread_tmp_11_fu_294_p2);
    sensitive << ( notrhs3_fu_288_p2 );
    sensitive << ( notlhs2_fu_282_p2 );

    SC_METHOD(thread_tmp_12_fu_350_p2);
    sensitive << ( ap_pipeline_reg_pp0_iter4_tmp_11_reg_427 );
    sensitive << ( tmp_10_fu_346_p2 );

    SC_METHOD(thread_tmp_14_fu_355_p2);
    sensitive << ( tmp_13_reg_433 );
    sensitive << ( tmp_12_fu_350_p2 );

    SC_METHOD(thread_tmp_15_fu_303_p4);
    sensitive << ( shift_buf_0_to_int_fu_300_p1 );

    SC_METHOD(thread_tmp_16_fu_313_p1);
    sensitive << ( shift_buf_0_to_int_fu_300_p1 );

    SC_METHOD(thread_tmp_17_fu_329_p2);
    sensitive << ( notrhs7_fu_323_p2 );
    sensitive << ( notlhs6_fu_317_p2 );

    SC_METHOD(thread_tmp_18_fu_335_p2);
    sensitive << ( tmp_11_reg_427 );
    sensitive << ( tmp_17_fu_329_p2 );

    SC_METHOD(thread_tmp_1_fu_172_p3);
    sensitive << ( shift_buf_fu_70 );
    sensitive << ( tmp_s_fu_166_p2 );

    SC_METHOD(thread_tmp_20_fu_340_p2);
    sensitive << ( tmp_18_fu_335_p2 );
    sensitive << ( grp_fu_148_p2 );

    SC_METHOD(thread_tmp_2_fu_180_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_98 );

    SC_METHOD(thread_tmp_5_fu_230_p1);
    sensitive << ( tmp_3_reg_109 );

    SC_METHOD(thread_tmp_6_fu_268_p4);
    sensitive << ( shift_buf_1_to_int_fu_264_p1 );

    SC_METHOD(thread_tmp_7_fu_248_p1);
    sensitive << ( shift_buf_1_2_to_int_fu_234_p1 );

    SC_METHOD(thread_tmp_8_fu_238_p4);
    sensitive << ( shift_buf_1_2_to_int_fu_234_p1 );

    SC_METHOD(thread_tmp_9_fu_278_p1);
    sensitive << ( shift_buf_1_to_int_fu_264_p1 );

    SC_METHOD(thread_tmp_fu_202_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_98 );

    SC_METHOD(thread_tmp_s_fu_166_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_98 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4 );
    sensitive << ( tmp_fu_202_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "findpeaks_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, samples_V_dout, "(port)samples_V_dout");
    sc_trace(mVcdFile, samples_V_empty_n, "(port)samples_V_empty_n");
    sc_trace(mVcdFile, samples_V_read, "(port)samples_V_read");
    sc_trace(mVcdFile, amplitude_V, "(port)amplitude_V");
    sc_trace(mVcdFile, amplitude_V_ap_vld, "(port)amplitude_V_ap_vld");
    sc_trace(mVcdFile, locations_V, "(port)locations_V");
    sc_trace(mVcdFile, locations_V_ap_vld, "(port)locations_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, samples_V_blk_n, "samples_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_396, "exitcond_reg_396");
    sc_trace(mVcdFile, tmp_3_reg_109, "tmp_3_reg_109");
    sc_trace(mVcdFile, shift_buf_1_2_reg_120, "shift_buf_1_2_reg_120");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, shift_buf_1_13_reg_130, "shift_buf_1_13_reg_130");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130, "ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130, "ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130, "ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130");
    sc_trace(mVcdFile, indvarinc_fu_160_p2, "indvarinc_fu_160_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shift_buf_0_1_fu_186_p3, "shift_buf_0_1_fu_186_p3");
    sc_trace(mVcdFile, shift_buf_1_1_fu_194_p3, "shift_buf_1_1_fu_194_p3");
    sc_trace(mVcdFile, tmp_fu_202_p2, "tmp_fu_202_p2");
    sc_trace(mVcdFile, exitcond_fu_218_p2, "exitcond_fu_218_p2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_reg_396, "ap_pipeline_reg_pp0_iter1_exitcond_reg_396");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_exitcond_reg_396, "ap_pipeline_reg_pp0_iter2_exitcond_reg_396");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_exitcond_reg_396, "ap_pipeline_reg_pp0_iter3_exitcond_reg_396");
    sc_trace(mVcdFile, i_fu_224_p2, "i_fu_224_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_5_fu_230_p1, "tmp_5_fu_230_p1");
    sc_trace(mVcdFile, tmp_5_reg_405, "tmp_5_reg_405");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_tmp_5_reg_405, "ap_pipeline_reg_pp0_iter1_tmp_5_reg_405");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_5_reg_405, "ap_pipeline_reg_pp0_iter2_tmp_5_reg_405");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_5_reg_405, "ap_pipeline_reg_pp0_iter3_tmp_5_reg_405");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_tmp_5_reg_405, "ap_pipeline_reg_pp0_iter4_tmp_5_reg_405");
    sc_trace(mVcdFile, tmp_22_reg_410, "tmp_22_reg_410");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_22_reg_410, "ap_pipeline_reg_pp0_iter2_tmp_22_reg_410");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_22_reg_410, "ap_pipeline_reg_pp0_iter3_tmp_22_reg_410");
    sc_trace(mVcdFile, notlhs_fu_252_p2, "notlhs_fu_252_p2");
    sc_trace(mVcdFile, notlhs_reg_417, "notlhs_reg_417");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_notlhs_reg_417, "ap_pipeline_reg_pp0_iter2_notlhs_reg_417");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_notlhs_reg_417, "ap_pipeline_reg_pp0_iter3_notlhs_reg_417");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_notlhs_reg_417, "ap_pipeline_reg_pp0_iter4_notlhs_reg_417");
    sc_trace(mVcdFile, notrhs_fu_258_p2, "notrhs_fu_258_p2");
    sc_trace(mVcdFile, notrhs_reg_422, "notrhs_reg_422");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_notrhs_reg_422, "ap_pipeline_reg_pp0_iter2_notrhs_reg_422");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_notrhs_reg_422, "ap_pipeline_reg_pp0_iter3_notrhs_reg_422");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_notrhs_reg_422, "ap_pipeline_reg_pp0_iter4_notrhs_reg_422");
    sc_trace(mVcdFile, tmp_11_fu_294_p2, "tmp_11_fu_294_p2");
    sc_trace(mVcdFile, tmp_11_reg_427, "tmp_11_reg_427");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_tmp_11_reg_427, "ap_pipeline_reg_pp0_iter4_tmp_11_reg_427");
    sc_trace(mVcdFile, grp_fu_142_p2, "grp_fu_142_p2");
    sc_trace(mVcdFile, tmp_13_reg_433, "tmp_13_reg_433");
    sc_trace(mVcdFile, tmp_20_fu_340_p2, "tmp_20_fu_340_p2");
    sc_trace(mVcdFile, tmp_20_reg_438, "tmp_20_reg_438");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, invdar_reg_98, "invdar_reg_98");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, shift_buf_1_2_phi_fu_123_p4, "shift_buf_1_2_phi_fu_123_p4");
    sc_trace(mVcdFile, shift_buf_1_13_phi_fu_135_p4, "shift_buf_1_13_phi_fu_135_p4");
    sc_trace(mVcdFile, shift_buf_fu_70, "shift_buf_fu_70");
    sc_trace(mVcdFile, shift_buf_1_fu_74, "shift_buf_1_fu_74");
    sc_trace(mVcdFile, or_cond_fu_360_p2, "or_cond_fu_360_p2");
    sc_trace(mVcdFile, tmp_s_fu_166_p2, "tmp_s_fu_166_p2");
    sc_trace(mVcdFile, tmp_2_fu_180_p2, "tmp_2_fu_180_p2");
    sc_trace(mVcdFile, tmp_1_fu_172_p3, "tmp_1_fu_172_p3");
    sc_trace(mVcdFile, shift_buf_1_2_to_int_fu_234_p1, "shift_buf_1_2_to_int_fu_234_p1");
    sc_trace(mVcdFile, tmp_8_fu_238_p4, "tmp_8_fu_238_p4");
    sc_trace(mVcdFile, tmp_7_fu_248_p1, "tmp_7_fu_248_p1");
    sc_trace(mVcdFile, shift_buf_1_to_int_fu_264_p1, "shift_buf_1_to_int_fu_264_p1");
    sc_trace(mVcdFile, tmp_6_fu_268_p4, "tmp_6_fu_268_p4");
    sc_trace(mVcdFile, tmp_9_fu_278_p1, "tmp_9_fu_278_p1");
    sc_trace(mVcdFile, notrhs3_fu_288_p2, "notrhs3_fu_288_p2");
    sc_trace(mVcdFile, notlhs2_fu_282_p2, "notlhs2_fu_282_p2");
    sc_trace(mVcdFile, shift_buf_0_to_int_fu_300_p1, "shift_buf_0_to_int_fu_300_p1");
    sc_trace(mVcdFile, tmp_15_fu_303_p4, "tmp_15_fu_303_p4");
    sc_trace(mVcdFile, tmp_16_fu_313_p1, "tmp_16_fu_313_p1");
    sc_trace(mVcdFile, notrhs7_fu_323_p2, "notrhs7_fu_323_p2");
    sc_trace(mVcdFile, notlhs6_fu_317_p2, "notlhs6_fu_317_p2");
    sc_trace(mVcdFile, tmp_17_fu_329_p2, "tmp_17_fu_329_p2");
    sc_trace(mVcdFile, tmp_18_fu_335_p2, "tmp_18_fu_335_p2");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, tmp_10_fu_346_p2, "tmp_10_fu_346_p2");
    sc_trace(mVcdFile, tmp_12_fu_350_p2, "tmp_12_fu_350_p2");
    sc_trace(mVcdFile, tmp_14_fu_355_p2, "tmp_14_fu_355_p2");
    sc_trace(mVcdFile, grp_fu_142_ce, "grp_fu_142_ce");
    sc_trace(mVcdFile, grp_fu_148_ce, "grp_fu_148_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

findpeaks::~findpeaks() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete detect_calls_fcmpbkb_U5;
    delete detect_calls_fcmpbkb_U6;
}

void findpeaks::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv5_4;
}

void findpeaks::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void findpeaks::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_218_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read()))) {
            if (!esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
                ap_enable_reg_pp0_iter2 = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
                ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read()))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read()))) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read()))) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
        invdar_reg_98 = indvarinc_fu_160_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        invdar_reg_98 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
        shift_buf_1_13_reg_130 = shift_buf_0_1_fu_186_p3.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_396.read()))) {
        shift_buf_1_13_reg_130 = tmp_22_reg_410.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
        shift_buf_1_2_reg_120 = shift_buf_1_1_fu_194_p3.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_396.read()))) {
        shift_buf_1_2_reg_120 = shift_buf_1_13_reg_130.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read()))) {
        tmp_3_reg_109 = ap_const_lv20_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_218_p2.read()))) {
        tmp_3_reg_109 = i_fu_224_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        ap_pipeline_reg_pp0_iter1_exitcond_reg_396 = exitcond_reg_396.read();
        ap_pipeline_reg_pp0_iter1_tmp_5_reg_405 = tmp_5_reg_405.read();
        exitcond_reg_396 = exitcond_fu_218_p2.read();
    }
    if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read()))) {
        ap_pipeline_reg_pp0_iter2_exitcond_reg_396 = ap_pipeline_reg_pp0_iter1_exitcond_reg_396.read();
        ap_pipeline_reg_pp0_iter2_notlhs_reg_417 = notlhs_reg_417.read();
        ap_pipeline_reg_pp0_iter2_notrhs_reg_422 = notrhs_reg_422.read();
        ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130 = shift_buf_1_13_reg_130.read();
        ap_pipeline_reg_pp0_iter2_tmp_22_reg_410 = tmp_22_reg_410.read();
        ap_pipeline_reg_pp0_iter2_tmp_5_reg_405 = ap_pipeline_reg_pp0_iter1_tmp_5_reg_405.read();
        ap_pipeline_reg_pp0_iter3_exitcond_reg_396 = ap_pipeline_reg_pp0_iter2_exitcond_reg_396.read();
        ap_pipeline_reg_pp0_iter3_notlhs_reg_417 = ap_pipeline_reg_pp0_iter2_notlhs_reg_417.read();
        ap_pipeline_reg_pp0_iter3_notrhs_reg_422 = ap_pipeline_reg_pp0_iter2_notrhs_reg_422.read();
        ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130 = ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130.read();
        ap_pipeline_reg_pp0_iter3_tmp_22_reg_410 = ap_pipeline_reg_pp0_iter2_tmp_22_reg_410.read();
        ap_pipeline_reg_pp0_iter3_tmp_5_reg_405 = ap_pipeline_reg_pp0_iter2_tmp_5_reg_405.read();
        ap_pipeline_reg_pp0_iter4_notlhs_reg_417 = ap_pipeline_reg_pp0_iter3_notlhs_reg_417.read();
        ap_pipeline_reg_pp0_iter4_notrhs_reg_422 = ap_pipeline_reg_pp0_iter3_notrhs_reg_422.read();
        ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130 = ap_pipeline_reg_pp0_iter3_shift_buf_1_13_reg_130.read();
        ap_pipeline_reg_pp0_iter4_tmp_11_reg_427 = tmp_11_reg_427.read();
        ap_pipeline_reg_pp0_iter4_tmp_5_reg_405 = ap_pipeline_reg_pp0_iter3_tmp_5_reg_405.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_reg_396.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        notlhs_reg_417 = notlhs_fu_252_p2.read();
        notrhs_reg_422 = notrhs_fu_258_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) {
        shift_buf_1_fu_74 = shift_buf_1_1_fu_194_p3.read();
        shift_buf_fu_70 = shift_buf_0_1_fu_186_p3.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter2_exitcond_reg_396.read()))) {
        tmp_11_reg_427 = tmp_11_fu_294_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter3_exitcond_reg_396.read()))) {
        tmp_13_reg_433 = grp_fu_142_p2.read();
        tmp_20_reg_438 = tmp_20_fu_340_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond_reg_396.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        tmp_22_reg_410 = samples_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_218_p2.read()))) {
        tmp_5_reg_405 = tmp_5_fu_230_p1.read();
    }
}

void findpeaks::thread_amplitude_V() {
    amplitude_V = ap_pipeline_reg_pp0_iter4_shift_buf_1_13_reg_130.read();
}

void findpeaks::thread_amplitude_V_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_360_p2.read()))) {
        amplitude_V_ap_vld = ap_const_logic_1;
    } else {
        amplitude_V_ap_vld = ap_const_logic_0;
    }
}

void findpeaks::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(2, 2);
}

void findpeaks::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void findpeaks::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void findpeaks::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(3, 3);
}

void findpeaks::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void findpeaks::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(exitcond_reg_396.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, samples_V_empty_n.read()));
}

void findpeaks::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void findpeaks::thread_ap_enable_pp0() {
    ap_enable_pp0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1));
}

void findpeaks::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void findpeaks::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void findpeaks::thread_exitcond_fu_218_p2() {
    exitcond_fu_218_p2 = (!tmp_3_reg_109.read().is_01() || !ap_const_lv20_927C0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_reg_109.read() == ap_const_lv20_927C0);
}

void findpeaks::thread_grp_fu_142_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        grp_fu_142_ce = ap_const_logic_1;
    } else {
        grp_fu_142_ce = ap_const_logic_0;
    }
}

void findpeaks::thread_grp_fu_148_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        grp_fu_148_ce = ap_const_logic_1;
    } else {
        grp_fu_148_ce = ap_const_logic_0;
    }
}

void findpeaks::thread_i_fu_224_p2() {
    i_fu_224_p2 = (!tmp_3_reg_109.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(tmp_3_reg_109.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void findpeaks::thread_indvarinc_fu_160_p2() {
    indvarinc_fu_160_p2 = (!invdar_reg_98.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(invdar_reg_98.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void findpeaks::thread_locations_V() {
    locations_V = ap_pipeline_reg_pp0_iter4_tmp_5_reg_405.read();
}

void findpeaks::thread_locations_V_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_360_p2.read()))) {
        locations_V_ap_vld = ap_const_logic_1;
    } else {
        locations_V_ap_vld = ap_const_logic_0;
    }
}

void findpeaks::thread_notlhs2_fu_282_p2() {
    notlhs2_fu_282_p2 = (!tmp_6_fu_268_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_268_p4.read() != ap_const_lv8_FF);
}

void findpeaks::thread_notlhs6_fu_317_p2() {
    notlhs6_fu_317_p2 = (!tmp_15_fu_303_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_15_fu_303_p4.read() != ap_const_lv8_FF);
}

void findpeaks::thread_notlhs_fu_252_p2() {
    notlhs_fu_252_p2 = (!tmp_8_fu_238_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_fu_238_p4.read() != ap_const_lv8_FF);
}

void findpeaks::thread_notrhs3_fu_288_p2() {
    notrhs3_fu_288_p2 = (!tmp_9_fu_278_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_9_fu_278_p1.read() == ap_const_lv23_0);
}

void findpeaks::thread_notrhs7_fu_323_p2() {
    notrhs7_fu_323_p2 = (!tmp_16_fu_313_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_16_fu_313_p1.read() == ap_const_lv23_0);
}

void findpeaks::thread_notrhs_fu_258_p2() {
    notrhs_fu_258_p2 = (!tmp_7_fu_248_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_248_p1.read() == ap_const_lv23_0);
}

void findpeaks::thread_or_cond_fu_360_p2() {
    or_cond_fu_360_p2 = (tmp_14_fu_355_p2.read() & tmp_20_reg_438.read());
}

void findpeaks::thread_samples_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_396.read(), ap_const_lv1_0))) {
        samples_V_blk_n = samples_V_empty_n.read();
    } else {
        samples_V_blk_n = ap_const_logic_1;
    }
}

void findpeaks::thread_samples_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_396.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())))) {
        samples_V_read = ap_const_logic_1;
    } else {
        samples_V_read = ap_const_logic_0;
    }
}

void findpeaks::thread_shift_buf_0_1_fu_186_p3() {
    shift_buf_0_1_fu_186_p3 = (!tmp_2_fu_180_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_180_p2.read()[0].to_bool())? shift_buf_fu_70.read(): tmp_1_fu_172_p3.read());
}

void findpeaks::thread_shift_buf_0_to_int_fu_300_p1() {
    shift_buf_0_to_int_fu_300_p1 = ap_pipeline_reg_pp0_iter3_tmp_22_reg_410.read();
}

void findpeaks::thread_shift_buf_1_13_phi_fu_135_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_396.read()))) {
        shift_buf_1_13_phi_fu_135_p4 = tmp_22_reg_410.read();
    } else {
        shift_buf_1_13_phi_fu_135_p4 = shift_buf_1_13_reg_130.read();
    }
}

void findpeaks::thread_shift_buf_1_1_fu_194_p3() {
    shift_buf_1_1_fu_194_p3 = (!tmp_2_fu_180_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_180_p2.read()[0].to_bool())? ap_const_lv32_0: shift_buf_1_fu_74.read());
}

void findpeaks::thread_shift_buf_1_2_phi_fu_123_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_396.read()))) {
        shift_buf_1_2_phi_fu_123_p4 = shift_buf_1_13_reg_130.read();
    } else {
        shift_buf_1_2_phi_fu_123_p4 = shift_buf_1_2_reg_120.read();
    }
}

void findpeaks::thread_shift_buf_1_2_to_int_fu_234_p1() {
    shift_buf_1_2_to_int_fu_234_p1 = shift_buf_1_2_phi_fu_123_p4.read();
}

void findpeaks::thread_shift_buf_1_to_int_fu_264_p1() {
    shift_buf_1_to_int_fu_264_p1 = ap_pipeline_reg_pp0_iter2_shift_buf_1_13_reg_130.read();
}

void findpeaks::thread_tmp_10_fu_346_p2() {
    tmp_10_fu_346_p2 = (ap_pipeline_reg_pp0_iter4_notrhs_reg_422.read() | ap_pipeline_reg_pp0_iter4_notlhs_reg_417.read());
}

void findpeaks::thread_tmp_11_fu_294_p2() {
    tmp_11_fu_294_p2 = (notrhs3_fu_288_p2.read() | notlhs2_fu_282_p2.read());
}

void findpeaks::thread_tmp_12_fu_350_p2() {
    tmp_12_fu_350_p2 = (tmp_10_fu_346_p2.read() & ap_pipeline_reg_pp0_iter4_tmp_11_reg_427.read());
}

void findpeaks::thread_tmp_14_fu_355_p2() {
    tmp_14_fu_355_p2 = (tmp_12_fu_350_p2.read() & tmp_13_reg_433.read());
}

void findpeaks::thread_tmp_15_fu_303_p4() {
    tmp_15_fu_303_p4 = shift_buf_0_to_int_fu_300_p1.read().range(30, 23);
}

void findpeaks::thread_tmp_16_fu_313_p1() {
    tmp_16_fu_313_p1 = shift_buf_0_to_int_fu_300_p1.read().range(23-1, 0);
}

void findpeaks::thread_tmp_17_fu_329_p2() {
    tmp_17_fu_329_p2 = (notrhs7_fu_323_p2.read() | notlhs6_fu_317_p2.read());
}

void findpeaks::thread_tmp_18_fu_335_p2() {
    tmp_18_fu_335_p2 = (tmp_11_reg_427.read() & tmp_17_fu_329_p2.read());
}

void findpeaks::thread_tmp_1_fu_172_p3() {
    tmp_1_fu_172_p3 = (!tmp_s_fu_166_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_s_fu_166_p2.read()[0].to_bool())? ap_const_lv32_0: shift_buf_fu_70.read());
}

void findpeaks::thread_tmp_20_fu_340_p2() {
    tmp_20_fu_340_p2 = (tmp_18_fu_335_p2.read() & grp_fu_148_p2.read());
}

void findpeaks::thread_tmp_2_fu_180_p2() {
    tmp_2_fu_180_p2 = (!invdar_reg_98.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_98.read() == ap_const_lv2_1);
}

void findpeaks::thread_tmp_5_fu_230_p1() {
    tmp_5_fu_230_p1 = esl_zext<32,20>(tmp_3_reg_109.read());
}

void findpeaks::thread_tmp_6_fu_268_p4() {
    tmp_6_fu_268_p4 = shift_buf_1_to_int_fu_264_p1.read().range(30, 23);
}

void findpeaks::thread_tmp_7_fu_248_p1() {
    tmp_7_fu_248_p1 = shift_buf_1_2_to_int_fu_234_p1.read().range(23-1, 0);
}

void findpeaks::thread_tmp_8_fu_238_p4() {
    tmp_8_fu_238_p4 = shift_buf_1_2_to_int_fu_234_p1.read().range(30, 23);
}

void findpeaks::thread_tmp_9_fu_278_p1() {
    tmp_9_fu_278_p1 = shift_buf_1_to_int_fu_264_p1.read().range(23-1, 0);
}

void findpeaks::thread_tmp_fu_202_p2() {
    tmp_fu_202_p2 = (!invdar_reg_98.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_98.read() == ap_const_lv2_2);
}

void findpeaks::thread_tmp_s_fu_166_p2() {
    tmp_s_fu_166_p2 = (!invdar_reg_98.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_98.read() == ap_const_lv2_0);
}

void findpeaks::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_202_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())) && !(esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

