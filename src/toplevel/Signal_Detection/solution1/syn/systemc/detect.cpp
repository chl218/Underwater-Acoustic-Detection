// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "detect.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic detect::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic detect::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> detect::ap_ST_fsm_state1 = "1";
const sc_lv<3> detect::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> detect::ap_ST_fsm_state8 = "100";
const sc_lv<32> detect::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> detect::ap_const_lv1_1 = "1";
const bool detect::ap_const_boolean_1 = true;
const sc_lv<32> detect::ap_const_lv32_1 = "1";
const sc_lv<1> detect::ap_const_lv1_0 = "0";
const sc_lv<32> detect::ap_const_lv32_2 = "10";
const sc_lv<20> detect::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<23> detect::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<20> detect::ap_const_lv20_927C0 = "10010010011111000000";
const sc_lv<20> detect::ap_const_lv20_1 = "1";
const sc_lv<32> detect::ap_const_lv32_17 = "10111";
const sc_lv<32> detect::ap_const_lv32_1E = "11110";
const sc_lv<8> detect::ap_const_lv8_FF = "11111111";
const sc_lv<5> detect::ap_const_lv5_2 = "10";

detect::detect(sc_module_name name) : sc_module(name), mVcdFile(0) {
    detect_calls_fcmpbkb_x_U14 = new detect_calls_fcmpbkb<1,4,32,32,1>("detect_calls_fcmpbkb_x_U14");
    detect_calls_fcmpbkb_x_U14->clk(ap_clk);
    detect_calls_fcmpbkb_x_U14->reset(ap_rst);
    detect_calls_fcmpbkb_x_U14->din0(signals_V_dout);
    detect_calls_fcmpbkb_x_U14->din1(threshold_x);
    detect_calls_fcmpbkb_x_U14->ce(grp_fu_113_ce);
    detect_calls_fcmpbkb_x_U14->opcode(ap_var_for_const0);
    detect_calls_fcmpbkb_x_U14->dout(grp_fu_113_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( loc_V_full_n );
    sensitive << ( tmp_28_reg_287 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_currAmp_to_int_fu_172_p1);
    sensitive << ( ap_pipeline_reg_pp0_iter3_tmp_29_reg_280 );

    SC_METHOD(thread_exitcond_i_i_fu_141_p2);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_30_reg_102 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_113_ce);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state7 );

    SC_METHOD(thread_hits_out_blk_n);
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_hits_out_din);
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( hits_def_channel_fu_62 );

    SC_METHOD(thread_hits_out_write);
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_i_fu_147_p2);
    sensitive << ( tmp_30_reg_102 );

    SC_METHOD(thread_loc_V_blk_n);
    sensitive << ( loc_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_28_reg_287 );

    SC_METHOD(thread_loc_V_din);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_28_reg_287 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_pipeline_reg_pp0_iter4_tmp_6_reg_270 );

    SC_METHOD(thread_loc_V_write);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( tmp_28_reg_287 );
    sensitive << ( ap_block_state7 );

    SC_METHOD(thread_notlhs1_fu_166_p2);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_i_i_fu_141_p2 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_22_fu_157_p4 );

    SC_METHOD(thread_notlhs_fu_189_p2);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp_21_fu_175_p4 );

    SC_METHOD(thread_notrhs2_fu_130_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1 );
    sensitive << ( tmp_fu_126_p1 );

    SC_METHOD(thread_notrhs_fu_195_p2);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( tmp_24_fu_185_p1 );

    SC_METHOD(thread_p_read_to_int_fu_122_p1);
    sensitive << ( threshold_x );

    SC_METHOD(thread_signals_V_blk_n);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_signals_V_read);
    sensitive << ( signals_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state7 );

    SC_METHOD(thread_tmp_14_i_i_fu_223_p2);
    sensitive << ( hits_def_channel_fu_62 );

    SC_METHOD(thread_tmp_21_fu_175_p4);
    sensitive << ( currAmp_to_int_fu_172_p1 );

    SC_METHOD(thread_tmp_22_fu_157_p4);
    sensitive << ( p_read_to_int_reg_251 );

    SC_METHOD(thread_tmp_23_fu_201_p2);
    sensitive << ( notrhs_fu_195_p2 );
    sensitive << ( notlhs_fu_189_p2 );

    SC_METHOD(thread_tmp_24_fu_185_p1);
    sensitive << ( currAmp_to_int_fu_172_p1 );

    SC_METHOD(thread_tmp_25_fu_207_p2);
    sensitive << ( notrhs2_reg_256 );
    sensitive << ( ap_pipeline_reg_pp0_iter3_notlhs1_reg_275 );

    SC_METHOD(thread_tmp_26_fu_211_p2);
    sensitive << ( tmp_23_fu_201_p2 );
    sensitive << ( tmp_25_fu_207_p2 );

    SC_METHOD(thread_tmp_28_fu_217_p2);
    sensitive << ( tmp_26_fu_211_p2 );
    sensitive << ( grp_fu_113_p2 );

    SC_METHOD(thread_tmp_6_fu_153_p1);
    sensitive << ( tmp_30_reg_102 );

    SC_METHOD(thread_tmp_fu_126_p1);
    sensitive << ( p_read_to_int_fu_122_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( signals_V_empty_n );
    sensitive << ( hits_out_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_state1 );
    sensitive << ( exitcond_i_i_fu_141_p2 );
    sensitive << ( ap_block_state7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "detect_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, signals_V_dout, "(port)signals_V_dout");
    sc_trace(mVcdFile, signals_V_empty_n, "(port)signals_V_empty_n");
    sc_trace(mVcdFile, signals_V_read, "(port)signals_V_read");
    sc_trace(mVcdFile, threshold_x, "(port)threshold_x");
    sc_trace(mVcdFile, loc_V_din, "(port)loc_V_din");
    sc_trace(mVcdFile, loc_V_full_n, "(port)loc_V_full_n");
    sc_trace(mVcdFile, loc_V_write, "(port)loc_V_write");
    sc_trace(mVcdFile, hits_out_din, "(port)hits_out_din");
    sc_trace(mVcdFile, hits_out_full_n, "(port)hits_out_full_n");
    sc_trace(mVcdFile, hits_out_write, "(port)hits_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, signals_V_blk_n, "signals_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, loc_V_blk_n, "loc_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, tmp_28_reg_287, "tmp_28_reg_287");
    sc_trace(mVcdFile, hits_out_blk_n, "hits_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_30_reg_102, "tmp_30_reg_102");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_read_to_int_fu_122_p1, "p_read_to_int_fu_122_p1");
    sc_trace(mVcdFile, p_read_to_int_reg_251, "p_read_to_int_reg_251");
    sc_trace(mVcdFile, notrhs2_fu_130_p2, "notrhs2_fu_130_p2");
    sc_trace(mVcdFile, notrhs2_reg_256, "notrhs2_reg_256");
    sc_trace(mVcdFile, exitcond_i_i_fu_141_p2, "exitcond_i_i_fu_141_p2");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, i_fu_147_p2, "i_fu_147_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_6_fu_153_p1, "tmp_6_fu_153_p1");
    sc_trace(mVcdFile, tmp_6_reg_270, "tmp_6_reg_270");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_tmp_6_reg_270, "ap_pipeline_reg_pp0_iter1_tmp_6_reg_270");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_6_reg_270, "ap_pipeline_reg_pp0_iter2_tmp_6_reg_270");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_6_reg_270, "ap_pipeline_reg_pp0_iter3_tmp_6_reg_270");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_tmp_6_reg_270, "ap_pipeline_reg_pp0_iter4_tmp_6_reg_270");
    sc_trace(mVcdFile, notlhs1_fu_166_p2, "notlhs1_fu_166_p2");
    sc_trace(mVcdFile, notlhs1_reg_275, "notlhs1_reg_275");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_notlhs1_reg_275, "ap_pipeline_reg_pp0_iter1_notlhs1_reg_275");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_notlhs1_reg_275, "ap_pipeline_reg_pp0_iter2_notlhs1_reg_275");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_notlhs1_reg_275, "ap_pipeline_reg_pp0_iter3_notlhs1_reg_275");
    sc_trace(mVcdFile, tmp_29_reg_280, "tmp_29_reg_280");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_tmp_29_reg_280, "ap_pipeline_reg_pp0_iter2_tmp_29_reg_280");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_tmp_29_reg_280, "ap_pipeline_reg_pp0_iter3_tmp_29_reg_280");
    sc_trace(mVcdFile, tmp_28_fu_217_p2, "tmp_28_fu_217_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, hits_def_channel_fu_62, "hits_def_channel_fu_62");
    sc_trace(mVcdFile, tmp_14_i_i_fu_223_p2, "tmp_14_i_i_fu_223_p2");
    sc_trace(mVcdFile, tmp_fu_126_p1, "tmp_fu_126_p1");
    sc_trace(mVcdFile, tmp_22_fu_157_p4, "tmp_22_fu_157_p4");
    sc_trace(mVcdFile, currAmp_to_int_fu_172_p1, "currAmp_to_int_fu_172_p1");
    sc_trace(mVcdFile, tmp_21_fu_175_p4, "tmp_21_fu_175_p4");
    sc_trace(mVcdFile, tmp_24_fu_185_p1, "tmp_24_fu_185_p1");
    sc_trace(mVcdFile, notrhs_fu_195_p2, "notrhs_fu_195_p2");
    sc_trace(mVcdFile, notlhs_fu_189_p2, "notlhs_fu_189_p2");
    sc_trace(mVcdFile, tmp_23_fu_201_p2, "tmp_23_fu_201_p2");
    sc_trace(mVcdFile, tmp_25_fu_207_p2, "tmp_25_fu_207_p2");
    sc_trace(mVcdFile, tmp_26_fu_211_p2, "tmp_26_fu_211_p2");
    sc_trace(mVcdFile, grp_fu_113_p2, "grp_fu_113_p2");
    sc_trace(mVcdFile, grp_fu_113_ce, "grp_fu_113_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

detect::~detect() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete detect_calls_fcmpbkb_x_U14;
}

void detect::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv5_2;
}

void detect::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, hits_out_full_n.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read())))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read())))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read())))) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read())))) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         !esl_seteq<1,1,1>(tmp_28_reg_287.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))))) {
        hits_def_channel_fu_62 = tmp_14_i_i_fu_223_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        hits_def_channel_fu_62 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()))) {
        tmp_30_reg_102 = i_fu_147_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        tmp_30_reg_102 = ap_const_lv20_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))))) {
        ap_pipeline_reg_pp0_iter1_notlhs1_reg_275 = notlhs1_reg_275.read();
        ap_pipeline_reg_pp0_iter1_tmp_6_reg_270 = tmp_6_reg_270.read();
        tmp_29_reg_280 = signals_V_dout.read();
    }
    if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read())))) {
        ap_pipeline_reg_pp0_iter2_notlhs1_reg_275 = ap_pipeline_reg_pp0_iter1_notlhs1_reg_275.read();
        ap_pipeline_reg_pp0_iter2_tmp_29_reg_280 = tmp_29_reg_280.read();
        ap_pipeline_reg_pp0_iter2_tmp_6_reg_270 = ap_pipeline_reg_pp0_iter1_tmp_6_reg_270.read();
        ap_pipeline_reg_pp0_iter3_notlhs1_reg_275 = ap_pipeline_reg_pp0_iter2_notlhs1_reg_275.read();
        ap_pipeline_reg_pp0_iter3_tmp_29_reg_280 = ap_pipeline_reg_pp0_iter2_tmp_29_reg_280.read();
        ap_pipeline_reg_pp0_iter3_tmp_6_reg_270 = ap_pipeline_reg_pp0_iter2_tmp_6_reg_270.read();
        ap_pipeline_reg_pp0_iter4_tmp_6_reg_270 = ap_pipeline_reg_pp0_iter3_tmp_6_reg_270.read();
        tmp_28_reg_287 = tmp_28_fu_217_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()))) {
        notlhs1_reg_275 = notlhs1_fu_166_p2.read();
        tmp_6_reg_270 = tmp_6_fu_153_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        notrhs2_reg_256 = notrhs2_fu_130_p2.read();
        p_read_to_int_reg_251 = p_read_to_int_fu_122_p1.read();
    }
}

void detect::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void detect::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void detect::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(2, 2);
}

void detect::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void detect::thread_ap_block_state7() {
    ap_block_state7 = (!esl_seteq<1,1,1>(tmp_28_reg_287.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, loc_V_full_n.read()));
}

void detect::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, hits_out_full_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void detect::thread_ap_enable_pp0() {
    ap_enable_pp0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1));
}

void detect::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void detect::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, hits_out_full_n.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void detect::thread_currAmp_to_int_fu_172_p1() {
    currAmp_to_int_fu_172_p1 = ap_pipeline_reg_pp0_iter3_tmp_29_reg_280.read();
}

void detect::thread_exitcond_i_i_fu_141_p2() {
    exitcond_i_i_fu_141_p2 = (!tmp_30_reg_102.read().is_01() || !ap_const_lv20_927C0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_30_reg_102.read() == ap_const_lv20_927C0);
}

void detect::thread_grp_fu_113_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))))) {
        grp_fu_113_ce = ap_const_logic_1;
    } else {
        grp_fu_113_ce = ap_const_logic_0;
    }
}

void detect::thread_hits_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) {
        hits_out_blk_n = hits_out_full_n.read();
    } else {
        hits_out_blk_n = ap_const_logic_1;
    }
}

void detect::thread_hits_out_din() {
    hits_out_din = hits_def_channel_fu_62.read();
}

void detect::thread_hits_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, hits_out_full_n.read()))) {
        hits_out_write = ap_const_logic_1;
    } else {
        hits_out_write = ap_const_logic_0;
    }
}

void detect::thread_i_fu_147_p2() {
    i_fu_147_p2 = (!tmp_30_reg_102.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(tmp_30_reg_102.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void detect::thread_loc_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         !esl_seteq<1,1,1>(tmp_28_reg_287.read(), ap_const_lv1_0))) {
        loc_V_blk_n = loc_V_full_n.read();
    } else {
        loc_V_blk_n = ap_const_logic_1;
    }
}

void detect::thread_loc_V_din() {
    loc_V_din = ap_pipeline_reg_pp0_iter4_tmp_6_reg_270.read();
}

void detect::thread_loc_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         !esl_seteq<1,1,1>(tmp_28_reg_287.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))))) {
        loc_V_write = ap_const_logic_1;
    } else {
        loc_V_write = ap_const_logic_0;
    }
}

void detect::thread_notlhs1_fu_166_p2() {
    notlhs1_fu_166_p2 = (!tmp_22_fu_157_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_22_fu_157_p4.read() != ap_const_lv8_FF);
}

void detect::thread_notlhs_fu_189_p2() {
    notlhs_fu_189_p2 = (!tmp_21_fu_175_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_21_fu_175_p4.read() != ap_const_lv8_FF);
}

void detect::thread_notrhs2_fu_130_p2() {
    notrhs2_fu_130_p2 = (!tmp_fu_126_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_126_p1.read() == ap_const_lv23_0);
}

void detect::thread_notrhs_fu_195_p2() {
    notrhs_fu_195_p2 = (!tmp_24_fu_185_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_24_fu_185_p1.read() == ap_const_lv23_0);
}

void detect::thread_p_read_to_int_fu_122_p1() {
    p_read_to_int_fu_122_p1 = threshold_x.read();
}

void detect::thread_signals_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        signals_V_blk_n = signals_V_empty_n.read();
    } else {
        signals_V_blk_n = ap_const_logic_1;
    }
}

void detect::thread_signals_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))))) {
        signals_V_read = ap_const_logic_1;
    } else {
        signals_V_read = ap_const_logic_0;
    }
}

void detect::thread_tmp_14_i_i_fu_223_p2() {
    tmp_14_i_i_fu_223_p2 = (!hits_def_channel_fu_62.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(hits_def_channel_fu_62.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void detect::thread_tmp_21_fu_175_p4() {
    tmp_21_fu_175_p4 = currAmp_to_int_fu_172_p1.read().range(30, 23);
}

void detect::thread_tmp_22_fu_157_p4() {
    tmp_22_fu_157_p4 = p_read_to_int_reg_251.read().range(30, 23);
}

void detect::thread_tmp_23_fu_201_p2() {
    tmp_23_fu_201_p2 = (notrhs_fu_195_p2.read() | notlhs_fu_189_p2.read());
}

void detect::thread_tmp_24_fu_185_p1() {
    tmp_24_fu_185_p1 = currAmp_to_int_fu_172_p1.read().range(23-1, 0);
}

void detect::thread_tmp_25_fu_207_p2() {
    tmp_25_fu_207_p2 = (notrhs2_reg_256.read() | ap_pipeline_reg_pp0_iter3_notlhs1_reg_275.read());
}

void detect::thread_tmp_26_fu_211_p2() {
    tmp_26_fu_211_p2 = (tmp_23_fu_201_p2.read() & tmp_25_fu_207_p2.read());
}

void detect::thread_tmp_28_fu_217_p2() {
    tmp_28_fu_217_p2 = (tmp_26_fu_211_p2.read() & grp_fu_113_p2.read());
}

void detect::thread_tmp_6_fu_153_p1() {
    tmp_6_fu_153_p1 = esl_zext<32,20>(tmp_30_reg_102.read());
}

void detect::thread_tmp_fu_126_p1() {
    tmp_fu_126_p1 = p_read_to_int_fu_122_p1.read().range(23-1, 0);
}

void detect::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())) && !(!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())) || (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, signals_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_141_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, hits_out_full_n.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

