// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "threshold.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic threshold::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic threshold::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<50> threshold::ap_ST_fsm_state1 = "1";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage4 = "100000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage5 = "1000000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage6 = "10000000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage7 = "100000000";
const sc_lv<50> threshold::ap_ST_fsm_pp0_stage8 = "1000000000";
const sc_lv<50> threshold::ap_ST_fsm_state13 = "10000000000";
const sc_lv<50> threshold::ap_ST_fsm_state14 = "100000000000";
const sc_lv<50> threshold::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state20 = "100000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state21 = "1000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state22 = "10000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state23 = "100000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state24 = "1000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state25 = "10000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state26 = "100000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state27 = "1000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state28 = "10000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state29 = "100000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state30 = "1000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state31 = "10000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state32 = "100000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state33 = "1000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state34 = "10000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state35 = "100000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state36 = "1000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state37 = "10000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state38 = "100000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state39 = "1000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state40 = "10000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state41 = "100000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state42 = "1000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state43 = "10000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state44 = "100000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state45 = "1000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state46 = "10000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state47 = "100000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state48 = "1000000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state49 = "10000000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state50 = "100000000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state51 = "1000000000000000000000000000000000000000000000000";
const sc_lv<50> threshold::ap_ST_fsm_state52 = "10000000000000000000000000000000000000000000000000";
const sc_lv<32> threshold::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> threshold::ap_const_lv1_1 = "1";
const bool threshold::ap_const_boolean_1 = true;
const sc_lv<32> threshold::ap_const_lv32_2 = "10";
const sc_lv<1> threshold::ap_const_lv1_0 = "0";
const sc_lv<32> threshold::ap_const_lv32_1 = "1";
const sc_lv<32> threshold::ap_const_lv32_27 = "100111";
const sc_lv<32> threshold::ap_const_lv32_2C = "101100";
const sc_lv<32> threshold::ap_const_lv32_9 = "1001";
const sc_lv<20> threshold::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<32> threshold::ap_const_lv32_3 = "11";
const sc_lv<32> threshold::ap_const_lv32_43960000 = "1000011100101100000000000000000";
const sc_lv<32> threshold::ap_const_lv32_40A00000 = "1000000101000000000000000000000";
const sc_lv<32> threshold::ap_const_lv32_28 = "101000";
const sc_lv<32> threshold::ap_const_lv32_2D = "101101";
const sc_lv<32> threshold::ap_const_lv32_44FA0000 = "1000100111110100000000000000000";
const sc_lv<32> threshold::ap_const_lv32_A = "1010";
const sc_lv<20> threshold::ap_const_lv20_927C0 = "10010010011111000000";
const sc_lv<20> threshold::ap_const_lv20_1 = "1";
const sc_lv<32> threshold::ap_const_lv32_4 = "100";
const sc_lv<32> threshold::ap_const_lv32_5 = "101";
const sc_lv<32> threshold::ap_const_lv32_6 = "110";
const sc_lv<32> threshold::ap_const_lv32_7 = "111";
const sc_lv<32> threshold::ap_const_lv32_8 = "1000";
const sc_lv<32> threshold::ap_const_lv32_31 = "110001";

threshold::threshold(sc_module_name name) : sc_module(name), mVcdFile(0) {
    detect_calls_faddcud_U10 = new detect_calls_faddcud<1,9,32,32,32>("detect_calls_faddcud_U10");
    detect_calls_faddcud_U10->clk(ap_clk);
    detect_calls_faddcud_U10->reset(ap_rst);
    detect_calls_faddcud_U10->din0(sum_reg_52);
    detect_calls_faddcud_U10->din1(tmp_2_reg_113);
    detect_calls_faddcud_U10->ce(grp_fu_75_ce);
    detect_calls_faddcud_U10->dout(grp_fu_75_p2);
    detect_calls_fmuldEe_U11 = new detect_calls_fmuldEe<1,5,32,32,32>("detect_calls_fmuldEe_U11");
    detect_calls_fmuldEe_U11->clk(ap_clk);
    detect_calls_fmuldEe_U11->reset(ap_rst);
    detect_calls_fmuldEe_U11->din0(grp_fu_80_p0);
    detect_calls_fmuldEe_U11->din1(grp_fu_80_p1);
    detect_calls_fmuldEe_U11->ce(ap_var_for_const0);
    detect_calls_fmuldEe_U11->dout(grp_fu_80_p2);
    detect_calls_fdiveOg_U12 = new detect_calls_fdiveOg<1,30,32,32,32>("detect_calls_fdiveOg_U12");
    detect_calls_fdiveOg_U12->clk(ap_clk);
    detect_calls_fdiveOg_U12->reset(ap_rst);
    detect_calls_fdiveOg_U12->din0(sum_reg_52);
    detect_calls_fdiveOg_U12->din1(ap_var_for_const1);
    detect_calls_fdiveOg_U12->ce(ap_var_for_const0);
    detect_calls_fdiveOg_U12->dout(grp_fu_86_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_amplitude_V_blk_n);
    sensitive << ( amplitude_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_reg_104 );

    SC_METHOD(thread_amplitude_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_reg_104 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( amplitude_V_empty_n );
    sensitive << ( exitcond_reg_104 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_80_p2 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_exitcond_fu_92_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_phi_fu_68_p4 );

    SC_METHOD(thread_grp_fu_75_ce);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );

    SC_METHOD(thread_grp_fu_80_p0);
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_128 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_grp_fu_80_p1);
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_i_1_fu_98_p2);
    sensitive << ( i_phi_fu_68_p4 );

    SC_METHOD(thread_i_phi_fu_68_p4);
    sensitive << ( exitcond_reg_104 );
    sensitive << ( i_reg_64 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_1_reg_108 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_92_p2 );
    sensitive << ( ap_block_state3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000000000000000000000000000000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "threshold_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, amplitude_V_dout, "(port)amplitude_V_dout");
    sc_trace(mVcdFile, amplitude_V_empty_n, "(port)amplitude_V_empty_n");
    sc_trace(mVcdFile, amplitude_V_read, "(port)amplitude_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, amplitude_V_blk_n, "amplitude_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, exitcond_reg_104, "exitcond_reg_104");
    sc_trace(mVcdFile, sum_reg_52, "sum_reg_52");
    sc_trace(mVcdFile, i_reg_64, "i_reg_64");
    sc_trace(mVcdFile, exitcond_fu_92_p2, "exitcond_fu_92_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_reg_104, "ap_pipeline_reg_pp0_iter1_exitcond_reg_104");
    sc_trace(mVcdFile, i_1_fu_98_p2, "i_1_fu_98_p2");
    sc_trace(mVcdFile, i_1_reg_108, "i_1_reg_108");
    sc_trace(mVcdFile, tmp_2_reg_113, "tmp_2_reg_113");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, grp_fu_75_p2, "grp_fu_75_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, grp_fu_86_p2, "grp_fu_86_p2");
    sc_trace(mVcdFile, tmp_reg_123, "tmp_reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_fu_80_p2, "grp_fu_80_p2");
    sc_trace(mVcdFile, tmp_1_reg_128, "tmp_1_reg_128");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage8, "ap_CS_fsm_pp0_stage8");
    sc_trace(mVcdFile, i_phi_fu_68_p4, "i_phi_fu_68_p4");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, grp_fu_80_p0, "grp_fu_80_p0");
    sc_trace(mVcdFile, grp_fu_80_p1, "grp_fu_80_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_75_ce, "grp_fu_75_ce");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

threshold::~threshold() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete detect_calls_faddcud_U10;
    delete detect_calls_fmuldEe_U11;
    delete detect_calls_fdiveOg_U12;
}

void threshold::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void threshold::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_44FA0000;
}

void threshold::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state52.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage8.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage8.read()) && 
                     !esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_reg_64 = i_1_reg_108.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        i_reg_64 = ap_const_lv20_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_104.read()))) {
        sum_reg_52 = grp_fu_75_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        sum_reg_52 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_pipeline_reg_pp0_iter1_exitcond_reg_104 = exitcond_reg_104.read();
        exitcond_reg_104 = exitcond_fu_92_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()))) {
        i_1_reg_108 = i_1_fu_98_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state47.read())) {
        tmp_1_reg_128 = grp_fu_80_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        tmp_2_reg_113 = amplitude_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state42.read())) {
        tmp_reg_123 = grp_fu_86_p2.read();
    }
}

void threshold::thread_amplitude_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0))) {
        amplitude_V_blk_n = amplitude_V_empty_n.read();
    } else {
        amplitude_V_blk_n = ap_const_logic_1;
    }
}

void threshold::thread_amplitude_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        amplitude_V_read = ap_const_logic_1;
    } else {
        amplitude_V_read = ap_const_logic_0;
    }
}

void threshold::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void threshold::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read().range(2, 2);
}

void threshold::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read().range(3, 3);
}

void threshold::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read().range(4, 4);
}

void threshold::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read().range(5, 5);
}

void threshold::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read().range(6, 6);
}

void threshold::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read().range(7, 7);
}

void threshold::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read().range(8, 8);
}

void threshold::thread_ap_CS_fsm_pp0_stage8() {
    ap_CS_fsm_pp0_stage8 = ap_CS_fsm.read().range(9, 9);
}

void threshold::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void threshold::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(10, 10);
}

void threshold::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read().range(39, 39);
}

void threshold::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read().range(40, 40);
}

void threshold::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read().range(44, 44);
}

void threshold::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read().range(45, 45);
}

void threshold::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read().range(49, 49);
}

void threshold::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void threshold::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, amplitude_V_empty_n.read()));
}

void threshold::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state52.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void threshold::thread_ap_enable_pp0() {
    ap_enable_pp0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void threshold::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void threshold::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state52.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void threshold::thread_ap_return() {
    ap_return = grp_fu_80_p2.read();
}

void threshold::thread_exitcond_fu_92_p2() {
    exitcond_fu_92_p2 = (!i_phi_fu_68_p4.read().is_01() || !ap_const_lv20_927C0.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_68_p4.read() == ap_const_lv20_927C0);
}

void threshold::thread_grp_fu_75_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read()))) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage8.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage2.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage3.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage4.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage5.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage6.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage7.read()))) {
        grp_fu_75_ce = ap_const_logic_1;
    } else {
        grp_fu_75_ce = ap_const_logic_0;
    }
}

void threshold::thread_grp_fu_80_p0() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state48.read())) {
        grp_fu_80_p0 = tmp_1_reg_128.read();
    } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())) {
        grp_fu_80_p0 = tmp_reg_123.read();
    } else {
        grp_fu_80_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void threshold::thread_grp_fu_80_p1() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state48.read())) {
        grp_fu_80_p1 = ap_const_lv32_40A00000;
    } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state43.read())) {
        grp_fu_80_p1 = ap_const_lv32_43960000;
    } else {
        grp_fu_80_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void threshold::thread_i_1_fu_98_p2() {
    i_1_fu_98_p2 = (!i_phi_fu_68_p4.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(i_phi_fu_68_p4.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void threshold::thread_i_phi_fu_68_p4() {
    if ((esl_seteq<1,1,1>(exitcond_reg_104.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_phi_fu_68_p4 = i_1_reg_108.read();
    } else {
        i_phi_fu_68_p4 = i_reg_64.read();
    }
}

void threshold::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && !(esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<50>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

