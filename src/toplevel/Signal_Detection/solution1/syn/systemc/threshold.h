// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _threshold_HH_
#define _threshold_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "detect_calls_faddcud.h"
#include "detect_calls_fmuldEe.h"
#include "detect_calls_fdiveOg.h"

namespace ap_rtl {

struct threshold : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > amplitude_V_dout;
    sc_in< sc_logic > amplitude_V_empty_n;
    sc_out< sc_logic > amplitude_V_read;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    threshold(sc_module_name name);
    SC_HAS_PROCESS(threshold);

    ~threshold();

    sc_trace_file* mVcdFile;

    detect_calls_faddcud<1,9,32,32,32>* detect_calls_faddcud_U10;
    detect_calls_fmuldEe<1,5,32,32,32>* detect_calls_fmuldEe_U11;
    detect_calls_fdiveOg<1,30,32,32,32>* detect_calls_fdiveOg_U12;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<50> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > amplitude_V_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > exitcond_reg_104;
    sc_signal< sc_lv<32> > sum_reg_52;
    sc_signal< sc_lv<20> > i_reg_64;
    sc_signal< sc_lv<1> > exitcond_fu_92_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_exitcond_reg_104;
    sc_signal< sc_lv<20> > i_1_fu_98_p2;
    sc_signal< sc_lv<20> > i_1_reg_108;
    sc_signal< sc_lv<32> > tmp_2_reg_113;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > grp_fu_75_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > grp_fu_86_p2;
    sc_signal< sc_lv<32> > tmp_reg_123;
    sc_signal< sc_lv<1> > ap_CS_fsm_state42;
    sc_signal< sc_lv<32> > grp_fu_80_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_128;
    sc_signal< sc_lv<1> > ap_CS_fsm_state47;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage8;
    sc_signal< sc_lv<20> > i_phi_fu_68_p4;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage2;
    sc_signal< sc_lv<32> > grp_fu_80_p0;
    sc_signal< sc_lv<32> > grp_fu_80_p1;
    sc_signal< sc_lv<1> > ap_CS_fsm_state43;
    sc_signal< sc_lv<1> > ap_CS_fsm_state48;
    sc_signal< sc_lv<1> > ap_CS_fsm_state13;
    sc_signal< sc_logic > grp_fu_75_ce;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage3;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage4;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage5;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage6;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage7;
    sc_signal< sc_lv<1> > ap_CS_fsm_state52;
    sc_signal< sc_lv<50> > ap_NS_fsm;
    sc_signal< bool > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<50> ap_ST_fsm_state1;
    static const sc_lv<50> ap_ST_fsm_pp0_stage0;
    static const sc_lv<50> ap_ST_fsm_pp0_stage1;
    static const sc_lv<50> ap_ST_fsm_pp0_stage2;
    static const sc_lv<50> ap_ST_fsm_pp0_stage3;
    static const sc_lv<50> ap_ST_fsm_pp0_stage4;
    static const sc_lv<50> ap_ST_fsm_pp0_stage5;
    static const sc_lv<50> ap_ST_fsm_pp0_stage6;
    static const sc_lv<50> ap_ST_fsm_pp0_stage7;
    static const sc_lv<50> ap_ST_fsm_pp0_stage8;
    static const sc_lv<50> ap_ST_fsm_state13;
    static const sc_lv<50> ap_ST_fsm_state14;
    static const sc_lv<50> ap_ST_fsm_state15;
    static const sc_lv<50> ap_ST_fsm_state16;
    static const sc_lv<50> ap_ST_fsm_state17;
    static const sc_lv<50> ap_ST_fsm_state18;
    static const sc_lv<50> ap_ST_fsm_state19;
    static const sc_lv<50> ap_ST_fsm_state20;
    static const sc_lv<50> ap_ST_fsm_state21;
    static const sc_lv<50> ap_ST_fsm_state22;
    static const sc_lv<50> ap_ST_fsm_state23;
    static const sc_lv<50> ap_ST_fsm_state24;
    static const sc_lv<50> ap_ST_fsm_state25;
    static const sc_lv<50> ap_ST_fsm_state26;
    static const sc_lv<50> ap_ST_fsm_state27;
    static const sc_lv<50> ap_ST_fsm_state28;
    static const sc_lv<50> ap_ST_fsm_state29;
    static const sc_lv<50> ap_ST_fsm_state30;
    static const sc_lv<50> ap_ST_fsm_state31;
    static const sc_lv<50> ap_ST_fsm_state32;
    static const sc_lv<50> ap_ST_fsm_state33;
    static const sc_lv<50> ap_ST_fsm_state34;
    static const sc_lv<50> ap_ST_fsm_state35;
    static const sc_lv<50> ap_ST_fsm_state36;
    static const sc_lv<50> ap_ST_fsm_state37;
    static const sc_lv<50> ap_ST_fsm_state38;
    static const sc_lv<50> ap_ST_fsm_state39;
    static const sc_lv<50> ap_ST_fsm_state40;
    static const sc_lv<50> ap_ST_fsm_state41;
    static const sc_lv<50> ap_ST_fsm_state42;
    static const sc_lv<50> ap_ST_fsm_state43;
    static const sc_lv<50> ap_ST_fsm_state44;
    static const sc_lv<50> ap_ST_fsm_state45;
    static const sc_lv<50> ap_ST_fsm_state46;
    static const sc_lv<50> ap_ST_fsm_state47;
    static const sc_lv<50> ap_ST_fsm_state48;
    static const sc_lv<50> ap_ST_fsm_state49;
    static const sc_lv<50> ap_ST_fsm_state50;
    static const sc_lv<50> ap_ST_fsm_state51;
    static const sc_lv<50> ap_ST_fsm_state52;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_43960000;
    static const sc_lv<32> ap_const_lv32_40A00000;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_44FA0000;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<20> ap_const_lv20_927C0;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_31;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_amplitude_V_blk_n();
    void thread_amplitude_V_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_CS_fsm_pp0_stage8();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state42();
    void thread_ap_CS_fsm_state43();
    void thread_ap_CS_fsm_state47();
    void thread_ap_CS_fsm_state48();
    void thread_ap_CS_fsm_state52();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_exitcond_fu_92_p2();
    void thread_grp_fu_75_ce();
    void thread_grp_fu_80_p0();
    void thread_grp_fu_80_p1();
    void thread_i_1_fu_98_p2();
    void thread_i_phi_fu_68_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
