// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "duplicate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic duplicate::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic duplicate::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> duplicate::ap_ST_fsm_state1 = "1";
const sc_lv<3> duplicate::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> duplicate::ap_ST_fsm_state4 = "100";
const bool duplicate::ap_const_boolean_1 = true;
const sc_lv<32> duplicate::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> duplicate::ap_const_lv1_1 = "1";
const sc_lv<32> duplicate::ap_const_lv32_1 = "1";
const sc_lv<1> duplicate::ap_const_lv1_0 = "0";
const sc_lv<20> duplicate::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<20> duplicate::ap_const_lv20_927C0 = "10010010011111000000";
const sc_lv<20> duplicate::ap_const_lv20_1 = "1";
const sc_lv<32> duplicate::ap_const_lv32_2 = "10";

duplicate::duplicate(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( dat_i_V_empty_n );
    sensitive << ( dat_1_o_V_full_n );
    sensitive << ( dat_2_o_V_full_n );
    sensitive << ( dat_3_o_V_full_n );
    sensitive << ( dat_4_o_V_full_n );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_dat_1_o_V_blk_n);
    sensitive << ( dat_1_o_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_dat_1_o_V_din);
    sensitive << ( dat_i_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_1_o_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_2_o_V_blk_n);
    sensitive << ( dat_2_o_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_dat_2_o_V_din);
    sensitive << ( dat_i_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_2_o_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_3_o_V_blk_n);
    sensitive << ( dat_3_o_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_dat_3_o_V_din);
    sensitive << ( dat_i_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_3_o_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_4_o_V_blk_n);
    sensitive << ( dat_4_o_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_dat_4_o_V_din);
    sensitive << ( dat_i_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_4_o_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_dat_i_V_blk_n);
    sensitive << ( dat_i_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );

    SC_METHOD(thread_dat_i_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_109 );
    sensitive << ( ap_block_state3 );

    SC_METHOD(thread_exitcond_fu_97_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( i_reg_86 );
    sensitive << ( ap_block_state3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_2_fu_103_p2);
    sensitive << ( i_reg_86 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( real_start_status_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( ap_start );
    sensitive << ( start_control_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_fu_97_p2 );
    sensitive << ( ap_block_state3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_state1 );

    real_start_status_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    start_once_reg = SC_LOGIC_0;
    start_control_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "duplicate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, dat_i_V_dout, "(port)dat_i_V_dout");
    sc_trace(mVcdFile, dat_i_V_empty_n, "(port)dat_i_V_empty_n");
    sc_trace(mVcdFile, dat_i_V_read, "(port)dat_i_V_read");
    sc_trace(mVcdFile, dat_1_o_V_din, "(port)dat_1_o_V_din");
    sc_trace(mVcdFile, dat_1_o_V_full_n, "(port)dat_1_o_V_full_n");
    sc_trace(mVcdFile, dat_1_o_V_write, "(port)dat_1_o_V_write");
    sc_trace(mVcdFile, dat_2_o_V_din, "(port)dat_2_o_V_din");
    sc_trace(mVcdFile, dat_2_o_V_full_n, "(port)dat_2_o_V_full_n");
    sc_trace(mVcdFile, dat_2_o_V_write, "(port)dat_2_o_V_write");
    sc_trace(mVcdFile, dat_3_o_V_din, "(port)dat_3_o_V_din");
    sc_trace(mVcdFile, dat_3_o_V_full_n, "(port)dat_3_o_V_full_n");
    sc_trace(mVcdFile, dat_3_o_V_write, "(port)dat_3_o_V_write");
    sc_trace(mVcdFile, dat_4_o_V_din, "(port)dat_4_o_V_din");
    sc_trace(mVcdFile, dat_4_o_V_full_n, "(port)dat_4_o_V_full_n");
    sc_trace(mVcdFile, dat_4_o_V_write, "(port)dat_4_o_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, real_start_status_reg, "real_start_status_reg");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, start_control_reg, "start_control_reg");
    sc_trace(mVcdFile, dat_i_V_blk_n, "dat_i_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_109, "exitcond_reg_109");
    sc_trace(mVcdFile, dat_1_o_V_blk_n, "dat_1_o_V_blk_n");
    sc_trace(mVcdFile, dat_2_o_V_blk_n, "dat_2_o_V_blk_n");
    sc_trace(mVcdFile, dat_3_o_V_blk_n, "dat_3_o_V_blk_n");
    sc_trace(mVcdFile, dat_4_o_V_blk_n, "dat_4_o_V_blk_n");
    sc_trace(mVcdFile, i_reg_86, "i_reg_86");
    sc_trace(mVcdFile, exitcond_fu_97_p2, "exitcond_fu_97_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, i_2_fu_103_p2, "i_2_fu_103_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

duplicate::~duplicate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void duplicate::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read()))) {
        i_reg_86 = i_2_fu_103_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read()))) {
        i_reg_86 = ap_const_lv20_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        real_start_status_reg = ap_const_logic_0;
    } else {
        if (!esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read())) {
            real_start_status_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()))) {
            real_start_status_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_control_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()) || 
              esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read())))) {
            start_control_reg = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, start_control_reg.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, start_full_n.read()))) {
            start_control_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read())) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        exitcond_reg_109 = exitcond_fu_97_p2.read();
    }
}

void duplicate::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void duplicate::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void duplicate::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(2, 2);
}

void duplicate::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void duplicate::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dat_i_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dat_1_o_V_full_n.read())) || (esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dat_2_o_V_full_n.read())) || (esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dat_3_o_V_full_n.read())) || (esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dat_4_o_V_full_n.read())));
}

void duplicate::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void duplicate::thread_ap_enable_pp0() {
    ap_enable_pp0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void duplicate::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void duplicate::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void duplicate::thread_dat_1_o_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0))) {
        dat_1_o_V_blk_n = dat_1_o_V_full_n.read();
    } else {
        dat_1_o_V_blk_n = ap_const_logic_1;
    }
}

void duplicate::thread_dat_1_o_V_din() {
    dat_1_o_V_din = dat_i_V_dout.read();
}

void duplicate::thread_dat_1_o_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        dat_1_o_V_write = ap_const_logic_1;
    } else {
        dat_1_o_V_write = ap_const_logic_0;
    }
}

void duplicate::thread_dat_2_o_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0))) {
        dat_2_o_V_blk_n = dat_2_o_V_full_n.read();
    } else {
        dat_2_o_V_blk_n = ap_const_logic_1;
    }
}

void duplicate::thread_dat_2_o_V_din() {
    dat_2_o_V_din = dat_i_V_dout.read();
}

void duplicate::thread_dat_2_o_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        dat_2_o_V_write = ap_const_logic_1;
    } else {
        dat_2_o_V_write = ap_const_logic_0;
    }
}

void duplicate::thread_dat_3_o_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0))) {
        dat_3_o_V_blk_n = dat_3_o_V_full_n.read();
    } else {
        dat_3_o_V_blk_n = ap_const_logic_1;
    }
}

void duplicate::thread_dat_3_o_V_din() {
    dat_3_o_V_din = dat_i_V_dout.read();
}

void duplicate::thread_dat_3_o_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        dat_3_o_V_write = ap_const_logic_1;
    } else {
        dat_3_o_V_write = ap_const_logic_0;
    }
}

void duplicate::thread_dat_4_o_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0))) {
        dat_4_o_V_blk_n = dat_4_o_V_full_n.read();
    } else {
        dat_4_o_V_blk_n = ap_const_logic_1;
    }
}

void duplicate::thread_dat_4_o_V_din() {
    dat_4_o_V_din = dat_i_V_dout.read();
}

void duplicate::thread_dat_4_o_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        dat_4_o_V_write = ap_const_logic_1;
    } else {
        dat_4_o_V_write = ap_const_logic_0;
    }
}

void duplicate::thread_dat_i_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0))) {
        dat_i_V_blk_n = dat_i_V_empty_n.read();
    } else {
        dat_i_V_blk_n = ap_const_logic_1;
    }
}

void duplicate::thread_dat_i_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_109.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())))) {
        dat_i_V_read = ap_const_logic_1;
    } else {
        dat_i_V_read = ap_const_logic_0;
    }
}

void duplicate::thread_exitcond_fu_97_p2() {
    exitcond_fu_97_p2 = (!i_reg_86.read().is_01() || !ap_const_lv20_927C0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_86.read() == ap_const_lv20_927C0);
}

void duplicate::thread_i_2_fu_103_p2() {
    i_2_fu_103_p2 = (!i_reg_86.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(i_reg_86.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void duplicate::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void duplicate::thread_real_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, real_start_status_reg.read())) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void duplicate::thread_start_out() {
    start_out = real_start.read();
}

void duplicate::thread_start_write() {
    start_write = (ap_start.read() & start_control_reg.read());
}

void duplicate::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_97_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

