// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _detect_calls_HH_
#define _detect_calls_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "duplicate.h"
#include "findpeaks.h"
#include "threshold.h"
#include "detect.h"
#include "parse.h"
#include "fifo_w32_d1_A.h"
#include "fifo_w32_d2_A.h"
#include "start_for_findpeafYi.h"
#include "start_for_threshog8j.h"
#include "start_for_parse_U0.h"

namespace ap_rtl {

struct detect_calls : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > dat_i_V_dout;
    sc_in< sc_logic > dat_i_V_empty_n;
    sc_out< sc_logic > dat_i_V_read;
    sc_out< sc_lv<32> > res_o_V_din;
    sc_in< sc_logic > res_o_V_full_n;
    sc_out< sc_logic > res_o_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    detect_calls(sc_module_name name);
    SC_HAS_PROCESS(detect_calls);

    ~detect_calls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    duplicate* duplicate_U0;
    findpeaks* findpeaks_U0;
    threshold* threshold_U0;
    detect* detect_U0;
    parse* parse_U0;
    fifo_w32_d1_A* dup1_V_U;
    fifo_w32_d1_A* dup2_V_U;
    fifo_w32_d1_A* dup3_V_U;
    fifo_w32_d1_A* dup4_V_U;
    fifo_w32_d2_A* thres_U;
    fifo_w32_d1_A* sig_locs_V_U;
    fifo_w32_d1_A* hits_channel_U;
    start_for_findpeafYi* start_for_findpeafYi_U;
    start_for_threshog8j* start_for_threshog8j_U;
    start_for_parse_U0* start_for_parse_U0_U;
    sc_signal< sc_logic > duplicate_U0_ap_start;
    sc_signal< sc_logic > duplicate_U0_ap_ready;
    sc_signal< sc_logic > duplicate_U0_ap_done;
    sc_signal< sc_logic > duplicate_U0_ap_continue;
    sc_signal< sc_logic > duplicate_U0_ap_idle;
    sc_signal< sc_logic > duplicate_U0_start_out;
    sc_signal< sc_logic > duplicate_U0_start_write;
    sc_signal< sc_logic > duplicate_U0_dat_i_V_read;
    sc_signal< sc_lv<32> > duplicate_U0_dat_1_o_V_din;
    sc_signal< sc_logic > duplicate_U0_dat_1_o_V_write;
    sc_signal< sc_lv<32> > duplicate_U0_dat_2_o_V_din;
    sc_signal< sc_logic > duplicate_U0_dat_2_o_V_write;
    sc_signal< sc_lv<32> > duplicate_U0_dat_3_o_V_din;
    sc_signal< sc_logic > duplicate_U0_dat_3_o_V_write;
    sc_signal< sc_lv<32> > duplicate_U0_dat_4_o_V_din;
    sc_signal< sc_logic > duplicate_U0_dat_4_o_V_write;
    sc_signal< sc_logic > findpeaks_U0_ap_start;
    sc_signal< sc_logic > findpeaks_U0_ap_done;
    sc_signal< sc_logic > findpeaks_U0_ap_continue;
    sc_signal< sc_logic > findpeaks_U0_ap_idle;
    sc_signal< sc_logic > findpeaks_U0_ap_ready;
    sc_signal< sc_logic > findpeaks_U0_samples_V_read;
    sc_signal< sc_lv<32> > findpeaks_U0_amplitude_V;
    sc_signal< sc_logic > findpeaks_U0_amplitude_V_ap_vld;
    sc_signal< sc_lv<32> > findpeaks_U0_locations_V;
    sc_signal< sc_logic > findpeaks_U0_locations_V_ap_vld;
    sc_signal< sc_logic > threshold_U0_ap_start;
    sc_signal< sc_logic > threshold_U0_ap_done;
    sc_signal< sc_logic > threshold_U0_ap_continue;
    sc_signal< sc_logic > threshold_U0_ap_idle;
    sc_signal< sc_logic > threshold_U0_ap_ready;
    sc_signal< sc_logic > threshold_U0_amplitude_V_read;
    sc_signal< sc_lv<32> > threshold_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_thres;
    sc_signal< sc_logic > thres_full_n;
    sc_signal< sc_logic > detect_U0_ap_start;
    sc_signal< sc_logic > detect_U0_ap_done;
    sc_signal< sc_logic > detect_U0_ap_continue;
    sc_signal< sc_logic > detect_U0_ap_idle;
    sc_signal< sc_logic > detect_U0_ap_ready;
    sc_signal< sc_logic > detect_U0_signals_V_read;
    sc_signal< sc_lv<32> > detect_U0_loc_V_din;
    sc_signal< sc_logic > detect_U0_loc_V_write;
    sc_signal< sc_lv<32> > detect_U0_hits_out_din;
    sc_signal< sc_logic > detect_U0_hits_out_write;
    sc_signal< sc_logic > parse_U0_ap_start;
    sc_signal< sc_logic > parse_U0_ap_done;
    sc_signal< sc_logic > parse_U0_ap_continue;
    sc_signal< sc_logic > parse_U0_ap_idle;
    sc_signal< sc_logic > parse_U0_ap_ready;
    sc_signal< sc_logic > parse_U0_sig_i_V_read;
    sc_signal< sc_logic > parse_U0_hits_read;
    sc_signal< sc_logic > parse_U0_loc_V_read;
    sc_signal< sc_lv<32> > parse_U0_sig_o_V_din;
    sc_signal< sc_logic > parse_U0_sig_o_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > dup1_V_full_n;
    sc_signal< sc_lv<32> > dup1_V_dout;
    sc_signal< sc_logic > dup1_V_empty_n;
    sc_signal< sc_logic > dup2_V_full_n;
    sc_signal< sc_lv<32> > dup2_V_dout;
    sc_signal< sc_logic > dup2_V_empty_n;
    sc_signal< sc_logic > dup3_V_full_n;
    sc_signal< sc_lv<32> > dup3_V_dout;
    sc_signal< sc_logic > dup3_V_empty_n;
    sc_signal< sc_logic > dup4_V_full_n;
    sc_signal< sc_lv<32> > dup4_V_dout;
    sc_signal< sc_logic > dup4_V_empty_n;
    sc_signal< sc_lv<32> > thres_dout;
    sc_signal< sc_logic > thres_empty_n;
    sc_signal< sc_logic > sig_locs_V_full_n;
    sc_signal< sc_lv<32> > sig_locs_V_dout;
    sc_signal< sc_logic > sig_locs_V_empty_n;
    sc_signal< sc_logic > hits_channel_full_n;
    sc_signal< sc_lv<32> > hits_channel_dout;
    sc_signal< sc_logic > hits_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_findpeaks_U0_din;
    sc_signal< sc_logic > start_for_findpeaks_U0_full_n;
    sc_signal< sc_lv<1> > start_for_findpeaks_U0_dout;
    sc_signal< sc_logic > start_for_findpeaks_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_threshold_U0_din;
    sc_signal< sc_logic > start_for_threshold_U0_full_n;
    sc_signal< sc_lv<1> > start_for_threshold_U0_dout;
    sc_signal< sc_logic > start_for_threshold_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_parse_U0_din;
    sc_signal< sc_logic > start_for_parse_U0_full_n;
    sc_signal< sc_lv<1> > start_for_parse_U0_dout;
    sc_signal< sc_logic > start_for_parse_U0_empty_n;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_channel_done_thres();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_dat_i_V_read();
    void thread_detect_U0_ap_continue();
    void thread_detect_U0_ap_start();
    void thread_duplicate_U0_ap_continue();
    void thread_duplicate_U0_ap_start();
    void thread_findpeaks_U0_ap_continue();
    void thread_findpeaks_U0_ap_start();
    void thread_parse_U0_ap_continue();
    void thread_parse_U0_ap_start();
    void thread_res_o_V_din();
    void thread_res_o_V_write();
    void thread_start_for_findpeaks_U0_din();
    void thread_start_for_parse_U0_din();
    void thread_start_for_threshold_U0_din();
    void thread_threshold_U0_ap_continue();
    void thread_threshold_U0_ap_start();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
