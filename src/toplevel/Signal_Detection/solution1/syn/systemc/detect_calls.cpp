// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "detect_calls.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic detect_calls::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> detect_calls::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic detect_calls::ap_const_logic_1 = sc_dt::Log_1;

detect_calls::detect_calls(sc_module_name name) : sc_module(name), mVcdFile(0) {
    duplicate_U0 = new duplicate("duplicate_U0");
    duplicate_U0->ap_clk(ap_clk);
    duplicate_U0->ap_rst(ap_rst);
    duplicate_U0->ap_start(duplicate_U0_ap_start);
    duplicate_U0->start_full_n(start_for_parse_U0_full_n);
    duplicate_U0->ap_ready(duplicate_U0_ap_ready);
    duplicate_U0->ap_done(duplicate_U0_ap_done);
    duplicate_U0->ap_continue(duplicate_U0_ap_continue);
    duplicate_U0->ap_idle(duplicate_U0_ap_idle);
    duplicate_U0->start_out(duplicate_U0_start_out);
    duplicate_U0->start_write(duplicate_U0_start_write);
    duplicate_U0->dat_i_V_dout(dat_i_V_dout);
    duplicate_U0->dat_i_V_empty_n(dat_i_V_empty_n);
    duplicate_U0->dat_i_V_read(duplicate_U0_dat_i_V_read);
    duplicate_U0->dat_1_o_V_din(duplicate_U0_dat_1_o_V_din);
    duplicate_U0->dat_1_o_V_full_n(dup1_V_full_n);
    duplicate_U0->dat_1_o_V_write(duplicate_U0_dat_1_o_V_write);
    duplicate_U0->dat_2_o_V_din(duplicate_U0_dat_2_o_V_din);
    duplicate_U0->dat_2_o_V_full_n(dup2_V_full_n);
    duplicate_U0->dat_2_o_V_write(duplicate_U0_dat_2_o_V_write);
    duplicate_U0->dat_3_o_V_din(duplicate_U0_dat_3_o_V_din);
    duplicate_U0->dat_3_o_V_full_n(dup3_V_full_n);
    duplicate_U0->dat_3_o_V_write(duplicate_U0_dat_3_o_V_write);
    duplicate_U0->dat_4_o_V_din(duplicate_U0_dat_4_o_V_din);
    duplicate_U0->dat_4_o_V_full_n(dup4_V_full_n);
    duplicate_U0->dat_4_o_V_write(duplicate_U0_dat_4_o_V_write);
    findpeaks_U0 = new findpeaks("findpeaks_U0");
    findpeaks_U0->ap_clk(ap_clk);
    findpeaks_U0->ap_rst(ap_rst);
    findpeaks_U0->ap_start(findpeaks_U0_ap_start);
    findpeaks_U0->ap_done(findpeaks_U0_ap_done);
    findpeaks_U0->ap_continue(findpeaks_U0_ap_continue);
    findpeaks_U0->ap_idle(findpeaks_U0_ap_idle);
    findpeaks_U0->ap_ready(findpeaks_U0_ap_ready);
    findpeaks_U0->samples_V_dout(dup1_V_dout);
    findpeaks_U0->samples_V_empty_n(dup1_V_empty_n);
    findpeaks_U0->samples_V_read(findpeaks_U0_samples_V_read);
    findpeaks_U0->amplitude_V(findpeaks_U0_amplitude_V);
    findpeaks_U0->amplitude_V_ap_vld(findpeaks_U0_amplitude_V_ap_vld);
    findpeaks_U0->locations_V(findpeaks_U0_locations_V);
    findpeaks_U0->locations_V_ap_vld(findpeaks_U0_locations_V_ap_vld);
    threshold_U0 = new threshold("threshold_U0");
    threshold_U0->ap_clk(ap_clk);
    threshold_U0->ap_rst(ap_rst);
    threshold_U0->ap_start(threshold_U0_ap_start);
    threshold_U0->ap_done(threshold_U0_ap_done);
    threshold_U0->ap_continue(threshold_U0_ap_continue);
    threshold_U0->ap_idle(threshold_U0_ap_idle);
    threshold_U0->ap_ready(threshold_U0_ap_ready);
    threshold_U0->amplitude_V_dout(dup2_V_dout);
    threshold_U0->amplitude_V_empty_n(dup2_V_empty_n);
    threshold_U0->amplitude_V_read(threshold_U0_amplitude_V_read);
    threshold_U0->ap_return(threshold_U0_ap_return);
    detect_U0 = new detect("detect_U0");
    detect_U0->ap_clk(ap_clk);
    detect_U0->ap_rst(ap_rst);
    detect_U0->ap_start(detect_U0_ap_start);
    detect_U0->ap_done(detect_U0_ap_done);
    detect_U0->ap_continue(detect_U0_ap_continue);
    detect_U0->ap_idle(detect_U0_ap_idle);
    detect_U0->ap_ready(detect_U0_ap_ready);
    detect_U0->signals_V_dout(dup3_V_dout);
    detect_U0->signals_V_empty_n(dup3_V_empty_n);
    detect_U0->signals_V_read(detect_U0_signals_V_read);
    detect_U0->threshold_x(thres_dout);
    detect_U0->loc_V_din(detect_U0_loc_V_din);
    detect_U0->loc_V_full_n(sig_locs_V_full_n);
    detect_U0->loc_V_write(detect_U0_loc_V_write);
    detect_U0->hits_out_din(detect_U0_hits_out_din);
    detect_U0->hits_out_full_n(hits_channel_full_n);
    detect_U0->hits_out_write(detect_U0_hits_out_write);
    parse_U0 = new parse("parse_U0");
    parse_U0->ap_clk(ap_clk);
    parse_U0->ap_rst(ap_rst);
    parse_U0->ap_start(parse_U0_ap_start);
    parse_U0->ap_done(parse_U0_ap_done);
    parse_U0->ap_continue(parse_U0_ap_continue);
    parse_U0->ap_idle(parse_U0_ap_idle);
    parse_U0->ap_ready(parse_U0_ap_ready);
    parse_U0->sig_i_V_dout(dup4_V_dout);
    parse_U0->sig_i_V_empty_n(dup4_V_empty_n);
    parse_U0->sig_i_V_read(parse_U0_sig_i_V_read);
    parse_U0->hits_dout(hits_channel_dout);
    parse_U0->hits_empty_n(hits_channel_empty_n);
    parse_U0->hits_read(parse_U0_hits_read);
    parse_U0->loc_V_dout(sig_locs_V_dout);
    parse_U0->loc_V_empty_n(sig_locs_V_empty_n);
    parse_U0->loc_V_read(parse_U0_loc_V_read);
    parse_U0->sig_o_V_din(parse_U0_sig_o_V_din);
    parse_U0->sig_o_V_full_n(res_o_V_full_n);
    parse_U0->sig_o_V_write(parse_U0_sig_o_V_write);
    dup1_V_U = new fifo_w32_d1_A("dup1_V_U");
    dup1_V_U->clk(ap_clk);
    dup1_V_U->reset(ap_rst);
    dup1_V_U->if_read_ce(ap_var_for_const0);
    dup1_V_U->if_write_ce(ap_var_for_const0);
    dup1_V_U->if_din(duplicate_U0_dat_1_o_V_din);
    dup1_V_U->if_full_n(dup1_V_full_n);
    dup1_V_U->if_write(duplicate_U0_dat_1_o_V_write);
    dup1_V_U->if_dout(dup1_V_dout);
    dup1_V_U->if_empty_n(dup1_V_empty_n);
    dup1_V_U->if_read(findpeaks_U0_samples_V_read);
    dup2_V_U = new fifo_w32_d1_A("dup2_V_U");
    dup2_V_U->clk(ap_clk);
    dup2_V_U->reset(ap_rst);
    dup2_V_U->if_read_ce(ap_var_for_const0);
    dup2_V_U->if_write_ce(ap_var_for_const0);
    dup2_V_U->if_din(duplicate_U0_dat_2_o_V_din);
    dup2_V_U->if_full_n(dup2_V_full_n);
    dup2_V_U->if_write(duplicate_U0_dat_2_o_V_write);
    dup2_V_U->if_dout(dup2_V_dout);
    dup2_V_U->if_empty_n(dup2_V_empty_n);
    dup2_V_U->if_read(threshold_U0_amplitude_V_read);
    dup3_V_U = new fifo_w32_d1_A("dup3_V_U");
    dup3_V_U->clk(ap_clk);
    dup3_V_U->reset(ap_rst);
    dup3_V_U->if_read_ce(ap_var_for_const0);
    dup3_V_U->if_write_ce(ap_var_for_const0);
    dup3_V_U->if_din(duplicate_U0_dat_3_o_V_din);
    dup3_V_U->if_full_n(dup3_V_full_n);
    dup3_V_U->if_write(duplicate_U0_dat_3_o_V_write);
    dup3_V_U->if_dout(dup3_V_dout);
    dup3_V_U->if_empty_n(dup3_V_empty_n);
    dup3_V_U->if_read(detect_U0_signals_V_read);
    dup4_V_U = new fifo_w32_d1_A("dup4_V_U");
    dup4_V_U->clk(ap_clk);
    dup4_V_U->reset(ap_rst);
    dup4_V_U->if_read_ce(ap_var_for_const0);
    dup4_V_U->if_write_ce(ap_var_for_const0);
    dup4_V_U->if_din(duplicate_U0_dat_4_o_V_din);
    dup4_V_U->if_full_n(dup4_V_full_n);
    dup4_V_U->if_write(duplicate_U0_dat_4_o_V_write);
    dup4_V_U->if_dout(dup4_V_dout);
    dup4_V_U->if_empty_n(dup4_V_empty_n);
    dup4_V_U->if_read(parse_U0_sig_i_V_read);
    thres_U = new fifo_w32_d2_A("thres_U");
    thres_U->clk(ap_clk);
    thres_U->reset(ap_rst);
    thres_U->if_read_ce(ap_var_for_const0);
    thres_U->if_write_ce(ap_var_for_const0);
    thres_U->if_din(threshold_U0_ap_return);
    thres_U->if_full_n(thres_full_n);
    thres_U->if_write(threshold_U0_ap_done);
    thres_U->if_dout(thres_dout);
    thres_U->if_empty_n(thres_empty_n);
    thres_U->if_read(detect_U0_ap_ready);
    sig_locs_V_U = new fifo_w32_d1_A("sig_locs_V_U");
    sig_locs_V_U->clk(ap_clk);
    sig_locs_V_U->reset(ap_rst);
    sig_locs_V_U->if_read_ce(ap_var_for_const0);
    sig_locs_V_U->if_write_ce(ap_var_for_const0);
    sig_locs_V_U->if_din(detect_U0_loc_V_din);
    sig_locs_V_U->if_full_n(sig_locs_V_full_n);
    sig_locs_V_U->if_write(detect_U0_loc_V_write);
    sig_locs_V_U->if_dout(sig_locs_V_dout);
    sig_locs_V_U->if_empty_n(sig_locs_V_empty_n);
    sig_locs_V_U->if_read(parse_U0_loc_V_read);
    hits_channel_U = new fifo_w32_d1_A("hits_channel_U");
    hits_channel_U->clk(ap_clk);
    hits_channel_U->reset(ap_rst);
    hits_channel_U->if_read_ce(ap_var_for_const0);
    hits_channel_U->if_write_ce(ap_var_for_const0);
    hits_channel_U->if_din(detect_U0_hits_out_din);
    hits_channel_U->if_full_n(hits_channel_full_n);
    hits_channel_U->if_write(detect_U0_hits_out_write);
    hits_channel_U->if_dout(hits_channel_dout);
    hits_channel_U->if_empty_n(hits_channel_empty_n);
    hits_channel_U->if_read(parse_U0_hits_read);
    start_for_findpeafYi_U = new start_for_findpeafYi("start_for_findpeafYi_U");
    start_for_findpeafYi_U->clk(ap_clk);
    start_for_findpeafYi_U->reset(ap_rst);
    start_for_findpeafYi_U->if_read_ce(ap_var_for_const0);
    start_for_findpeafYi_U->if_write_ce(ap_var_for_const0);
    start_for_findpeafYi_U->if_din(start_for_findpeaks_U0_din);
    start_for_findpeafYi_U->if_full_n(start_for_findpeaks_U0_full_n);
    start_for_findpeafYi_U->if_write(duplicate_U0_start_write);
    start_for_findpeafYi_U->if_dout(start_for_findpeaks_U0_dout);
    start_for_findpeafYi_U->if_empty_n(start_for_findpeaks_U0_empty_n);
    start_for_findpeafYi_U->if_read(findpeaks_U0_ap_ready);
    start_for_threshog8j_U = new start_for_threshog8j("start_for_threshog8j_U");
    start_for_threshog8j_U->clk(ap_clk);
    start_for_threshog8j_U->reset(ap_rst);
    start_for_threshog8j_U->if_read_ce(ap_var_for_const0);
    start_for_threshog8j_U->if_write_ce(ap_var_for_const0);
    start_for_threshog8j_U->if_din(start_for_threshold_U0_din);
    start_for_threshog8j_U->if_full_n(start_for_threshold_U0_full_n);
    start_for_threshog8j_U->if_write(duplicate_U0_start_write);
    start_for_threshog8j_U->if_dout(start_for_threshold_U0_dout);
    start_for_threshog8j_U->if_empty_n(start_for_threshold_U0_empty_n);
    start_for_threshog8j_U->if_read(threshold_U0_ap_ready);
    start_for_parse_U0_U = new start_for_parse_U0("start_for_parse_U0_U");
    start_for_parse_U0_U->clk(ap_clk);
    start_for_parse_U0_U->reset(ap_rst);
    start_for_parse_U0_U->if_read_ce(ap_var_for_const0);
    start_for_parse_U0_U->if_write_ce(ap_var_for_const0);
    start_for_parse_U0_U->if_din(start_for_parse_U0_din);
    start_for_parse_U0_U->if_full_n(start_for_parse_U0_full_n);
    start_for_parse_U0_U->if_write(duplicate_U0_start_write);
    start_for_parse_U0_U->if_dout(start_for_parse_U0_dout);
    start_for_parse_U0_U->if_empty_n(start_for_parse_U0_empty_n);
    start_for_parse_U0_U->if_read(parse_U0_ap_ready);

    SC_METHOD(thread_ap_channel_done_thres);
    sensitive << ( threshold_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( parse_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( duplicate_U0_ap_idle );
    sensitive << ( findpeaks_U0_ap_idle );
    sensitive << ( threshold_U0_ap_idle );
    sensitive << ( detect_U0_ap_idle );
    sensitive << ( parse_U0_ap_idle );
    sensitive << ( thres_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( duplicate_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( parse_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( duplicate_U0_ap_ready );

    SC_METHOD(thread_dat_i_V_read);
    sensitive << ( duplicate_U0_dat_i_V_read );

    SC_METHOD(thread_detect_U0_ap_continue);

    SC_METHOD(thread_detect_U0_ap_start);
    sensitive << ( thres_empty_n );

    SC_METHOD(thread_duplicate_U0_ap_continue);

    SC_METHOD(thread_duplicate_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_start );

    SC_METHOD(thread_findpeaks_U0_ap_continue);

    SC_METHOD(thread_findpeaks_U0_ap_start);
    sensitive << ( start_for_findpeaks_U0_empty_n );

    SC_METHOD(thread_parse_U0_ap_continue);

    SC_METHOD(thread_parse_U0_ap_start);
    sensitive << ( start_for_parse_U0_empty_n );

    SC_METHOD(thread_res_o_V_din);
    sensitive << ( parse_U0_sig_o_V_din );

    SC_METHOD(thread_res_o_V_write);
    sensitive << ( parse_U0_sig_o_V_write );

    SC_METHOD(thread_start_for_findpeaks_U0_din);

    SC_METHOD(thread_start_for_parse_U0_din);

    SC_METHOD(thread_start_for_threshold_U0_din);

    SC_METHOD(thread_threshold_U0_ap_continue);
    sensitive << ( thres_full_n );

    SC_METHOD(thread_threshold_U0_ap_start);
    sensitive << ( start_for_threshold_U0_empty_n );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "detect_calls_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, dat_i_V_dout, "(port)dat_i_V_dout");
    sc_trace(mVcdFile, dat_i_V_empty_n, "(port)dat_i_V_empty_n");
    sc_trace(mVcdFile, dat_i_V_read, "(port)dat_i_V_read");
    sc_trace(mVcdFile, res_o_V_din, "(port)res_o_V_din");
    sc_trace(mVcdFile, res_o_V_full_n, "(port)res_o_V_full_n");
    sc_trace(mVcdFile, res_o_V_write, "(port)res_o_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, duplicate_U0_ap_start, "duplicate_U0_ap_start");
    sc_trace(mVcdFile, duplicate_U0_ap_ready, "duplicate_U0_ap_ready");
    sc_trace(mVcdFile, duplicate_U0_ap_done, "duplicate_U0_ap_done");
    sc_trace(mVcdFile, duplicate_U0_ap_continue, "duplicate_U0_ap_continue");
    sc_trace(mVcdFile, duplicate_U0_ap_idle, "duplicate_U0_ap_idle");
    sc_trace(mVcdFile, duplicate_U0_start_out, "duplicate_U0_start_out");
    sc_trace(mVcdFile, duplicate_U0_start_write, "duplicate_U0_start_write");
    sc_trace(mVcdFile, duplicate_U0_dat_i_V_read, "duplicate_U0_dat_i_V_read");
    sc_trace(mVcdFile, duplicate_U0_dat_1_o_V_din, "duplicate_U0_dat_1_o_V_din");
    sc_trace(mVcdFile, duplicate_U0_dat_1_o_V_write, "duplicate_U0_dat_1_o_V_write");
    sc_trace(mVcdFile, duplicate_U0_dat_2_o_V_din, "duplicate_U0_dat_2_o_V_din");
    sc_trace(mVcdFile, duplicate_U0_dat_2_o_V_write, "duplicate_U0_dat_2_o_V_write");
    sc_trace(mVcdFile, duplicate_U0_dat_3_o_V_din, "duplicate_U0_dat_3_o_V_din");
    sc_trace(mVcdFile, duplicate_U0_dat_3_o_V_write, "duplicate_U0_dat_3_o_V_write");
    sc_trace(mVcdFile, duplicate_U0_dat_4_o_V_din, "duplicate_U0_dat_4_o_V_din");
    sc_trace(mVcdFile, duplicate_U0_dat_4_o_V_write, "duplicate_U0_dat_4_o_V_write");
    sc_trace(mVcdFile, findpeaks_U0_ap_start, "findpeaks_U0_ap_start");
    sc_trace(mVcdFile, findpeaks_U0_ap_done, "findpeaks_U0_ap_done");
    sc_trace(mVcdFile, findpeaks_U0_ap_continue, "findpeaks_U0_ap_continue");
    sc_trace(mVcdFile, findpeaks_U0_ap_idle, "findpeaks_U0_ap_idle");
    sc_trace(mVcdFile, findpeaks_U0_ap_ready, "findpeaks_U0_ap_ready");
    sc_trace(mVcdFile, findpeaks_U0_samples_V_read, "findpeaks_U0_samples_V_read");
    sc_trace(mVcdFile, findpeaks_U0_amplitude_V, "findpeaks_U0_amplitude_V");
    sc_trace(mVcdFile, findpeaks_U0_amplitude_V_ap_vld, "findpeaks_U0_amplitude_V_ap_vld");
    sc_trace(mVcdFile, findpeaks_U0_locations_V, "findpeaks_U0_locations_V");
    sc_trace(mVcdFile, findpeaks_U0_locations_V_ap_vld, "findpeaks_U0_locations_V_ap_vld");
    sc_trace(mVcdFile, threshold_U0_ap_start, "threshold_U0_ap_start");
    sc_trace(mVcdFile, threshold_U0_ap_done, "threshold_U0_ap_done");
    sc_trace(mVcdFile, threshold_U0_ap_continue, "threshold_U0_ap_continue");
    sc_trace(mVcdFile, threshold_U0_ap_idle, "threshold_U0_ap_idle");
    sc_trace(mVcdFile, threshold_U0_ap_ready, "threshold_U0_ap_ready");
    sc_trace(mVcdFile, threshold_U0_amplitude_V_read, "threshold_U0_amplitude_V_read");
    sc_trace(mVcdFile, threshold_U0_ap_return, "threshold_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_thres, "ap_channel_done_thres");
    sc_trace(mVcdFile, thres_full_n, "thres_full_n");
    sc_trace(mVcdFile, detect_U0_ap_start, "detect_U0_ap_start");
    sc_trace(mVcdFile, detect_U0_ap_done, "detect_U0_ap_done");
    sc_trace(mVcdFile, detect_U0_ap_continue, "detect_U0_ap_continue");
    sc_trace(mVcdFile, detect_U0_ap_idle, "detect_U0_ap_idle");
    sc_trace(mVcdFile, detect_U0_ap_ready, "detect_U0_ap_ready");
    sc_trace(mVcdFile, detect_U0_signals_V_read, "detect_U0_signals_V_read");
    sc_trace(mVcdFile, detect_U0_loc_V_din, "detect_U0_loc_V_din");
    sc_trace(mVcdFile, detect_U0_loc_V_write, "detect_U0_loc_V_write");
    sc_trace(mVcdFile, detect_U0_hits_out_din, "detect_U0_hits_out_din");
    sc_trace(mVcdFile, detect_U0_hits_out_write, "detect_U0_hits_out_write");
    sc_trace(mVcdFile, parse_U0_ap_start, "parse_U0_ap_start");
    sc_trace(mVcdFile, parse_U0_ap_done, "parse_U0_ap_done");
    sc_trace(mVcdFile, parse_U0_ap_continue, "parse_U0_ap_continue");
    sc_trace(mVcdFile, parse_U0_ap_idle, "parse_U0_ap_idle");
    sc_trace(mVcdFile, parse_U0_ap_ready, "parse_U0_ap_ready");
    sc_trace(mVcdFile, parse_U0_sig_i_V_read, "parse_U0_sig_i_V_read");
    sc_trace(mVcdFile, parse_U0_hits_read, "parse_U0_hits_read");
    sc_trace(mVcdFile, parse_U0_loc_V_read, "parse_U0_loc_V_read");
    sc_trace(mVcdFile, parse_U0_sig_o_V_din, "parse_U0_sig_o_V_din");
    sc_trace(mVcdFile, parse_U0_sig_o_V_write, "parse_U0_sig_o_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, dup1_V_full_n, "dup1_V_full_n");
    sc_trace(mVcdFile, dup1_V_dout, "dup1_V_dout");
    sc_trace(mVcdFile, dup1_V_empty_n, "dup1_V_empty_n");
    sc_trace(mVcdFile, dup2_V_full_n, "dup2_V_full_n");
    sc_trace(mVcdFile, dup2_V_dout, "dup2_V_dout");
    sc_trace(mVcdFile, dup2_V_empty_n, "dup2_V_empty_n");
    sc_trace(mVcdFile, dup3_V_full_n, "dup3_V_full_n");
    sc_trace(mVcdFile, dup3_V_dout, "dup3_V_dout");
    sc_trace(mVcdFile, dup3_V_empty_n, "dup3_V_empty_n");
    sc_trace(mVcdFile, dup4_V_full_n, "dup4_V_full_n");
    sc_trace(mVcdFile, dup4_V_dout, "dup4_V_dout");
    sc_trace(mVcdFile, dup4_V_empty_n, "dup4_V_empty_n");
    sc_trace(mVcdFile, thres_dout, "thres_dout");
    sc_trace(mVcdFile, thres_empty_n, "thres_empty_n");
    sc_trace(mVcdFile, sig_locs_V_full_n, "sig_locs_V_full_n");
    sc_trace(mVcdFile, sig_locs_V_dout, "sig_locs_V_dout");
    sc_trace(mVcdFile, sig_locs_V_empty_n, "sig_locs_V_empty_n");
    sc_trace(mVcdFile, hits_channel_full_n, "hits_channel_full_n");
    sc_trace(mVcdFile, hits_channel_dout, "hits_channel_dout");
    sc_trace(mVcdFile, hits_channel_empty_n, "hits_channel_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_findpeaks_U0_din, "start_for_findpeaks_U0_din");
    sc_trace(mVcdFile, start_for_findpeaks_U0_full_n, "start_for_findpeaks_U0_full_n");
    sc_trace(mVcdFile, start_for_findpeaks_U0_dout, "start_for_findpeaks_U0_dout");
    sc_trace(mVcdFile, start_for_findpeaks_U0_empty_n, "start_for_findpeaks_U0_empty_n");
    sc_trace(mVcdFile, start_for_threshold_U0_din, "start_for_threshold_U0_din");
    sc_trace(mVcdFile, start_for_threshold_U0_full_n, "start_for_threshold_U0_full_n");
    sc_trace(mVcdFile, start_for_threshold_U0_dout, "start_for_threshold_U0_dout");
    sc_trace(mVcdFile, start_for_threshold_U0_empty_n, "start_for_threshold_U0_empty_n");
    sc_trace(mVcdFile, start_for_parse_U0_din, "start_for_parse_U0_din");
    sc_trace(mVcdFile, start_for_parse_U0_full_n, "start_for_parse_U0_full_n");
    sc_trace(mVcdFile, start_for_parse_U0_dout, "start_for_parse_U0_dout");
    sc_trace(mVcdFile, start_for_parse_U0_empty_n, "start_for_parse_U0_empty_n");
#endif

    }
    mHdltvinHandle.open("detect_calls.hdltvin.dat");
    mHdltvoutHandle.open("detect_calls.hdltvout.dat");
}

detect_calls::~detect_calls() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete duplicate_U0;
    delete findpeaks_U0;
    delete threshold_U0;
    delete detect_U0;
    delete parse_U0;
    delete dup1_V_U;
    delete dup2_V_U;
    delete dup3_V_U;
    delete dup4_V_U;
    delete thres_U;
    delete sig_locs_V_U;
    delete hits_channel_U;
    delete start_for_findpeafYi_U;
    delete start_for_threshog8j_U;
    delete start_for_parse_U0_U;
}

void detect_calls::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void detect_calls::thread_ap_channel_done_thres() {
    ap_channel_done_thres = threshold_U0_ap_done.read();
}

void detect_calls::thread_ap_done() {
    ap_done = parse_U0_ap_done.read();
}

void detect_calls::thread_ap_idle() {
    ap_idle = (duplicate_U0_ap_idle.read() & findpeaks_U0_ap_idle.read() & threshold_U0_ap_idle.read() & detect_U0_ap_idle.read() & parse_U0_ap_idle.read() & (thres_empty_n.read() ^ 
  ap_const_logic_1));
}

void detect_calls::thread_ap_ready() {
    ap_ready = duplicate_U0_ap_ready.read();
}

void detect_calls::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void detect_calls::thread_ap_sync_done() {
    ap_sync_done = parse_U0_ap_done.read();
}

void detect_calls::thread_ap_sync_ready() {
    ap_sync_ready = duplicate_U0_ap_ready.read();
}

void detect_calls::thread_dat_i_V_read() {
    dat_i_V_read = duplicate_U0_dat_i_V_read.read();
}

void detect_calls::thread_detect_U0_ap_continue() {
    detect_U0_ap_continue = ap_const_logic_1;
}

void detect_calls::thread_detect_U0_ap_start() {
    detect_U0_ap_start = thres_empty_n.read();
}

void detect_calls::thread_duplicate_U0_ap_continue() {
    duplicate_U0_ap_continue = ap_const_logic_1;
}

void detect_calls::thread_duplicate_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        duplicate_U0_ap_start = ap_const_logic_0;
    } else {
        duplicate_U0_ap_start = ap_start.read();
    }
}

void detect_calls::thread_findpeaks_U0_ap_continue() {
    findpeaks_U0_ap_continue = ap_const_logic_1;
}

void detect_calls::thread_findpeaks_U0_ap_start() {
    findpeaks_U0_ap_start = start_for_findpeaks_U0_empty_n.read();
}

void detect_calls::thread_parse_U0_ap_continue() {
    parse_U0_ap_continue = ap_const_logic_1;
}

void detect_calls::thread_parse_U0_ap_start() {
    parse_U0_ap_start = start_for_parse_U0_empty_n.read();
}

void detect_calls::thread_res_o_V_din() {
    res_o_V_din = parse_U0_sig_o_V_din.read();
}

void detect_calls::thread_res_o_V_write() {
    res_o_V_write = parse_U0_sig_o_V_write.read();
}

void detect_calls::thread_start_for_findpeaks_U0_din() {
    start_for_findpeaks_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void detect_calls::thread_start_for_parse_U0_din() {
    start_for_parse_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void detect_calls::thread_start_for_threshold_U0_din() {
    start_for_threshold_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void detect_calls::thread_threshold_U0_ap_continue() {
    threshold_U0_ap_continue = thres_full_n.read();
}

void detect_calls::thread_threshold_U0_ap_start() {
    threshold_U0_ap_start = start_for_threshold_U0_empty_n.read();
}

void detect_calls::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"dat_i_V_dout\" :  \"" << dat_i_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dat_i_V_empty_n\" :  \"" << dat_i_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"dat_i_V_read\" :  \"" << dat_i_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_o_V_din\" :  \"" << res_o_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"res_o_V_full_n\" :  \"" << res_o_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_o_V_write\" :  \"" << res_o_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

