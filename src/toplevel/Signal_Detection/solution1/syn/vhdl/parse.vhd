-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_i_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sig_i_V_empty_n : IN STD_LOGIC;
    sig_i_V_read : OUT STD_LOGIC;
    hits_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hits_empty_n : IN STD_LOGIC;
    hits_read : OUT STD_LOGIC;
    loc_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    loc_V_empty_n : IN STD_LOGIC;
    loc_V_read : OUT STD_LOGIC;
    sig_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sig_o_V_full_n : IN STD_LOGIC;
    sig_o_V_write : OUT STD_LOGIC );
end;


architecture behav of parse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFC17 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110000010111";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFC16 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110000010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_927BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010010010011110111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sig_i_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_i_i_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_10_i_i_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hits_blk_n : STD_LOGIC;
    signal loc_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sig_o_V_blk_n : STD_LOGIC;
    signal hits_read_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_147_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_257 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_4_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_i_i_fu_176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_1_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_1_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal smax9_i_i_fu_201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax9_i_i_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal tmp_7_i_i_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_i_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal read_count_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_count_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal read_count_1_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_count_1_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal read_count_i_i_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal i_i_i_reg_108 : STD_LOGIC_VECTOR (30 downto 0);
    signal read_count_1_i_i_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_count_2_in_i_i_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i_cast_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_163_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_op_i_i_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_11_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax8_i_i_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_i_fu_142_p2) and not((ap_const_boolean_1 = ap_block_state2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_10_i_i_fu_245_p2) and not((ap_const_boolean_1 = ap_block_state9)))) then 
                i_i_i_reg_108 <= i_reg_257;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_boolean_1 = ap_block_state1)))) then 
                i_i_i_reg_108 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    read_count_1_i_i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0)) and not((ap_const_boolean_1 = ap_block_state5)))) then 
                read_count_1_i_i_reg_119 <= tmp_3_i_i_fu_208_p2;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state4)) then 
                read_count_1_i_i_reg_119 <= read_count_i_i_reg_96;
            end if; 
        end if;
    end process;

    read_count_2_in_i_i_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and not((ap_const_boolean_1 = ap_block_state9)))) then 
                read_count_2_in_i_i_reg_129 <= read_count_1_reg_319;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state7)) then 
                read_count_2_in_i_i_reg_129 <= smax9_i_i_reg_289;
            end if; 
        end if;
    end process;

    read_count_i_i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_10_i_i_fu_245_p2) and not((ap_const_boolean_1 = ap_block_state9)))) then 
                read_count_i_i_reg_96 <= read_count_reg_314;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_boolean_1 = ap_block_state1)))) then 
                read_count_i_i_reg_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state4)) then
                e_1_reg_282 <= e_1_fu_189_p3;
                smax9_i_i_reg_289 <= smax9_i_i_fu_201_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state3)) then
                e_reg_269 <= e_fu_158_p2;
                tmp_1_i_i_reg_275 <= tmp_1_i_i_fu_176_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_boolean_1 = ap_block_state1)))) then
                hits_read_reg_249 <= hits_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_boolean_1 = ap_block_state2)))) then
                i_reg_257 <= i_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state8)) then
                read_count_1_reg_319 <= read_count_1_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state7)) then
                read_count_reg_314 <= read_count_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_i_i_fu_142_p2)) and not((ap_const_boolean_1 = ap_block_state2)))) then
                tmp_4_reg_262 <= loc_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (tmp_5_i_i_fu_214_p2 = ap_const_lv1_0) and not((ap_const_boolean_1 = ap_block_state5)))) then
                tmp_7_i_i_reg_303 <= tmp_7_i_i_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_1 = ap_CS_fsm_state6)) then
                tmp_8_i_i_reg_309 <= tmp_8_i_i_fu_224_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_5_i_i_fu_214_p2, tmp_10_i_i_fu_245_p2, tmp_i_i_fu_142_p2, ap_block_state1, ap_block_state2, ap_block_state5, ap_block_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_const_boolean_1 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_0 = tmp_i_i_fu_142_p2) and not((ap_const_boolean_1 = ap_block_state2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((ap_const_lv1_0 = tmp_i_i_fu_142_p2)) and not((ap_const_boolean_1 = ap_block_state2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0)) and not((ap_const_boolean_1 = ap_block_state5)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0) and not((ap_const_boolean_1 = ap_block_state5)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2) and not((ap_const_boolean_1 = ap_block_state9)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and not((ap_const_boolean_1 = ap_block_state9)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, hits_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = hits_empty_n));
    end process;


    ap_block_state2_assign_proc : process(loc_V_empty_n, tmp_i_i_fu_142_p2)
    begin
                ap_block_state2 <= (not((ap_const_lv1_0 = tmp_i_i_fu_142_p2)) and (ap_const_logic_0 = loc_V_empty_n));
    end process;


    ap_block_state5_assign_proc : process(sig_i_V_empty_n, tmp_5_i_i_fu_214_p2)
    begin
                ap_block_state5 <= (not((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = sig_i_V_empty_n));
    end process;


    ap_block_state9_assign_proc : process(sig_i_V_empty_n, sig_o_V_full_n, tmp_10_i_i_fu_245_p2)
    begin
                ap_block_state9 <= ((not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and (ap_const_logic_0 = sig_i_V_empty_n)) or (not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and (ap_const_logic_0 = sig_o_V_full_n)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_block_state2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_i_fu_142_p2) and not((ap_const_boolean_1 = ap_block_state2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_block_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_i_fu_142_p2) and not((ap_const_boolean_1 = ap_block_state2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_153_p2 <= std_logic_vector(unsigned(tmp_4_reg_262) + unsigned(ap_const_lv32_FFFFFC17));
    e_1_fu_189_p3 <= 
        ap_const_lv32_927BF when (tmp_i_i_11_fu_184_p2(0) = '1') else 
        e_reg_269;
    e_fu_158_p2 <= std_logic_vector(unsigned(tmp_4_reg_262) + unsigned(ap_const_lv32_3E8));

    hits_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hits_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            hits_blk_n <= hits_empty_n;
        else 
            hits_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hits_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_boolean_1 = ap_block_state1)))) then 
            hits_read <= ap_const_logic_1;
        else 
            hits_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_147_p2 <= std_logic_vector(unsigned(i_i_i_reg_108) + unsigned(ap_const_lv31_1));
    i_i_i_cast_fu_138_p1 <= std_logic_vector(resize(unsigned(i_i_i_reg_108),32));

    loc_V_blk_n_assign_proc : process(loc_V_empty_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_i_i_fu_142_p2)))) then 
            loc_V_blk_n <= loc_V_empty_n;
        else 
            loc_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    loc_V_read_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_block_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_i_i_fu_142_p2)) and not((ap_const_boolean_1 = ap_block_state2)))) then 
            loc_V_read <= ap_const_logic_1;
        else 
            loc_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_op_i_i_fu_171_p2 <= std_logic_vector(unsigned(tmp_4_reg_262) + unsigned(ap_const_lv32_FFFFFC16));
    read_count_1_fu_239_p2 <= std_logic_vector(unsigned(read_count_2_in_i_i_reg_129) + unsigned(ap_const_lv32_1));
    read_count_fu_233_p2 <= std_logic_vector(unsigned(smax8_i_i_fu_228_p3) + unsigned(ap_const_lv32_1));

    sig_i_V_blk_n_assign_proc : process(sig_i_V_empty_n, ap_CS_fsm_state5, tmp_5_i_i_fu_214_p2, ap_CS_fsm_state9, tmp_10_i_i_fu_245_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2))))) then 
            sig_i_V_blk_n <= sig_i_V_empty_n;
        else 
            sig_i_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sig_i_V_read_assign_proc : process(ap_CS_fsm_state5, tmp_5_i_i_fu_214_p2, ap_CS_fsm_state9, tmp_10_i_i_fu_245_p2, ap_block_state5, ap_block_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not((tmp_5_i_i_fu_214_p2 = ap_const_lv1_0)) and not((ap_const_boolean_1 = ap_block_state5))) or ((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and not((ap_const_boolean_1 = ap_block_state9))))) then 
            sig_i_V_read <= ap_const_logic_1;
        else 
            sig_i_V_read <= ap_const_logic_0;
        end if; 
    end process;


    sig_o_V_blk_n_assign_proc : process(sig_o_V_full_n, ap_CS_fsm_state9, tmp_10_i_i_fu_245_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)))) then 
            sig_o_V_blk_n <= sig_o_V_full_n;
        else 
            sig_o_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sig_o_V_din <= sig_i_V_dout;

    sig_o_V_write_assign_proc : process(ap_CS_fsm_state9, tmp_10_i_i_fu_245_p2, ap_block_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_10_i_i_fu_245_p2)) and not((ap_const_boolean_1 = ap_block_state9)))) then 
            sig_o_V_write <= ap_const_logic_1;
        else 
            sig_o_V_write <= ap_const_logic_0;
        end if; 
    end process;

    smax8_i_i_fu_228_p3 <= 
        e_1_reg_282 when (tmp_8_i_i_reg_309(0) = '1') else 
        tmp_7_i_i_reg_303;
    smax9_i_i_fu_201_p3 <= 
        read_count_i_i_reg_96 when (tmp_2_i_i_fu_196_p2(0) = '1') else 
        tmp_1_i_i_reg_275;
    tmp_10_i_i_fu_245_p2 <= "1" when (signed(read_count_1_reg_319) < signed(e_1_reg_282)) else "0";
    tmp_1_i_i_fu_176_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_fu_163_p3(0) = '1') else 
        p_op_i_i_fu_171_p2;
    tmp_2_i_i_fu_196_p2 <= "1" when (signed(read_count_i_i_reg_96) > signed(tmp_1_i_i_reg_275)) else "0";
    tmp_3_i_i_fu_208_p2 <= std_logic_vector(unsigned(read_count_1_i_i_reg_119) + unsigned(ap_const_lv32_1));
    tmp_5_i_i_fu_214_p2 <= "1" when (signed(read_count_1_i_i_reg_119) < signed(tmp_1_i_i_reg_275)) else "0";
    tmp_7_i_i_fu_219_p2 <= std_logic_vector(unsigned(smax9_i_i_reg_289) + unsigned(ap_const_lv32_1));
    tmp_8_i_i_fu_224_p2 <= "1" when (signed(e_1_reg_282) > signed(tmp_7_i_i_reg_303)) else "0";
    tmp_fu_163_p3 <= b_fu_153_p2(31 downto 31);
    tmp_i_i_11_fu_184_p2 <= "1" when (signed(e_reg_269) > signed(ap_const_lv32_927BF)) else "0";
    tmp_i_i_fu_142_p2 <= "1" when (signed(i_i_i_cast_fu_138_p1) < signed(hits_read_reg_249)) else "0";
end behav;
