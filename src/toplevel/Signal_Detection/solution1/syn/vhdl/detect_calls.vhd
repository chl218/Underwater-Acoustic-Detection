-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detect_calls is
port (
    dat_i_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    dat_i_V_empty_n : IN STD_LOGIC;
    dat_i_V_read : OUT STD_LOGIC;
    res_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_o_V_full_n : IN STD_LOGIC;
    res_o_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of detect_calls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "detect_calls,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.353000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=3245,HLS_SYN_LUT=4300}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal duplicate_U0_ap_start : STD_LOGIC;
    signal duplicate_U0_ap_ready : STD_LOGIC;
    signal duplicate_U0_ap_done : STD_LOGIC;
    signal duplicate_U0_ap_continue : STD_LOGIC;
    signal duplicate_U0_ap_idle : STD_LOGIC;
    signal duplicate_U0_start_out : STD_LOGIC;
    signal duplicate_U0_start_write : STD_LOGIC;
    signal duplicate_U0_dat_i_V_read : STD_LOGIC;
    signal duplicate_U0_dat_1_o_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal duplicate_U0_dat_1_o_V_write : STD_LOGIC;
    signal duplicate_U0_dat_2_o_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal duplicate_U0_dat_2_o_V_write : STD_LOGIC;
    signal duplicate_U0_dat_3_o_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal duplicate_U0_dat_3_o_V_write : STD_LOGIC;
    signal duplicate_U0_dat_4_o_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal duplicate_U0_dat_4_o_V_write : STD_LOGIC;
    signal findpeaks_U0_ap_start : STD_LOGIC;
    signal findpeaks_U0_ap_done : STD_LOGIC;
    signal findpeaks_U0_ap_continue : STD_LOGIC;
    signal findpeaks_U0_ap_idle : STD_LOGIC;
    signal findpeaks_U0_ap_ready : STD_LOGIC;
    signal findpeaks_U0_samples_V_read : STD_LOGIC;
    signal findpeaks_U0_amplitude_V : STD_LOGIC_VECTOR (31 downto 0);
    signal findpeaks_U0_amplitude_V_ap_vld : STD_LOGIC;
    signal findpeaks_U0_locations_V : STD_LOGIC_VECTOR (31 downto 0);
    signal findpeaks_U0_locations_V_ap_vld : STD_LOGIC;
    signal threshold_U0_ap_start : STD_LOGIC;
    signal threshold_U0_ap_done : STD_LOGIC;
    signal threshold_U0_ap_continue : STD_LOGIC;
    signal threshold_U0_ap_idle : STD_LOGIC;
    signal threshold_U0_ap_ready : STD_LOGIC;
    signal threshold_U0_amplitude_V_read : STD_LOGIC;
    signal threshold_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_thres : STD_LOGIC;
    signal thres_full_n : STD_LOGIC;
    signal detect_U0_ap_start : STD_LOGIC;
    signal detect_U0_ap_done : STD_LOGIC;
    signal detect_U0_ap_continue : STD_LOGIC;
    signal detect_U0_ap_idle : STD_LOGIC;
    signal detect_U0_ap_ready : STD_LOGIC;
    signal detect_U0_signals_V_read : STD_LOGIC;
    signal detect_U0_loc_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal detect_U0_loc_V_write : STD_LOGIC;
    signal detect_U0_hits_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal detect_U0_hits_out_write : STD_LOGIC;
    signal parse_U0_ap_start : STD_LOGIC;
    signal parse_U0_ap_done : STD_LOGIC;
    signal parse_U0_ap_continue : STD_LOGIC;
    signal parse_U0_ap_idle : STD_LOGIC;
    signal parse_U0_ap_ready : STD_LOGIC;
    signal parse_U0_sig_i_V_read : STD_LOGIC;
    signal parse_U0_hits_read : STD_LOGIC;
    signal parse_U0_loc_V_read : STD_LOGIC;
    signal parse_U0_sig_o_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal parse_U0_sig_o_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal dup1_V_full_n : STD_LOGIC;
    signal dup1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dup1_V_empty_n : STD_LOGIC;
    signal dup2_V_full_n : STD_LOGIC;
    signal dup2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dup2_V_empty_n : STD_LOGIC;
    signal dup3_V_full_n : STD_LOGIC;
    signal dup3_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dup3_V_empty_n : STD_LOGIC;
    signal dup4_V_full_n : STD_LOGIC;
    signal dup4_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dup4_V_empty_n : STD_LOGIC;
    signal thres_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal thres_empty_n : STD_LOGIC;
    signal sig_locs_V_full_n : STD_LOGIC;
    signal sig_locs_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_locs_V_empty_n : STD_LOGIC;
    signal hits_channel_full_n : STD_LOGIC;
    signal hits_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal hits_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_findpeaks_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findpeaks_U0_full_n : STD_LOGIC;
    signal start_for_findpeaks_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findpeaks_U0_empty_n : STD_LOGIC;
    signal start_for_threshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_full_n : STD_LOGIC;
    signal start_for_threshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_threshold_U0_empty_n : STD_LOGIC;
    signal start_for_parse_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_parse_U0_full_n : STD_LOGIC;
    signal start_for_parse_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_parse_U0_empty_n : STD_LOGIC;

    component duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        dat_i_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        dat_i_V_empty_n : IN STD_LOGIC;
        dat_i_V_read : OUT STD_LOGIC;
        dat_1_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dat_1_o_V_full_n : IN STD_LOGIC;
        dat_1_o_V_write : OUT STD_LOGIC;
        dat_2_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dat_2_o_V_full_n : IN STD_LOGIC;
        dat_2_o_V_write : OUT STD_LOGIC;
        dat_3_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dat_3_o_V_full_n : IN STD_LOGIC;
        dat_3_o_V_write : OUT STD_LOGIC;
        dat_4_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dat_4_o_V_full_n : IN STD_LOGIC;
        dat_4_o_V_write : OUT STD_LOGIC );
    end component;


    component findpeaks IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        samples_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        samples_V_empty_n : IN STD_LOGIC;
        samples_V_read : OUT STD_LOGIC;
        amplitude_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        amplitude_V_ap_vld : OUT STD_LOGIC;
        locations_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        locations_V_ap_vld : OUT STD_LOGIC );
    end component;


    component threshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        amplitude_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        amplitude_V_empty_n : IN STD_LOGIC;
        amplitude_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        signals_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        signals_V_empty_n : IN STD_LOGIC;
        signals_V_read : OUT STD_LOGIC;
        threshold_x : IN STD_LOGIC_VECTOR (31 downto 0);
        loc_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        loc_V_full_n : IN STD_LOGIC;
        loc_V_write : OUT STD_LOGIC;
        hits_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        hits_out_full_n : IN STD_LOGIC;
        hits_out_write : OUT STD_LOGIC );
    end component;


    component parse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_i_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        sig_i_V_empty_n : IN STD_LOGIC;
        sig_i_V_read : OUT STD_LOGIC;
        hits_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        hits_empty_n : IN STD_LOGIC;
        hits_read : OUT STD_LOGIC;
        loc_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        loc_V_empty_n : IN STD_LOGIC;
        loc_V_read : OUT STD_LOGIC;
        sig_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        sig_o_V_full_n : IN STD_LOGIC;
        sig_o_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_findpeafYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_threshog8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_parse_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    duplicate_U0 : component duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => duplicate_U0_ap_start,
        start_full_n => start_for_parse_U0_full_n,
        ap_ready => duplicate_U0_ap_ready,
        ap_done => duplicate_U0_ap_done,
        ap_continue => duplicate_U0_ap_continue,
        ap_idle => duplicate_U0_ap_idle,
        start_out => duplicate_U0_start_out,
        start_write => duplicate_U0_start_write,
        dat_i_V_dout => dat_i_V_dout,
        dat_i_V_empty_n => dat_i_V_empty_n,
        dat_i_V_read => duplicate_U0_dat_i_V_read,
        dat_1_o_V_din => duplicate_U0_dat_1_o_V_din,
        dat_1_o_V_full_n => dup1_V_full_n,
        dat_1_o_V_write => duplicate_U0_dat_1_o_V_write,
        dat_2_o_V_din => duplicate_U0_dat_2_o_V_din,
        dat_2_o_V_full_n => dup2_V_full_n,
        dat_2_o_V_write => duplicate_U0_dat_2_o_V_write,
        dat_3_o_V_din => duplicate_U0_dat_3_o_V_din,
        dat_3_o_V_full_n => dup3_V_full_n,
        dat_3_o_V_write => duplicate_U0_dat_3_o_V_write,
        dat_4_o_V_din => duplicate_U0_dat_4_o_V_din,
        dat_4_o_V_full_n => dup4_V_full_n,
        dat_4_o_V_write => duplicate_U0_dat_4_o_V_write);

    findpeaks_U0 : component findpeaks
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => findpeaks_U0_ap_start,
        ap_done => findpeaks_U0_ap_done,
        ap_continue => findpeaks_U0_ap_continue,
        ap_idle => findpeaks_U0_ap_idle,
        ap_ready => findpeaks_U0_ap_ready,
        samples_V_dout => dup1_V_dout,
        samples_V_empty_n => dup1_V_empty_n,
        samples_V_read => findpeaks_U0_samples_V_read,
        amplitude_V => findpeaks_U0_amplitude_V,
        amplitude_V_ap_vld => findpeaks_U0_amplitude_V_ap_vld,
        locations_V => findpeaks_U0_locations_V,
        locations_V_ap_vld => findpeaks_U0_locations_V_ap_vld);

    threshold_U0 : component threshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => threshold_U0_ap_start,
        ap_done => threshold_U0_ap_done,
        ap_continue => threshold_U0_ap_continue,
        ap_idle => threshold_U0_ap_idle,
        ap_ready => threshold_U0_ap_ready,
        amplitude_V_dout => dup2_V_dout,
        amplitude_V_empty_n => dup2_V_empty_n,
        amplitude_V_read => threshold_U0_amplitude_V_read,
        ap_return => threshold_U0_ap_return);

    detect_U0 : component detect
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => detect_U0_ap_start,
        ap_done => detect_U0_ap_done,
        ap_continue => detect_U0_ap_continue,
        ap_idle => detect_U0_ap_idle,
        ap_ready => detect_U0_ap_ready,
        signals_V_dout => dup3_V_dout,
        signals_V_empty_n => dup3_V_empty_n,
        signals_V_read => detect_U0_signals_V_read,
        threshold_x => thres_dout,
        loc_V_din => detect_U0_loc_V_din,
        loc_V_full_n => sig_locs_V_full_n,
        loc_V_write => detect_U0_loc_V_write,
        hits_out_din => detect_U0_hits_out_din,
        hits_out_full_n => hits_channel_full_n,
        hits_out_write => detect_U0_hits_out_write);

    parse_U0 : component parse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => parse_U0_ap_start,
        ap_done => parse_U0_ap_done,
        ap_continue => parse_U0_ap_continue,
        ap_idle => parse_U0_ap_idle,
        ap_ready => parse_U0_ap_ready,
        sig_i_V_dout => dup4_V_dout,
        sig_i_V_empty_n => dup4_V_empty_n,
        sig_i_V_read => parse_U0_sig_i_V_read,
        hits_dout => hits_channel_dout,
        hits_empty_n => hits_channel_empty_n,
        hits_read => parse_U0_hits_read,
        loc_V_dout => sig_locs_V_dout,
        loc_V_empty_n => sig_locs_V_empty_n,
        loc_V_read => parse_U0_loc_V_read,
        sig_o_V_din => parse_U0_sig_o_V_din,
        sig_o_V_full_n => res_o_V_full_n,
        sig_o_V_write => parse_U0_sig_o_V_write);

    dup1_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicate_U0_dat_1_o_V_din,
        if_full_n => dup1_V_full_n,
        if_write => duplicate_U0_dat_1_o_V_write,
        if_dout => dup1_V_dout,
        if_empty_n => dup1_V_empty_n,
        if_read => findpeaks_U0_samples_V_read);

    dup2_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicate_U0_dat_2_o_V_din,
        if_full_n => dup2_V_full_n,
        if_write => duplicate_U0_dat_2_o_V_write,
        if_dout => dup2_V_dout,
        if_empty_n => dup2_V_empty_n,
        if_read => threshold_U0_amplitude_V_read);

    dup3_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicate_U0_dat_3_o_V_din,
        if_full_n => dup3_V_full_n,
        if_write => duplicate_U0_dat_3_o_V_write,
        if_dout => dup3_V_dout,
        if_empty_n => dup3_V_empty_n,
        if_read => detect_U0_signals_V_read);

    dup4_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicate_U0_dat_4_o_V_din,
        if_full_n => dup4_V_full_n,
        if_write => duplicate_U0_dat_4_o_V_write,
        if_dout => dup4_V_dout,
        if_empty_n => dup4_V_empty_n,
        if_read => parse_U0_sig_i_V_read);

    thres_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => threshold_U0_ap_return,
        if_full_n => thres_full_n,
        if_write => threshold_U0_ap_done,
        if_dout => thres_dout,
        if_empty_n => thres_empty_n,
        if_read => detect_U0_ap_ready);

    sig_locs_V_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_U0_loc_V_din,
        if_full_n => sig_locs_V_full_n,
        if_write => detect_U0_loc_V_write,
        if_dout => sig_locs_V_dout,
        if_empty_n => sig_locs_V_empty_n,
        if_read => parse_U0_loc_V_read);

    hits_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_U0_hits_out_din,
        if_full_n => hits_channel_full_n,
        if_write => detect_U0_hits_out_write,
        if_dout => hits_channel_dout,
        if_empty_n => hits_channel_empty_n,
        if_read => parse_U0_hits_read);

    start_for_findpeafYi_U : component start_for_findpeafYi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_findpeaks_U0_din,
        if_full_n => start_for_findpeaks_U0_full_n,
        if_write => duplicate_U0_start_write,
        if_dout => start_for_findpeaks_U0_dout,
        if_empty_n => start_for_findpeaks_U0_empty_n,
        if_read => findpeaks_U0_ap_ready);

    start_for_threshog8j_U : component start_for_threshog8j
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_threshold_U0_din,
        if_full_n => start_for_threshold_U0_full_n,
        if_write => duplicate_U0_start_write,
        if_dout => start_for_threshold_U0_dout,
        if_empty_n => start_for_threshold_U0_empty_n,
        if_read => threshold_U0_ap_ready);

    start_for_parse_U0_U : component start_for_parse_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_parse_U0_din,
        if_full_n => start_for_parse_U0_full_n,
        if_write => duplicate_U0_start_write,
        if_dout => start_for_parse_U0_dout,
        if_empty_n => start_for_parse_U0_empty_n,
        if_read => parse_U0_ap_ready);




    ap_channel_done_thres <= threshold_U0_ap_done;
    ap_done <= parse_U0_ap_done;
    ap_idle <= (duplicate_U0_ap_idle and findpeaks_U0_ap_idle and threshold_U0_ap_idle and detect_U0_ap_idle and parse_U0_ap_idle and (thres_empty_n xor ap_const_logic_1));
    ap_ready <= duplicate_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= parse_U0_ap_done;
    ap_sync_ready <= duplicate_U0_ap_ready;
    dat_i_V_read <= duplicate_U0_dat_i_V_read;
    detect_U0_ap_continue <= ap_const_logic_1;
    detect_U0_ap_start <= thres_empty_n;
    duplicate_U0_ap_continue <= ap_const_logic_1;
    duplicate_U0_ap_start <= ap_start;
    findpeaks_U0_ap_continue <= ap_const_logic_1;
    findpeaks_U0_ap_start <= start_for_findpeaks_U0_empty_n;
    parse_U0_ap_continue <= ap_const_logic_1;
    parse_U0_ap_start <= start_for_parse_U0_empty_n;
    res_o_V_din <= parse_U0_sig_o_V_din;
    res_o_V_write <= parse_U0_sig_o_V_write;
    start_for_findpeaks_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_parse_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_threshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    threshold_U0_ap_continue <= thres_full_n;
    threshold_U0_ap_start <= start_for_threshold_U0_empty_n;
end behav;
